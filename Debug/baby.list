
baby.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  08005984  08005984  00006984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800604c  0800604c  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  0800604c  0800604c  0000704c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006054  08006054  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006054  08006054  00007054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006058  08006058  00007058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800605c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000805c  2**0
                  CONTENTS
 10 .bss          00003150  2000005c  2000005c  0000805c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200031ac  200031ac  0000805c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010734  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025cb  00000000  00000000  000187c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  0001ad90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009db  00000000  00000000  0001ba48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000249fe  00000000  00000000  0001c423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fde0  00000000  00000000  00040e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dae25  00000000  00000000  00050c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012ba26  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a24  00000000  00000000  0012ba6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0012f490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800596c 	.word	0x0800596c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	0800596c 	.word	0x0800596c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <ESP_Clear_Buffer>:
#define pc_uart &huart3

uint8_t buffer[10000]; // 06/15 버퍼 사이즈를 20에서 10000으로 늘림

void ESP_Clear_Buffer()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	memset(buffer, 0, 10000);
 8000594:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000598:	2100      	movs	r1, #0
 800059a:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <ESP_Clear_Buffer+0x14>)
 800059c:	f004 fd66 	bl	800506c <memset>
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000078 	.word	0x20000078

080005a8 <ESP_Init>:

/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	f5ad 5d1c 	sub.w	sp, sp, #9984	@ 0x2700
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	f507 63e4 	add.w	r3, r7, #1824	@ 0x720
 80005b6:	f2a3 731c 	subw	r3, r3, #1820	@ 0x71c
 80005ba:	6018      	str	r0, [r3, #0]
 80005bc:	f507 63e4 	add.w	r3, r7, #1824	@ 0x720
 80005c0:	f5a3 63e4 	sub.w	r3, r3, #1824	@ 0x720
 80005c4:	6019      	str	r1, [r3, #0]
	char data[10000];
	int len;

	Ringbuf_init();
 80005c6:	f000 fbe5 	bl	8000d94 <Ringbuf_init>

	HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+RST\r\n", strlen("AT+RST\r\n"), 100);
 80005ca:	2364      	movs	r3, #100	@ 0x64
 80005cc:	2208      	movs	r2, #8
 80005ce:	49a6      	ldr	r1, [pc, #664]	@ (8000868 <ESP_Init+0x2c0>)
 80005d0:	48a6      	ldr	r0, [pc, #664]	@ (800086c <ESP_Init+0x2c4>)
 80005d2:	f003 f9e3 	bl	800399c <HAL_UART_Transmit>
	Uart_sendstring("RESETTING.", pc_uart);
 80005d6:	49a6      	ldr	r1, [pc, #664]	@ (8000870 <ESP_Init+0x2c8>)
 80005d8:	48a6      	ldr	r0, [pc, #664]	@ (8000874 <ESP_Init+0x2cc>)
 80005da:	f000 fdf8 	bl	80011ce <Uart_sendstring>
	for (int i=0; i<5; i++)
 80005de:	2300      	movs	r3, #0
 80005e0:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 80005e4:	f102 021c 	add.w	r2, r2, #28
 80005e8:	6013      	str	r3, [r2, #0]
 80005ea:	e012      	b.n	8000612 <ESP_Init+0x6a>
	{
		Uart_sendstring(".", pc_uart);
 80005ec:	49a0      	ldr	r1, [pc, #640]	@ (8000870 <ESP_Init+0x2c8>)
 80005ee:	48a2      	ldr	r0, [pc, #648]	@ (8000878 <ESP_Init+0x2d0>)
 80005f0:	f000 fded 	bl	80011ce <Uart_sendstring>
		HAL_Delay(1000);
 80005f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005f8:	f001 fd24 	bl	8002044 <HAL_Delay>
	for (int i=0; i<5; i++)
 80005fc:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8000600:	f103 031c 	add.w	r3, r3, #28
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	3301      	adds	r3, #1
 8000608:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 800060c:	f102 021c 	add.w	r2, r2, #28
 8000610:	6013      	str	r3, [r2, #0]
 8000612:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8000616:	f103 031c 	add.w	r3, r3, #28
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b04      	cmp	r3, #4
 800061e:	dde5      	ble.n	80005ec <ESP_Init+0x44>
	}

	Uart_sendstring("\r\n", pc_uart);
 8000620:	4993      	ldr	r1, [pc, #588]	@ (8000870 <ESP_Init+0x2c8>)
 8000622:	4896      	ldr	r0, [pc, #600]	@ (800087c <ESP_Init+0x2d4>)
 8000624:	f000 fdd3 	bl	80011ce <Uart_sendstring>


	/********* 현재 와이파이 리스트 출력하기 **********/
	Uart_sendstring("\r\n[현재 와이파이 리스트를 출력합니다]", pc_uart);
 8000628:	4991      	ldr	r1, [pc, #580]	@ (8000870 <ESP_Init+0x2c8>)
 800062a:	4895      	ldr	r0, [pc, #596]	@ (8000880 <ESP_Init+0x2d8>)
 800062c:	f000 fdcf 	bl	80011ce <Uart_sendstring>
	HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+CWLAP\r\n", strlen("AT+CWLAP\r\n"), 100);
 8000630:	2364      	movs	r3, #100	@ 0x64
 8000632:	220a      	movs	r2, #10
 8000634:	4993      	ldr	r1, [pc, #588]	@ (8000884 <ESP_Init+0x2dc>)
 8000636:	488d      	ldr	r0, [pc, #564]	@ (800086c <ESP_Init+0x2c4>)
 8000638:	f003 f9b0 	bl	800399c <HAL_UART_Transmit>
	while (!(Wait_for("CWLAP", wifi_uart)));
 800063c:	bf00      	nop
 800063e:	498b      	ldr	r1, [pc, #556]	@ (800086c <ESP_Init+0x2c4>)
 8000640:	4891      	ldr	r0, [pc, #580]	@ (8000888 <ESP_Init+0x2e0>)
 8000642:	f000 fe55 	bl	80012f0 <Wait_for>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d0f8      	beq.n	800063e <ESP_Init+0x96>
	while (!(Copy_upto("OK",buffer, wifi_uart)));
 800064c:	bf00      	nop
 800064e:	4a87      	ldr	r2, [pc, #540]	@ (800086c <ESP_Init+0x2c4>)
 8000650:	498e      	ldr	r1, [pc, #568]	@ (800088c <ESP_Init+0x2e4>)
 8000652:	488f      	ldr	r0, [pc, #572]	@ (8000890 <ESP_Init+0x2e8>)
 8000654:	f000 fdd2 	bl	80011fc <Copy_upto>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0f7      	beq.n	800064e <ESP_Init+0xa6>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 800065e:	bf00      	nop
 8000660:	4982      	ldr	r1, [pc, #520]	@ (800086c <ESP_Init+0x2c4>)
 8000662:	488c      	ldr	r0, [pc, #560]	@ (8000894 <ESP_Init+0x2ec>)
 8000664:	f000 fe44 	bl	80012f0 <Wait_for>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d0f8      	beq.n	8000660 <ESP_Init+0xb8>
	len = strlen (buffer);
 800066e:	4887      	ldr	r0, [pc, #540]	@ (800088c <ESP_Init+0x2e4>)
 8000670:	f7ff fdbe 	bl	80001f0 <strlen>
 8000674:	4603      	mov	r3, r0
 8000676:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 800067a:	f102 0218 	add.w	r2, r2, #24
 800067e:	6013      	str	r3, [r2, #0]
	buffer[len-2] = '\0';
 8000680:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8000684:	f103 0318 	add.w	r3, r3, #24
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	3b02      	subs	r3, #2
 800068c:	4a7f      	ldr	r2, [pc, #508]	@ (800088c <ESP_Init+0x2e4>)
 800068e:	2100      	movs	r1, #0
 8000690:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "%s\r\n", buffer);
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	3b18      	subs	r3, #24
 8000698:	4a7c      	ldr	r2, [pc, #496]	@ (800088c <ESP_Init+0x2e4>)
 800069a:	497f      	ldr	r1, [pc, #508]	@ (8000898 <ESP_Init+0x2f0>)
 800069c:	4618      	mov	r0, r3
 800069e:	f004 fcc5 	bl	800502c <siprintf>
	Uart_sendstring(data, pc_uart);
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	3b18      	subs	r3, #24
 80006a8:	4971      	ldr	r1, [pc, #452]	@ (8000870 <ESP_Init+0x2c8>)
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fd8f 	bl	80011ce <Uart_sendstring>
	ESP_Clear_Buffer();
 80006b0:	f7ff ff6e 	bl	8000590 <ESP_Clear_Buffer>

	/********* AT **********/
	Uart_sendstring("\r[와이파이 연결 시도]\r\n", pc_uart);
 80006b4:	496e      	ldr	r1, [pc, #440]	@ (8000870 <ESP_Init+0x2c8>)
 80006b6:	4879      	ldr	r0, [pc, #484]	@ (800089c <ESP_Init+0x2f4>)
 80006b8:	f000 fd89 	bl	80011ce <Uart_sendstring>
	HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT\r\n", strlen("AT\r\n"), 100);
 80006bc:	2364      	movs	r3, #100	@ 0x64
 80006be:	2204      	movs	r2, #4
 80006c0:	4977      	ldr	r1, [pc, #476]	@ (80008a0 <ESP_Init+0x2f8>)
 80006c2:	486a      	ldr	r0, [pc, #424]	@ (800086c <ESP_Init+0x2c4>)
 80006c4:	f003 f96a 	bl	800399c <HAL_UART_Transmit>
	while(!(Wait_for("AT\r\r\n\r\nOK\r\n", wifi_uart)));
 80006c8:	bf00      	nop
 80006ca:	4968      	ldr	r1, [pc, #416]	@ (800086c <ESP_Init+0x2c4>)
 80006cc:	4875      	ldr	r0, [pc, #468]	@ (80008a4 <ESP_Init+0x2fc>)
 80006ce:	f000 fe0f 	bl	80012f0 <Wait_for>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0f8      	beq.n	80006ca <ESP_Init+0x122>
	Uart_sendstring("\r-(완료) WIFI 모듈 자체 테스트 \r\n", pc_uart);
 80006d8:	4965      	ldr	r1, [pc, #404]	@ (8000870 <ESP_Init+0x2c8>)
 80006da:	4873      	ldr	r0, [pc, #460]	@ (80008a8 <ESP_Init+0x300>)
 80006dc:	f000 fd77 	bl	80011ce <Uart_sendstring>
	ESP_Clear_Buffer();
 80006e0:	f7ff ff56 	bl	8000590 <ESP_Clear_Buffer>

	/********* AT+CWMODE=3 **********/
	HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+CWMODE=3\r\n", strlen("AT+CWMODE=3\r\n"), 100);
 80006e4:	2364      	movs	r3, #100	@ 0x64
 80006e6:	220d      	movs	r2, #13
 80006e8:	4970      	ldr	r1, [pc, #448]	@ (80008ac <ESP_Init+0x304>)
 80006ea:	4860      	ldr	r0, [pc, #384]	@ (800086c <ESP_Init+0x2c4>)
 80006ec:	f003 f956 	bl	800399c <HAL_UART_Transmit>
	while (!(Wait_for("AT+CWMODE=3\r\r\n\r\nOK\r\n", wifi_uart)));
 80006f0:	bf00      	nop
 80006f2:	495e      	ldr	r1, [pc, #376]	@ (800086c <ESP_Init+0x2c4>)
 80006f4:	486e      	ldr	r0, [pc, #440]	@ (80008b0 <ESP_Init+0x308>)
 80006f6:	f000 fdfb 	bl	80012f0 <Wait_for>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d0f8      	beq.n	80006f2 <ESP_Init+0x14a>
	Uart_sendstring("-(완료) AP모드 & Station Mode 동시 설정\r\n", pc_uart);
 8000700:	495b      	ldr	r1, [pc, #364]	@ (8000870 <ESP_Init+0x2c8>)
 8000702:	486c      	ldr	r0, [pc, #432]	@ (80008b4 <ESP_Init+0x30c>)
 8000704:	f000 fd63 	bl	80011ce <Uart_sendstring>
	ESP_Clear_Buffer();
 8000708:	f7ff ff42 	bl	8000590 <ESP_Clear_Buffer>

	/***   Multiple Connection 허용. 연결 되기전에 명령어 실행해야함****/
	HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+CIPMUX=1\r\n", strlen("AT+CIPMUX=1\r\n"), 100);
 800070c:	2364      	movs	r3, #100	@ 0x64
 800070e:	220d      	movs	r2, #13
 8000710:	4969      	ldr	r1, [pc, #420]	@ (80008b8 <ESP_Init+0x310>)
 8000712:	4856      	ldr	r0, [pc, #344]	@ (800086c <ESP_Init+0x2c4>)
 8000714:	f003 f942 	bl	800399c <HAL_UART_Transmit>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000718:	bf00      	nop
 800071a:	4954      	ldr	r1, [pc, #336]	@ (800086c <ESP_Init+0x2c4>)
 800071c:	485d      	ldr	r0, [pc, #372]	@ (8000894 <ESP_Init+0x2ec>)
 800071e:	f000 fde7 	bl	80012f0 <Wait_for>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d0f8      	beq.n	800071a <ESP_Init+0x172>
	Uart_sendstring("-(완료) 동시 접속 허용 설정\r\n", pc_uart);
 8000728:	4951      	ldr	r1, [pc, #324]	@ (8000870 <ESP_Init+0x2c8>)
 800072a:	4864      	ldr	r0, [pc, #400]	@ (80008bc <ESP_Init+0x314>)
 800072c:	f000 fd4f 	bl	80011ce <Uart_sendstring>
	ESP_Clear_Buffer();
 8000730:	f7ff ff2e 	bl	8000590 <ESP_Clear_Buffer>

	/********* AT+CWJAP="SSID","PASSWD" : WIFI 연결 **********/
	Uart_sendstring("-(진행중) 와이파이 연결중..\n", pc_uart);
 8000734:	494e      	ldr	r1, [pc, #312]	@ (8000870 <ESP_Init+0x2c8>)
 8000736:	4862      	ldr	r0, [pc, #392]	@ (80008c0 <ESP_Init+0x318>)
 8000738:	f000 fd49 	bl	80011ce <Uart_sendstring>
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 800073c:	f507 63e4 	add.w	r3, r7, #1824	@ 0x720
 8000740:	f5a3 63e4 	sub.w	r3, r3, #1824	@ 0x720
 8000744:	f507 62e4 	add.w	r2, r7, #1824	@ 0x720
 8000748:	f2a2 721c 	subw	r2, r2, #1820	@ 0x71c
 800074c:	f107 0020 	add.w	r0, r7, #32
 8000750:	3818      	subs	r0, #24
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	6812      	ldr	r2, [r2, #0]
 8000756:	495b      	ldr	r1, [pc, #364]	@ (80008c4 <ESP_Init+0x31c>)
 8000758:	f004 fc68 	bl	800502c <siprintf>
	HAL_UART_Transmit(wifi_uart, (uint8_t*)data, strlen(data), 100);
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	3b18      	subs	r3, #24
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fd44 	bl	80001f0 <strlen>
 8000768:	4603      	mov	r3, r0
 800076a:	b29a      	uxth	r2, r3
 800076c:	f107 0120 	add.w	r1, r7, #32
 8000770:	3918      	subs	r1, #24
 8000772:	2364      	movs	r3, #100	@ 0x64
 8000774:	483d      	ldr	r0, [pc, #244]	@ (800086c <ESP_Init+0x2c4>)
 8000776:	f003 f911 	bl	800399c <HAL_UART_Transmit>
	while (!(Wait_for("WIFI GOT IP\r\n\r\nOK\r\n", wifi_uart)));
 800077a:	bf00      	nop
 800077c:	493b      	ldr	r1, [pc, #236]	@ (800086c <ESP_Init+0x2c4>)
 800077e:	4852      	ldr	r0, [pc, #328]	@ (80008c8 <ESP_Init+0x320>)
 8000780:	f000 fdb6 	bl	80012f0 <Wait_for>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d0f8      	beq.n	800077c <ESP_Init+0x1d4>
	sprintf (data, "\r\n-(완료) \"%s\"에 연결되었습니다!\r\n", SSID);
 800078a:	f507 63e4 	add.w	r3, r7, #1824	@ 0x720
 800078e:	f2a3 721c 	subw	r2, r3, #1820	@ 0x71c
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	3b18      	subs	r3, #24
 8000798:	6812      	ldr	r2, [r2, #0]
 800079a:	494c      	ldr	r1, [pc, #304]	@ (80008cc <ESP_Init+0x324>)
 800079c:	4618      	mov	r0, r3
 800079e:	f004 fc45 	bl	800502c <siprintf>
	Uart_sendstring(data,pc_uart);
 80007a2:	f107 0320 	add.w	r3, r7, #32
 80007a6:	3b18      	subs	r3, #24
 80007a8:	4931      	ldr	r1, [pc, #196]	@ (8000870 <ESP_Init+0x2c8>)
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fd0f 	bl	80011ce <Uart_sendstring>
	ESP_Clear_Buffer();
 80007b0:	f7ff feee 	bl	8000590 <ESP_Clear_Buffer>

	/********* AT+CIFSR : IP 주소 확인 **********/
	Uart_sendstring("AT+CIFSR\r\n", wifi_uart);
 80007b4:	492d      	ldr	r1, [pc, #180]	@ (800086c <ESP_Init+0x2c4>)
 80007b6:	4846      	ldr	r0, [pc, #280]	@ (80008d0 <ESP_Init+0x328>)
 80007b8:	f000 fd09 	bl	80011ce <Uart_sendstring>
	while (!(Wait_for("CIFSR:STAIP,\"", wifi_uart)));
 80007bc:	bf00      	nop
 80007be:	492b      	ldr	r1, [pc, #172]	@ (800086c <ESP_Init+0x2c4>)
 80007c0:	4844      	ldr	r0, [pc, #272]	@ (80008d4 <ESP_Init+0x32c>)
 80007c2:	f000 fd95 	bl	80012f0 <Wait_for>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d0f8      	beq.n	80007be <ESP_Init+0x216>
	while (!(Copy_upto("\"",buffer, wifi_uart)));
 80007cc:	bf00      	nop
 80007ce:	4a27      	ldr	r2, [pc, #156]	@ (800086c <ESP_Init+0x2c4>)
 80007d0:	492e      	ldr	r1, [pc, #184]	@ (800088c <ESP_Init+0x2e4>)
 80007d2:	4841      	ldr	r0, [pc, #260]	@ (80008d8 <ESP_Init+0x330>)
 80007d4:	f000 fd12 	bl	80011fc <Copy_upto>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d0f7      	beq.n	80007ce <ESP_Init+0x226>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 80007de:	bf00      	nop
 80007e0:	4922      	ldr	r1, [pc, #136]	@ (800086c <ESP_Init+0x2c4>)
 80007e2:	482c      	ldr	r0, [pc, #176]	@ (8000894 <ESP_Init+0x2ec>)
 80007e4:	f000 fd84 	bl	80012f0 <Wait_for>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d0f8      	beq.n	80007e0 <ESP_Init+0x238>

	// 06/15 아래 문제는 해결됨
	/** 이 부분이 문제, 여기서 데이터를 시리얼보드로 전송하면서 메모리에 오류가 나버림**/
	/** main으로 돌아가야할 메모리 주소가 날라가버림; **/
	len = strlen (buffer);
 80007ee:	4827      	ldr	r0, [pc, #156]	@ (800088c <ESP_Init+0x2e4>)
 80007f0:	f7ff fcfe 	bl	80001f0 <strlen>
 80007f4:	4603      	mov	r3, r0
 80007f6:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 80007fa:	f102 0218 	add.w	r2, r2, #24
 80007fe:	6013      	str	r3, [r2, #0]
	buffer[16] = '\0';
 8000800:	4b22      	ldr	r3, [pc, #136]	@ (800088c <ESP_Init+0x2e4>)
 8000802:	2200      	movs	r2, #0
 8000804:	741a      	strb	r2, [r3, #16]
	sprintf (data, "\r\nIP ADDR: %s\r\n", buffer);
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	3b18      	subs	r3, #24
 800080c:	4a1f      	ldr	r2, [pc, #124]	@ (800088c <ESP_Init+0x2e4>)
 800080e:	4933      	ldr	r1, [pc, #204]	@ (80008dc <ESP_Init+0x334>)
 8000810:	4618      	mov	r0, r3
 8000812:	f004 fc0b 	bl	800502c <siprintf>
	Uart_sendstring(data, pc_uart);
 8000816:	f107 0320 	add.w	r3, r7, #32
 800081a:	3b18      	subs	r3, #24
 800081c:	4914      	ldr	r1, [pc, #80]	@ (8000870 <ESP_Init+0x2c8>)
 800081e:	4618      	mov	r0, r3
 8000820:	f000 fcd5 	bl	80011ce <Uart_sendstring>
	ESP_Clear_Buffer();
 8000824:	f7ff feb4 	bl	8000590 <ESP_Clear_Buffer>

	/********* AT+CIPSERVER : ESP8266에서 TCP 서버 열기 **********/
	HAL_UART_Transmit(wifi_uart, (uint8_t*)"AT+CIPSERVER=1\r\n", strlen("AT+CIPSERVER=1\r\n"), 100);
 8000828:	2364      	movs	r3, #100	@ 0x64
 800082a:	2210      	movs	r2, #16
 800082c:	492c      	ldr	r1, [pc, #176]	@ (80008e0 <ESP_Init+0x338>)
 800082e:	480f      	ldr	r0, [pc, #60]	@ (800086c <ESP_Init+0x2c4>)
 8000830:	f003 f8b4 	bl	800399c <HAL_UART_Transmit>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000834:	bf00      	nop
 8000836:	490d      	ldr	r1, [pc, #52]	@ (800086c <ESP_Init+0x2c4>)
 8000838:	4816      	ldr	r0, [pc, #88]	@ (8000894 <ESP_Init+0x2ec>)
 800083a:	f000 fd59 	bl	80012f0 <Wait_for>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d0f8      	beq.n	8000836 <ESP_Init+0x28e>
	Uart_sendstring("\r\n-(완료) 333포트 번호를 열었습니다!\r\n", pc_uart);
 8000844:	490a      	ldr	r1, [pc, #40]	@ (8000870 <ESP_Init+0x2c8>)
 8000846:	4827      	ldr	r0, [pc, #156]	@ (80008e4 <ESP_Init+0x33c>)
 8000848:	f000 fcc1 	bl	80011ce <Uart_sendstring>
	ESP_Clear_Buffer();
 800084c:	f7ff fea0 	bl	8000590 <ESP_Clear_Buffer>


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000856:	4824      	ldr	r0, [pc, #144]	@ (80008e8 <ESP_Init+0x340>)
 8000858:	f002 fa90 	bl	8002d7c <HAL_GPIO_WritePin>
	//while (!(Wait_for("OK", wifi_uart)));
	//ESP_Clear_Buffer();
	//Uart_sendstring("-(완료) TCP 연결이 종료 되었습니다.\r\n", pc_uart);


}
 800085c:	bf00      	nop
 800085e:	f507 571c 	add.w	r7, r7, #9984	@ 0x2700
 8000862:	3720      	adds	r7, #32
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	08005984 	.word	0x08005984
 800086c:	20002ae0 	.word	0x20002ae0
 8000870:	20002b28 	.word	0x20002b28
 8000874:	08005990 	.word	0x08005990
 8000878:	0800599c 	.word	0x0800599c
 800087c:	080059a0 	.word	0x080059a0
 8000880:	080059a4 	.word	0x080059a4
 8000884:	080059dc 	.word	0x080059dc
 8000888:	080059e8 	.word	0x080059e8
 800088c:	20000078 	.word	0x20000078
 8000890:	080059f0 	.word	0x080059f0
 8000894:	080059f4 	.word	0x080059f4
 8000898:	080059fc 	.word	0x080059fc
 800089c:	08005a04 	.word	0x08005a04
 80008a0:	08005a24 	.word	0x08005a24
 80008a4:	08005a2c 	.word	0x08005a2c
 80008a8:	08005a38 	.word	0x08005a38
 80008ac:	08005a64 	.word	0x08005a64
 80008b0:	08005a74 	.word	0x08005a74
 80008b4:	08005a8c 	.word	0x08005a8c
 80008b8:	08005ac0 	.word	0x08005ac0
 80008bc:	08005ad0 	.word	0x08005ad0
 80008c0:	08005af8 	.word	0x08005af8
 80008c4:	08005b20 	.word	0x08005b20
 80008c8:	08005b38 	.word	0x08005b38
 80008cc:	08005b4c 	.word	0x08005b4c
 80008d0:	08005b7c 	.word	0x08005b7c
 80008d4:	08005b88 	.word	0x08005b88
 80008d8:	08005b98 	.word	0x08005b98
 80008dc:	08005b9c 	.word	0x08005b9c
 80008e0:	08005bac 	.word	0x08005bac
 80008e4:	08005bc0 	.word	0x08005bc0
 80008e8:	40020400 	.word	0x40020400

080008ec <Server_Send>:


int Server_Send (char *str, int Link_ID)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b098      	sub	sp, #96	@ 0x60
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff fc7a 	bl	80001f0 <strlen>
 80008fc:	4603      	mov	r3, r0
 80008fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
	char data[80] = {};
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	224c      	movs	r2, #76	@ 0x4c
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f004 fbad 	bl	800506c <memset>
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 8000912:	f107 000c 	add.w	r0, r7, #12
 8000916:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000918:	683a      	ldr	r2, [r7, #0]
 800091a:	491b      	ldr	r1, [pc, #108]	@ (8000988 <Server_Send+0x9c>)
 800091c:	f004 fb86 	bl	800502c <siprintf>
	Uart_sendstring(data, wifi_uart);
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	4919      	ldr	r1, [pc, #100]	@ (800098c <Server_Send+0xa0>)
 8000926:	4618      	mov	r0, r3
 8000928:	f000 fc51 	bl	80011ce <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)));
 800092c:	bf00      	nop
 800092e:	4917      	ldr	r1, [pc, #92]	@ (800098c <Server_Send+0xa0>)
 8000930:	4817      	ldr	r0, [pc, #92]	@ (8000990 <Server_Send+0xa4>)
 8000932:	f000 fcdd 	bl	80012f0 <Wait_for>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d0f8      	beq.n	800092e <Server_Send+0x42>
	Uart_sendstring (str, wifi_uart);
 800093c:	4913      	ldr	r1, [pc, #76]	@ (800098c <Server_Send+0xa0>)
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 fc45 	bl	80011ce <Uart_sendstring>
	while (!(Wait_for("SEND OK", wifi_uart)));
 8000944:	bf00      	nop
 8000946:	4911      	ldr	r1, [pc, #68]	@ (800098c <Server_Send+0xa0>)
 8000948:	4812      	ldr	r0, [pc, #72]	@ (8000994 <Server_Send+0xa8>)
 800094a:	f000 fcd1 	bl	80012f0 <Wait_for>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d0f8      	beq.n	8000946 <Server_Send+0x5a>
	sprintf (data, "AT+CIPCLOSE=5\r\n");
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	490f      	ldr	r1, [pc, #60]	@ (8000998 <Server_Send+0xac>)
 800095a:	4618      	mov	r0, r3
 800095c:	f004 fb66 	bl	800502c <siprintf>
	Uart_sendstring(data, wifi_uart);
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	4909      	ldr	r1, [pc, #36]	@ (800098c <Server_Send+0xa0>)
 8000966:	4618      	mov	r0, r3
 8000968:	f000 fc31 	bl	80011ce <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 800096c:	bf00      	nop
 800096e:	4907      	ldr	r1, [pc, #28]	@ (800098c <Server_Send+0xa0>)
 8000970:	480a      	ldr	r0, [pc, #40]	@ (800099c <Server_Send+0xb0>)
 8000972:	f000 fcbd 	bl	80012f0 <Wait_for>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d0f8      	beq.n	800096e <Server_Send+0x82>
	return 1;
 800097c:	2301      	movs	r3, #1
}
 800097e:	4618      	mov	r0, r3
 8000980:	3760      	adds	r7, #96	@ 0x60
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	08005bf4 	.word	0x08005bf4
 800098c:	20002ae0 	.word	0x20002ae0
 8000990:	08005c08 	.word	0x08005c08
 8000994:	08005c0c 	.word	0x08005c0c
 8000998:	08005c14 	.word	0x08005c14
 800099c:	080059f4 	.word	0x080059f4

080009a0 <check_recv_swing>:

int check_recv_swing(int milli_time){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
    uint8_t received_data;
	if (HAL_UART_Receive(wifi_uart, &received_data, 1, milli_time) == HAL_OK) {
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f107 010f 	add.w	r1, r7, #15
 80009ae:	2201      	movs	r2, #1
 80009b0:	4816      	ldr	r0, [pc, #88]	@ (8000a0c <check_recv_swing+0x6c>)
 80009b2:	f003 f87e 	bl	8003ab2 <HAL_UART_Receive>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d122      	bne.n	8000a02 <check_recv_swing+0x62>
		Uart_sendstring("- 다른 데이터가 수신되었습니다. 스윙 기능을 종료하고, 다른 기능을 수행합니다.\r\n", pc_uart);
 80009bc:	4914      	ldr	r1, [pc, #80]	@ (8000a10 <check_recv_swing+0x70>)
 80009be:	4815      	ldr	r0, [pc, #84]	@ (8000a14 <check_recv_swing+0x74>)
 80009c0:	f000 fc05 	bl	80011ce <Uart_sendstring>
		ESP_Clear_Buffer();
 80009c4:	f7ff fde4 	bl	8000590 <ESP_Clear_Buffer>

		// 보드 LED
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2101      	movs	r1, #1
 80009cc:	4812      	ldr	r0, [pc, #72]	@ (8000a18 <check_recv_swing+0x78>)
 80009ce:	f002 f9d5 	bl	8002d7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2180      	movs	r1, #128	@ 0x80
 80009d6:	4810      	ldr	r0, [pc, #64]	@ (8000a18 <check_recv_swing+0x78>)
 80009d8:	f002 f9d0 	bl	8002d7c <HAL_GPIO_WritePin>

		// 스윙 기능
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2104      	movs	r1, #4
 80009e0:	480e      	ldr	r0, [pc, #56]	@ (8000a1c <check_recv_swing+0x7c>)
 80009e2:	f002 f9cb 	bl	8002d7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2110      	movs	r1, #16
 80009ea:	480d      	ldr	r0, [pc, #52]	@ (8000a20 <check_recv_swing+0x80>)
 80009ec:	f002 f9c6 	bl	8002d7c <HAL_GPIO_WritePin>

		Uart_sendstring("%s\r\n", received_data);
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	4619      	mov	r1, r3
 80009f4:	480b      	ldr	r0, [pc, #44]	@ (8000a24 <check_recv_swing+0x84>)
 80009f6:	f000 fbea 	bl	80011ce <Uart_sendstring>
		ESP_Clear_Buffer();
 80009fa:	f7ff fdc9 	bl	8000590 <ESP_Clear_Buffer>

		// 데이터가 들어왔을 경우 break
		return 1;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e000      	b.n	8000a04 <check_recv_swing+0x64>
	}
	return 0;
 8000a02:	2300      	movs	r3, #0
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20002ae0 	.word	0x20002ae0
 8000a10:	20002b28 	.word	0x20002b28
 8000a14:	08005c24 	.word	0x08005c24
 8000a18:	40020400 	.word	0x40020400
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	40020c00 	.word	0x40020c00
 8000a24:	080059fc 	.word	0x080059fc

08000a28 <check_recv_backdraft>:

int check_recv_backdraft(int milli_time){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
    uint8_t received_data;
	if (HAL_UART_Receive(wifi_uart, &received_data, 1, milli_time) == HAL_OK) {
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f107 010f 	add.w	r1, r7, #15
 8000a36:	2201      	movs	r2, #1
 8000a38:	4816      	ldr	r0, [pc, #88]	@ (8000a94 <check_recv_backdraft+0x6c>)
 8000a3a:	f003 f83a 	bl	8003ab2 <HAL_UART_Receive>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d121      	bne.n	8000a88 <check_recv_backdraft+0x60>
		Uart_sendstring("- 다른 데이터가 수신되었습니다. 역류 방지 기능을 종료하고, 다른 기능을 수행합니다.\r\n", pc_uart);
 8000a44:	4914      	ldr	r1, [pc, #80]	@ (8000a98 <check_recv_backdraft+0x70>)
 8000a46:	4815      	ldr	r0, [pc, #84]	@ (8000a9c <check_recv_backdraft+0x74>)
 8000a48:	f000 fbc1 	bl	80011ce <Uart_sendstring>
		ESP_Clear_Buffer();
 8000a4c:	f7ff fda0 	bl	8000590 <ESP_Clear_Buffer>


		// 역류 방지 기능 요청 내리기
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	2180      	movs	r1, #128	@ 0x80
 8000a54:	4812      	ldr	r0, [pc, #72]	@ (8000aa0 <check_recv_backdraft+0x78>)
 8000a56:	f002 f991 	bl	8002d7c <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2140      	movs	r1, #64	@ 0x40
 8000a5e:	4810      	ldr	r0, [pc, #64]	@ (8000aa0 <check_recv_backdraft+0x78>)
 8000a60:	f002 f98c 	bl	8002d7c <HAL_GPIO_WritePin>
	    HAL_Delay(14000);
 8000a64:	f243 60b0 	movw	r0, #14000	@ 0x36b0
 8000a68:	f001 faec 	bl	8002044 <HAL_Delay>
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2180      	movs	r1, #128	@ 0x80
 8000a70:	480b      	ldr	r0, [pc, #44]	@ (8000aa0 <check_recv_backdraft+0x78>)
 8000a72:	f002 f983 	bl	8002d7c <HAL_GPIO_WritePin>

		Uart_sendstring("%s\r\n", received_data);
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480a      	ldr	r0, [pc, #40]	@ (8000aa4 <check_recv_backdraft+0x7c>)
 8000a7c:	f000 fba7 	bl	80011ce <Uart_sendstring>
		ESP_Clear_Buffer();
 8000a80:	f7ff fd86 	bl	8000590 <ESP_Clear_Buffer>

		// 데이터가 들어왔을 경우 break
		return 1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	e000      	b.n	8000a8a <check_recv_backdraft+0x62>
	}
	return 0;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20002ae0 	.word	0x20002ae0
 8000a98:	20002b28 	.word	0x20002b28
 8000a9c:	08005c94 	.word	0x08005c94
 8000aa0:	40020c00 	.word	0x40020c00
 8000aa4:	080059fc 	.word	0x080059fc

08000aa8 <Server_Start>:
void Server_Start (void){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b0c2      	sub	sp, #264	@ 0x108
 8000aac:	af00      	add	r7, sp, #0
	char buftocopyinto[255] = {0};
 8000aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000ab2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	3304      	adds	r3, #4
 8000abc:	22fb      	movs	r2, #251	@ 0xfb
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f004 fad3 	bl	800506c <memset>
	char Link_ID = 0;
 8000ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000aca:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
	while (!(Get_after("+IPD,", 1, &Link_ID, wifi_uart)));
 8000ad2:	bf00      	nop
 8000ad4:	1dfa      	adds	r2, r7, #7
 8000ad6:	4b9b      	ldr	r3, [pc, #620]	@ (8000d44 <Server_Start+0x29c>)
 8000ad8:	2101      	movs	r1, #1
 8000ada:	489b      	ldr	r0, [pc, #620]	@ (8000d48 <Server_Start+0x2a0>)
 8000adc:	f000 fb48 	bl	8001170 <Get_after>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d0f6      	beq.n	8000ad4 <Server_Start+0x2c>
	Link_ID -= 48;
 8000ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000aea:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	3b30      	subs	r3, #48	@ 0x30
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000af8:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000afc:	701a      	strb	r2, [r3, #0]
	while (!(Copy_upto(" HTTP", buftocopyinto, wifi_uart)));
 8000afe:	bf00      	nop
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	4a8f      	ldr	r2, [pc, #572]	@ (8000d44 <Server_Start+0x29c>)
 8000b06:	4619      	mov	r1, r3
 8000b08:	4890      	ldr	r0, [pc, #576]	@ (8000d4c <Server_Start+0x2a4>)
 8000b0a:	f000 fb77 	bl	80011fc <Copy_upto>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d0f5      	beq.n	8000b00 <Server_Start+0x58>
	if (Look_for("GET /backdraft/on", buftocopyinto) == 1){
 8000b14:	f107 0308 	add.w	r3, r7, #8
 8000b18:	4619      	mov	r1, r3
 8000b1a:	488d      	ldr	r0, [pc, #564]	@ (8000d50 <Server_Start+0x2a8>)
 8000b1c:	f000 f9a1 	bl	8000e62 <Look_for>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d133      	bne.n	8000b8e <Server_Start+0xe6>
		Uart_sendstring("- 역류방지를 위해 침대를 기울입니다.\r\n", pc_uart);
 8000b26:	498b      	ldr	r1, [pc, #556]	@ (8000d54 <Server_Start+0x2ac>)
 8000b28:	488b      	ldr	r0, [pc, #556]	@ (8000d58 <Server_Start+0x2b0>)
 8000b2a:	f000 fb50 	bl	80011ce <Uart_sendstring>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	2140      	movs	r1, #64	@ 0x40
 8000b32:	488a      	ldr	r0, [pc, #552]	@ (8000d5c <Server_Start+0x2b4>)
 8000b34:	f002 f922 	bl	8002d7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2180      	movs	r1, #128	@ 0x80
 8000b3c:	4887      	ldr	r0, [pc, #540]	@ (8000d5c <Server_Start+0x2b4>)
 8000b3e:	f002 f91d 	bl	8002d7c <HAL_GPIO_WritePin>
		if(check_recv_backdraft(14000)){
 8000b42:	f243 60b0 	movw	r0, #14000	@ 0x36b0
 8000b46:	f7ff ff6f 	bl	8000a28 <check_recv_backdraft>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d009      	beq.n	8000b64 <Server_Start+0xbc>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2140      	movs	r1, #64	@ 0x40
 8000b54:	4881      	ldr	r0, [pc, #516]	@ (8000d5c <Server_Start+0x2b4>)
 8000b56:	f002 f911 	bl	8002d7c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2180      	movs	r1, #128	@ 0x80
 8000b5e:	487f      	ldr	r0, [pc, #508]	@ (8000d5c <Server_Start+0x2b4>)
 8000b60:	f002 f90c 	bl	8002d7c <HAL_GPIO_WritePin>
		}
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2140      	movs	r1, #64	@ 0x40
 8000b68:	487c      	ldr	r0, [pc, #496]	@ (8000d5c <Server_Start+0x2b4>)
 8000b6a:	f002 f907 	bl	8002d7c <HAL_GPIO_WritePin>
		Uart_sendstring("- [완료] 역류방지를 위해 침대를 기울입니다.\r\n", pc_uart);
 8000b6e:	4979      	ldr	r1, [pc, #484]	@ (8000d54 <Server_Start+0x2ac>)
 8000b70:	487b      	ldr	r0, [pc, #492]	@ (8000d60 <Server_Start+0x2b8>)
 8000b72:	f000 fb2c 	bl	80011ce <Uart_sendstring>
		ESP_Clear_Buffer();
 8000b76:	f7ff fd0b 	bl	8000590 <ESP_Clear_Buffer>
		Server_Send("HTTP/1.1 200 OK\r\nContent-Length: 0\r\nContent-type: application/json\r\nDate: Mon, 20 Aug 2018 07:59:05 GMT\r\nConnection: close\r\n\r\n", Link_ID);
 8000b7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000b7e:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	4877      	ldr	r0, [pc, #476]	@ (8000d64 <Server_Start+0x2bc>)
 8000b88:	f7ff feb0 	bl	80008ec <Server_Send>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
	    ESP_Clear_Buffer();
	    Server_Send("HTTP/1.1 200 OK\r\nContent-Length: 0\r\nContent-type: application/json\r\nDate: Mon, 20 Aug 2018 07:59:05 GMT\r\nConnection: close\r\n\r\n", Link_ID);
	}
}
 8000b8c:	e0d5      	b.n	8000d3a <Server_Start+0x292>
	else if (Look_for("GET /backdraft/off", buftocopyinto) == 1){
 8000b8e:	f107 0308 	add.w	r3, r7, #8
 8000b92:	4619      	mov	r1, r3
 8000b94:	4874      	ldr	r0, [pc, #464]	@ (8000d68 <Server_Start+0x2c0>)
 8000b96:	f000 f964 	bl	8000e62 <Look_for>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d126      	bne.n	8000bee <Server_Start+0x146>
	    Uart_sendstring("- 역류방지 완료 후 침대를 내립니다.\r\n", pc_uart);
 8000ba0:	496c      	ldr	r1, [pc, #432]	@ (8000d54 <Server_Start+0x2ac>)
 8000ba2:	4872      	ldr	r0, [pc, #456]	@ (8000d6c <Server_Start+0x2c4>)
 8000ba4:	f000 fb13 	bl	80011ce <Uart_sendstring>
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2180      	movs	r1, #128	@ 0x80
 8000bac:	486b      	ldr	r0, [pc, #428]	@ (8000d5c <Server_Start+0x2b4>)
 8000bae:	f002 f8e5 	bl	8002d7c <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2140      	movs	r1, #64	@ 0x40
 8000bb6:	4869      	ldr	r0, [pc, #420]	@ (8000d5c <Server_Start+0x2b4>)
 8000bb8:	f002 f8e0 	bl	8002d7c <HAL_GPIO_WritePin>
	    HAL_Delay(14000);
 8000bbc:	f243 60b0 	movw	r0, #14000	@ 0x36b0
 8000bc0:	f001 fa40 	bl	8002044 <HAL_Delay>
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2180      	movs	r1, #128	@ 0x80
 8000bc8:	4864      	ldr	r0, [pc, #400]	@ (8000d5c <Server_Start+0x2b4>)
 8000bca:	f002 f8d7 	bl	8002d7c <HAL_GPIO_WritePin>
	    Uart_sendstring("- [완료] 역류방지 완료 후 침대를 내립니다.\r\n", pc_uart);
 8000bce:	4961      	ldr	r1, [pc, #388]	@ (8000d54 <Server_Start+0x2ac>)
 8000bd0:	4867      	ldr	r0, [pc, #412]	@ (8000d70 <Server_Start+0x2c8>)
 8000bd2:	f000 fafc 	bl	80011ce <Uart_sendstring>
	    ESP_Clear_Buffer();
 8000bd6:	f7ff fcdb 	bl	8000590 <ESP_Clear_Buffer>
	    Server_Send("HTTP/1.1 200 OK\r\nContent-Length: 0\r\nContent-type: application/json\r\nDate: Mon, 20 Aug 2018 07:59:05 GMT\r\nConnection: close\r\n\r\n", Link_ID);
 8000bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000bde:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	485f      	ldr	r0, [pc, #380]	@ (8000d64 <Server_Start+0x2bc>)
 8000be8:	f7ff fe80 	bl	80008ec <Server_Send>
}
 8000bec:	e0a5      	b.n	8000d3a <Server_Start+0x292>
	else if (Look_for("GET /swing/on", buftocopyinto) == 1){
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	485f      	ldr	r0, [pc, #380]	@ (8000d74 <Server_Start+0x2cc>)
 8000bf6:	f000 f934 	bl	8000e62 <Look_for>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d159      	bne.n	8000cb4 <Server_Start+0x20c>
	    Uart_sendstring("- 스윙 기능을 실행합니다.\r\n", pc_uart);
 8000c00:	4954      	ldr	r1, [pc, #336]	@ (8000d54 <Server_Start+0x2ac>)
 8000c02:	485d      	ldr	r0, [pc, #372]	@ (8000d78 <Server_Start+0x2d0>)
 8000c04:	f000 fae3 	bl	80011ce <Uart_sendstring>
	    ESP_Clear_Buffer();
 8000c08:	f7ff fcc2 	bl	8000590 <ESP_Clear_Buffer>
	    Server_Send("HTTP/1.1 200 OK\r\nContent-Length: 0\r\nContent-type: application/json\r\nDate: Mon, 20 Aug 2018 07:59:05 GMT\r\nConnection: close\r\n\r\n", Link_ID);
 8000c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c10:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	4619      	mov	r1, r3
 8000c18:	4852      	ldr	r0, [pc, #328]	@ (8000d64 <Server_Start+0x2bc>)
 8000c1a:	f7ff fe67 	bl	80008ec <Server_Send>
	    HAL_Delay(1000);
 8000c1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c22:	f001 fa0f 	bl	8002044 <HAL_Delay>
		    ESP_Clear_Buffer();
 8000c26:	f7ff fcb3 	bl	8000590 <ESP_Clear_Buffer>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // 보드 내 LED
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4853      	ldr	r0, [pc, #332]	@ (8000d7c <Server_Start+0x2d4>)
 8000c30:	f002 f8a4 	bl	8002d7c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // 스윙 기능
 8000c34:	2201      	movs	r2, #1
 8000c36:	2104      	movs	r1, #4
 8000c38:	4851      	ldr	r0, [pc, #324]	@ (8000d80 <Server_Start+0x2d8>)
 8000c3a:	f002 f89f 	bl	8002d7c <HAL_GPIO_WritePin>
	    	if(check_recv_swing(500)){
 8000c3e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c42:	f7ff fead 	bl	80009a0 <check_recv_swing>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d16f      	bne.n	8000d2c <Server_Start+0x284>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // 보드 내 LEDㄴ
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2101      	movs	r1, #1
 8000c50:	484a      	ldr	r0, [pc, #296]	@ (8000d7c <Server_Start+0x2d4>)
 8000c52:	f002 f893 	bl	8002d7c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // 스윙 기능
 8000c56:	2200      	movs	r2, #0
 8000c58:	2104      	movs	r1, #4
 8000c5a:	4849      	ldr	r0, [pc, #292]	@ (8000d80 <Server_Start+0x2d8>)
 8000c5c:	f002 f88e 	bl	8002d7c <HAL_GPIO_WritePin>
	    	if(check_recv_swing(300)){
 8000c60:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c64:	f7ff fe9c 	bl	80009a0 <check_recv_swing>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d160      	bne.n	8000d30 <Server_Start+0x288>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // 보드 내 LED
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2180      	movs	r1, #128	@ 0x80
 8000c72:	4842      	ldr	r0, [pc, #264]	@ (8000d7c <Server_Start+0x2d4>)
 8000c74:	f002 f882 	bl	8002d7c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET); // 스윙 기능
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	4837      	ldr	r0, [pc, #220]	@ (8000d5c <Server_Start+0x2b4>)
 8000c7e:	f002 f87d 	bl	8002d7c <HAL_GPIO_WritePin>
	    	if(check_recv_swing(500)){
 8000c82:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c86:	f7ff fe8b 	bl	80009a0 <check_recv_swing>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d151      	bne.n	8000d34 <Server_Start+0x28c>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // 보드 내 LED
 8000c90:	2200      	movs	r2, #0
 8000c92:	2180      	movs	r1, #128	@ 0x80
 8000c94:	4839      	ldr	r0, [pc, #228]	@ (8000d7c <Server_Start+0x2d4>)
 8000c96:	f002 f871 	bl	8002d7c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); // 스윙 기능
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2110      	movs	r1, #16
 8000c9e:	482f      	ldr	r0, [pc, #188]	@ (8000d5c <Server_Start+0x2b4>)
 8000ca0:	f002 f86c 	bl	8002d7c <HAL_GPIO_WritePin>
	    	if(check_recv_swing(300)){
 8000ca4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000ca8:	f7ff fe7a 	bl	80009a0 <check_recv_swing>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d142      	bne.n	8000d38 <Server_Start+0x290>
		    ESP_Clear_Buffer();
 8000cb2:	e7b8      	b.n	8000c26 <Server_Start+0x17e>
	   else if (Look_for("GET /done", buftocopyinto) == 1){
 8000cb4:	f107 0308 	add.w	r3, r7, #8
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4832      	ldr	r0, [pc, #200]	@ (8000d84 <Server_Start+0x2dc>)
 8000cbc:	f000 f8d1 	bl	8000e62 <Look_for>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d10f      	bne.n	8000ce6 <Server_Start+0x23e>
		    Uart_sendstring("- 현재 실행 중인 기능이 없어 종료가 불가능 합니다.\r\n", pc_uart);
 8000cc6:	4923      	ldr	r1, [pc, #140]	@ (8000d54 <Server_Start+0x2ac>)
 8000cc8:	482f      	ldr	r0, [pc, #188]	@ (8000d88 <Server_Start+0x2e0>)
 8000cca:	f000 fa80 	bl	80011ce <Uart_sendstring>
		    ESP_Clear_Buffer();
 8000cce:	f7ff fc5f 	bl	8000590 <ESP_Clear_Buffer>
		    Server_Send("HTTP/1.1 200 OK\r\nContent-Length: 0\r\nContent-type: application/json\r\nDate: Mon, 20 Aug 2018 07:59:05 GMT\r\nConnection: close\r\n\r\n", Link_ID);
 8000cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000cd6:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4821      	ldr	r0, [pc, #132]	@ (8000d64 <Server_Start+0x2bc>)
 8000ce0:	f7ff fe04 	bl	80008ec <Server_Send>
}
 8000ce4:	e029      	b.n	8000d3a <Server_Start+0x292>
	else if (Look_for("GET /swing/off", buftocopyinto) == 1){
 8000ce6:	f107 0308 	add.w	r3, r7, #8
 8000cea:	4619      	mov	r1, r3
 8000cec:	4827      	ldr	r0, [pc, #156]	@ (8000d8c <Server_Start+0x2e4>)
 8000cee:	f000 f8b8 	bl	8000e62 <Look_for>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d120      	bne.n	8000d3a <Server_Start+0x292>
	    Uart_sendstring("- 스윙 기능을 멈춥니다.\r\n", pc_uart);
 8000cf8:	4916      	ldr	r1, [pc, #88]	@ (8000d54 <Server_Start+0x2ac>)
 8000cfa:	4825      	ldr	r0, [pc, #148]	@ (8000d90 <Server_Start+0x2e8>)
 8000cfc:	f000 fa67 	bl	80011ce <Uart_sendstring>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2104      	movs	r1, #4
 8000d04:	481e      	ldr	r0, [pc, #120]	@ (8000d80 <Server_Start+0x2d8>)
 8000d06:	f002 f839 	bl	8002d7c <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2110      	movs	r1, #16
 8000d0e:	4813      	ldr	r0, [pc, #76]	@ (8000d5c <Server_Start+0x2b4>)
 8000d10:	f002 f834 	bl	8002d7c <HAL_GPIO_WritePin>
	    ESP_Clear_Buffer();
 8000d14:	f7ff fc3c 	bl	8000590 <ESP_Clear_Buffer>
	    Server_Send("HTTP/1.1 200 OK\r\nContent-Length: 0\r\nContent-type: application/json\r\nDate: Mon, 20 Aug 2018 07:59:05 GMT\r\nConnection: close\r\n\r\n", Link_ID);
 8000d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000d1c:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	4619      	mov	r1, r3
 8000d24:	480f      	ldr	r0, [pc, #60]	@ (8000d64 <Server_Start+0x2bc>)
 8000d26:	f7ff fde1 	bl	80008ec <Server_Send>
}
 8000d2a:	e006      	b.n	8000d3a <Server_Start+0x292>
	    		break;
 8000d2c:	bf00      	nop
 8000d2e:	e004      	b.n	8000d3a <Server_Start+0x292>
	    		break;
 8000d30:	bf00      	nop
 8000d32:	e002      	b.n	8000d3a <Server_Start+0x292>
	    		break;
 8000d34:	bf00      	nop
 8000d36:	e000      	b.n	8000d3a <Server_Start+0x292>
	    		break;
 8000d38:	bf00      	nop
}
 8000d3a:	bf00      	nop
 8000d3c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20002ae0 	.word	0x20002ae0
 8000d48:	08005d0c 	.word	0x08005d0c
 8000d4c:	08005d14 	.word	0x08005d14
 8000d50:	08005d1c 	.word	0x08005d1c
 8000d54:	20002b28 	.word	0x20002b28
 8000d58:	08005d30 	.word	0x08005d30
 8000d5c:	40020c00 	.word	0x40020c00
 8000d60:	08005d68 	.word	0x08005d68
 8000d64:	08005da8 	.word	0x08005da8
 8000d68:	08005e28 	.word	0x08005e28
 8000d6c:	08005e3c 	.word	0x08005e3c
 8000d70:	08005e70 	.word	0x08005e70
 8000d74:	08005eb0 	.word	0x08005eb0
 8000d78:	08005ec0 	.word	0x08005ec0
 8000d7c:	40020400 	.word	0x40020400
 8000d80:	40020800 	.word	0x40020800
 8000d84:	08005ee8 	.word	0x08005ee8
 8000d88:	08005ef4 	.word	0x08005ef4
 8000d8c:	08005f40 	.word	0x08005f40
 8000d90:	08005f50 	.word	0x08005f50

08000d94 <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8000d98:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <Ringbuf_init+0x68>)
 8000d9a:	4a19      	ldr	r2, [pc, #100]	@ (8000e00 <Ringbuf_init+0x6c>)
 8000d9c:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 8000d9e:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <Ringbuf_init+0x70>)
 8000da0:	4a19      	ldr	r2, [pc, #100]	@ (8000e08 <Ringbuf_init+0x74>)
 8000da2:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8000da4:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <Ringbuf_init+0x78>)
 8000da6:	4a1a      	ldr	r2, [pc, #104]	@ (8000e10 <Ringbuf_init+0x7c>)
 8000da8:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8000daa:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <Ringbuf_init+0x80>)
 8000dac:	4a1a      	ldr	r2, [pc, #104]	@ (8000e18 <Ringbuf_init+0x84>)
 8000dae:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 8000db0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e1c <Ringbuf_init+0x88>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	695a      	ldr	r2, [r3, #20]
 8000db6:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <Ringbuf_init+0x88>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f042 0201 	orr.w	r2, r2, #1
 8000dbe:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 8000dc0:	4b17      	ldr	r3, [pc, #92]	@ (8000e20 <Ringbuf_init+0x8c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	695a      	ldr	r2, [r3, #20]
 8000dc6:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <Ringbuf_init+0x8c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f042 0201 	orr.w	r2, r2, #1
 8000dce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 8000dd0:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <Ringbuf_init+0x88>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	68da      	ldr	r2, [r3, #12]
 8000dd6:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <Ringbuf_init+0x88>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f042 0220 	orr.w	r2, r2, #32
 8000dde:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 8000de0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <Ringbuf_init+0x8c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	68da      	ldr	r2, [r3, #12]
 8000de6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <Ringbuf_init+0x8c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f042 0220 	orr.w	r2, r2, #32
 8000dee:	60da      	str	r2, [r3, #12]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	200028a8 	.word	0x200028a8
 8000e00:	20002788 	.word	0x20002788
 8000e04:	200028ac 	.word	0x200028ac
 8000e08:	200027d0 	.word	0x200027d0
 8000e0c:	200028b0 	.word	0x200028b0
 8000e10:	20002818 	.word	0x20002818
 8000e14:	200028b4 	.word	0x200028b4
 8000e18:	20002860 	.word	0x20002860
 8000e1c:	20002ae0 	.word	0x20002ae0
 8000e20:	20002b28 	.word	0x20002b28

08000e24 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e34:	3301      	adds	r3, #1
 8000e36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e3a:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d007      	beq.n	8000e56 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	683a      	ldr	r2, [r7, #0]
 8000e4c:	79f9      	ldrb	r1, [r7, #7]
 8000e4e:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <Look_for>:


int Look_for (char *str, char *buffertolookinto)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff f9bf 	bl	80001f0 <strlen>
 8000e72:	4603      	mov	r3, r0
 8000e74:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 8000e76:	6838      	ldr	r0, [r7, #0]
 8000e78:	f7ff f9ba 	bl	80001f0 <strlen>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 8000e88:	e002      	b.n	8000e90 <Look_for+0x2e>
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	781a      	ldrb	r2, [r3, #0]
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	6839      	ldr	r1, [r7, #0]
 8000e9c:	440b      	add	r3, r1
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d1f2      	bne.n	8000e8a <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx]){
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	6839      	ldr	r1, [r7, #0]
 8000eb0:	440b      	add	r3, r1
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d111      	bne.n	8000edc <Look_for+0x7a>
	while (str[so_far] == buffertolookinto[indx])
 8000eb8:	e005      	b.n	8000ec6 <Look_for+0x64>
	{
		so_far++;
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	617b      	str	r3, [r7, #20]
		indx++;
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	613b      	str	r3, [r7, #16]
	while (str[so_far] == buffertolookinto[indx])
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	4413      	add	r3, r2
 8000ecc:	781a      	ldrb	r2, [r3, #0]
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	6839      	ldr	r1, [r7, #0]
 8000ed2:	440b      	add	r3, r1
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d0ef      	beq.n	8000eba <Look_for+0x58>
 8000eda:	e008      	b.n	8000eee <Look_for+0x8c>
	}
	}

	else
		{
			so_far =0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
			if (indx >= bufferlength) return -1;
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	dbcf      	blt.n	8000e88 <Look_for+0x26>
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8000eec:	e007      	b.n	8000efe <Look_for+0x9c>
			goto repeat;
		}

	if (so_far == stringlength) return 1;
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d101      	bne.n	8000efa <Look_for+0x98>
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e001      	b.n	8000efe <Look_for+0x9c>
	else return -1;
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <Uart_peek>:
	}
}


int Uart_peek(UART_HandleTypeDef *uart)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a19      	ldr	r2, [pc, #100]	@ (8000f78 <Uart_peek+0x70>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d111      	bne.n	8000f3c <Uart_peek+0x34>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8000f18:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <Uart_peek+0x74>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f1e:	4b17      	ldr	r3, [pc, #92]	@ (8000f7c <Uart_peek+0x74>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d102      	bne.n	8000f2e <Uart_peek+0x26>
		  {
		    return -1;
 8000f28:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2c:	e01e      	b.n	8000f6c <Uart_peek+0x64>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 8000f2e:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <Uart_peek+0x74>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <Uart_peek+0x74>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f38:	5cd3      	ldrb	r3, [r2, r3]
 8000f3a:	e017      	b.n	8000f6c <Uart_peek+0x64>
		  }
	}

	else if (uart == pc_uart)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a10      	ldr	r2, [pc, #64]	@ (8000f80 <Uart_peek+0x78>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d111      	bne.n	8000f68 <Uart_peek+0x60>
	{
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8000f44:	4b0f      	ldr	r3, [pc, #60]	@ (8000f84 <Uart_peek+0x7c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <Uart_peek+0x7c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d102      	bne.n	8000f5a <Uart_peek+0x52>
		  {
		    return -1;
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
 8000f58:	e008      	b.n	8000f6c <Uart_peek+0x64>
		  }
		  else
		  {
		    return _rx_buffer2->buffer[_rx_buffer2->tail];
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <Uart_peek+0x7c>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <Uart_peek+0x7c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f64:	5cd3      	ldrb	r3, [r2, r3]
 8000f66:	e001      	b.n	8000f6c <Uart_peek+0x64>
		  }
	}

	return -1;
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	20002ae0 	.word	0x20002ae0
 8000f7c:	200028a8 	.word	0x200028a8
 8000f80:	20002b28 	.word	0x20002b28
 8000f84:	200028b0 	.word	0x200028b0

08000f88 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a24      	ldr	r2, [pc, #144]	@ (8001024 <Uart_read+0x9c>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d11c      	bne.n	8000fd2 <Uart_read+0x4a>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8000f98:	4b23      	ldr	r3, [pc, #140]	@ (8001028 <Uart_read+0xa0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f9e:	4b22      	ldr	r3, [pc, #136]	@ (8001028 <Uart_read+0xa0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d102      	bne.n	8000fae <Uart_read+0x26>
		  {
		    return -1;
 8000fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fac:	e034      	b.n	8001018 <Uart_read+0x90>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000fae:	4b1e      	ldr	r3, [pc, #120]	@ (8001028 <Uart_read+0xa0>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001028 <Uart_read+0xa0>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb8:	5cd3      	ldrb	r3, [r2, r3]
 8000fba:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001028 <Uart_read+0xa0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	4b18      	ldr	r3, [pc, #96]	@ (8001028 <Uart_read+0xa0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000fcc:	645a      	str	r2, [r3, #68]	@ 0x44
		    return c;
 8000fce:	7bbb      	ldrb	r3, [r7, #14]
 8000fd0:	e022      	b.n	8001018 <Uart_read+0x90>
		  }
	}

	else if (uart == pc_uart)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a15      	ldr	r2, [pc, #84]	@ (800102c <Uart_read+0xa4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d11c      	bne.n	8001014 <Uart_read+0x8c>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8000fda:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <Uart_read+0xa8>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fe0:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <Uart_read+0xa8>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d102      	bne.n	8000ff0 <Uart_read+0x68>
		  {
		    return -1;
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
 8000fee:	e013      	b.n	8001018 <Uart_read+0x90>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <Uart_read+0xa8>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <Uart_read+0xa8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffa:	5cd3      	ldrb	r3, [r2, r3]
 8000ffc:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <Uart_read+0xa8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <Uart_read+0xa8>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800100e:	645a      	str	r2, [r3, #68]	@ 0x44
		    return c;
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	e001      	b.n	8001018 <Uart_read+0x90>
		  }
	}

	else return -1;
 8001014:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001018:	4618      	mov	r0, r3
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	20002ae0 	.word	0x20002ae0
 8001028:	200028a8 	.word	0x200028a8
 800102c:	20002b28 	.word	0x20002b28
 8001030:	200028b0 	.word	0x200028b0

08001034 <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
	if (c>=0)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db4c      	blt.n	80010de <Uart_write+0xaa>
	{
		if (uart == device_uart){
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	4a29      	ldr	r2, [pc, #164]	@ (80010ec <Uart_write+0xb8>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d122      	bne.n	8001092 <Uart_write+0x5e>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 800104c:	4b28      	ldr	r3, [pc, #160]	@ (80010f0 <Uart_write+0xbc>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001052:	3301      	adds	r3, #1
 8001054:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001058:	60bb      	str	r3, [r7, #8]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 800105a:	bf00      	nop
 800105c:	4b24      	ldr	r3, [pc, #144]	@ (80010f0 <Uart_write+0xbc>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	429a      	cmp	r2, r3
 8001066:	d0f9      	beq.n	800105c <Uart_write+0x28>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8001068:	4b21      	ldr	r3, [pc, #132]	@ (80010f0 <Uart_write+0xbc>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b20      	ldr	r3, [pc, #128]	@ (80010f0 <Uart_write+0xbc>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	b2c9      	uxtb	r1, r1
 8001076:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 8001078:	4b1d      	ldr	r3, [pc, #116]	@ (80010f0 <Uart_write+0xbc>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68ba      	ldr	r2, [r7, #8]
 800107e:	641a      	str	r2, [r3, #64]	@ 0x40

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8001080:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <Uart_write+0xb8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	68da      	ldr	r2, [r3, #12]
 8001086:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <Uart_write+0xb8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800108e:	60da      	str	r2, [r3, #12]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 8001090:	e025      	b.n	80010de <Uart_write+0xaa>
		else if (uart == pc_uart){
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	4a17      	ldr	r2, [pc, #92]	@ (80010f4 <Uart_write+0xc0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d121      	bne.n	80010de <Uart_write+0xaa>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 800109a:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <Uart_write+0xc4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a0:	3301      	adds	r3, #1
 80010a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010a6:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 80010a8:	bf00      	nop
 80010aa:	4b13      	ldr	r3, [pc, #76]	@ (80010f8 <Uart_write+0xc4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d0f9      	beq.n	80010aa <Uart_write+0x76>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 80010b6:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <Uart_write+0xc4>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <Uart_write+0xc4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c0:	6879      	ldr	r1, [r7, #4]
 80010c2:	b2c9      	uxtb	r1, r1
 80010c4:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 80010c6:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <Uart_write+0xc4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	641a      	str	r2, [r3, #64]	@ 0x40
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <Uart_write+0xc0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <Uart_write+0xc0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010dc:	60da      	str	r2, [r3, #12]
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20002ae0 	.word	0x20002ae0
 80010f0:	200028ac 	.word	0x200028ac
 80010f4:	20002b28 	.word	0x20002b28
 80010f8:	200028b4 	.word	0x200028b4

080010fc <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a16      	ldr	r2, [pc, #88]	@ (8001160 <IsDataAvailable+0x64>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d10e      	bne.n	800112a <IsDataAvailable+0x2e>
 800110c:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <IsDataAvailable+0x68>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	b29a      	uxth	r2, r3
 8001114:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <IsDataAvailable+0x68>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111a:	b29b      	uxth	r3, r3
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	b29b      	uxth	r3, r3
 8001120:	3340      	adds	r3, #64	@ 0x40
 8001122:	b29b      	uxth	r3, r3
 8001124:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001128:	e014      	b.n	8001154 <IsDataAvailable+0x58>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a0e      	ldr	r2, [pc, #56]	@ (8001168 <IsDataAvailable+0x6c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d10e      	bne.n	8001150 <IsDataAvailable+0x54>
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <IsDataAvailable+0x70>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001138:	b29a      	uxth	r2, r3
 800113a:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <IsDataAvailable+0x70>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001140:	b29b      	uxth	r3, r3
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	b29b      	uxth	r3, r3
 8001146:	3340      	adds	r3, #64	@ 0x40
 8001148:	b29b      	uxth	r3, r3
 800114a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800114e:	e001      	b.n	8001154 <IsDataAvailable+0x58>
	return -1;
 8001150:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	20002ae0 	.word	0x20002ae0
 8001164:	200028a8 	.word	0x200028a8
 8001168:	20002b28 	.word	0x20002b28
 800116c:	200028b0 	.word	0x200028b0

08001170 <Get_after>:



int Get_after (char *string, uint8_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	607a      	str	r2, [r7, #4]
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	460b      	mov	r3, r1
 800117e:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string, uart) != 1);
 8001180:	bf00      	nop
 8001182:	6839      	ldr	r1, [r7, #0]
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f000 f8b3 	bl	80012f0 <Wait_for>
 800118a:	4603      	mov	r3, r0
 800118c:	2b01      	cmp	r3, #1
 800118e:	d1f8      	bne.n	8001182 <Get_after+0x12>
	for (int indx=0; indx<numberofchars; indx++)
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	e012      	b.n	80011bc <Get_after+0x4c>
	{
		while (!(IsDataAvailable(uart)));
 8001196:	bf00      	nop
 8001198:	6838      	ldr	r0, [r7, #0]
 800119a:	f7ff ffaf 	bl	80010fc <IsDataAvailable>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0f9      	beq.n	8001198 <Get_after+0x28>
		buffertosave[indx] = Uart_read(uart);
 80011a4:	6838      	ldr	r0, [r7, #0]
 80011a6:	f7ff feef 	bl	8000f88 <Uart_read>
 80011aa:	4601      	mov	r1, r0
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	b2ca      	uxtb	r2, r1
 80011b4:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	3301      	adds	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	7afb      	ldrb	r3, [r7, #11]
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dbe8      	blt.n	8001196 <Get_after+0x26>
	}
	return 1;
 80011c4:	2301      	movs	r3, #1
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <Uart_sendstring>:

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 80011d8:	e007      	b.n	80011ea <Uart_sendstring+0x1c>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	1c5a      	adds	r2, r3, #1
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	6839      	ldr	r1, [r7, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff25 	bl	8001034 <Uart_write>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f3      	bne.n	80011da <Uart_sendstring+0xc>
}
 80011f2:	bf00      	nop
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <Copy_upto>:
  while(*s) Uart_write(*s++, uart);
}


int Copy_upto (char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f7fe ffef 	bl	80001f0 <strlen>
 8001212:	4603      	mov	r3, r0
 8001214:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]

again:
	while (!IsDataAvailable(uart));
 800121a:	bf00      	nop
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff6d 	bl	80010fc <IsDataAvailable>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0f9      	beq.n	800121c <Copy_upto+0x20>
	while (Uart_peek(uart) != string[so_far])
 8001228:	e01c      	b.n	8001264 <Copy_upto+0x68>
		{
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 800122a:	4b30      	ldr	r3, [pc, #192]	@ (80012ec <Copy_upto+0xf0>)
 800122c:	6819      	ldr	r1, [r3, #0]
 800122e:	4b2f      	ldr	r3, [pc, #188]	@ (80012ec <Copy_upto+0xf0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	68b8      	ldr	r0, [r7, #8]
 8001238:	4403      	add	r3, r0
 800123a:	5c8a      	ldrb	r2, [r1, r2]
 800123c:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 800123e:	4b2b      	ldr	r3, [pc, #172]	@ (80012ec <Copy_upto+0xf0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	4b29      	ldr	r3, [pc, #164]	@ (80012ec <Copy_upto+0xf0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800124e:	645a      	str	r2, [r3, #68]	@ 0x44
			indx++;
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	3301      	adds	r3, #1
 8001254:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart));
 8001256:	bf00      	nop
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff4f 	bl	80010fc <IsDataAvailable>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0f9      	beq.n	8001258 <Copy_upto+0x5c>
	while (Uart_peek(uart) != string[so_far])
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff fe4f 	bl	8000f08 <Uart_peek>
 800126a:	4601      	mov	r1, r0
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	4413      	add	r3, r2
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4299      	cmp	r1, r3
 8001276:	d1d8      	bne.n	800122a <Copy_upto+0x2e>

		}
	while (Uart_peek(uart) == string [so_far])
 8001278:	e01b      	b.n	80012b2 <Copy_upto+0xb6>
	{
		so_far++;
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3301      	adds	r3, #1
 800127e:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff fe81 	bl	8000f88 <Uart_read>
 8001286:	4601      	mov	r1, r0
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	61ba      	str	r2, [r7, #24]
 800128e:	461a      	mov	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	4413      	add	r3, r2
 8001294:	b2ca      	uxtb	r2, r1
 8001296:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001298:	69fa      	ldr	r2, [r7, #28]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	429a      	cmp	r2, r3
 800129e:	d101      	bne.n	80012a4 <Copy_upto+0xa8>
 80012a0:	2301      	movs	r3, #1
 80012a2:	e01f      	b.n	80012e4 <Copy_upto+0xe8>
		while (!IsDataAvailable(uart));
 80012a4:	bf00      	nop
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ff28 	bl	80010fc <IsDataAvailable>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f9      	beq.n	80012a6 <Copy_upto+0xaa>
	while (Uart_peek(uart) == string [so_far])
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff fe28 	bl	8000f08 <Uart_peek>
 80012b8:	4601      	mov	r1, r0
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	4299      	cmp	r1, r3
 80012c4:	d0d9      	beq.n	800127a <Copy_upto+0x7e>
	}

	if (so_far != len)
 80012c6:	69fa      	ldr	r2, [r7, #28]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d002      	beq.n	80012d4 <Copy_upto+0xd8>
	{
		so_far = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
		goto again;
 80012d2:	e7a2      	b.n	800121a <Copy_upto+0x1e>
	}

	if (so_far == len) return 1;
 80012d4:	69fa      	ldr	r2, [r7, #28]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d101      	bne.n	80012e0 <Copy_upto+0xe4>
 80012dc:	2301      	movs	r3, #1
 80012de:	e001      	b.n	80012e4 <Copy_upto+0xe8>
	else return -1;
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295

}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3720      	adds	r7, #32
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200028a8 	.word	0x200028a8

080012f0 <Wait_for>:

int Wait_for (char *string, UART_HandleTypeDef *uart)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
	int so_far =0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7fe ff76 	bl	80001f0 <strlen>
 8001304:	4603      	mov	r3, r0
 8001306:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable(uart));
 8001308:	bf00      	nop
 800130a:	6838      	ldr	r0, [r7, #0]
 800130c:	f7ff fef6 	bl	80010fc <IsDataAvailable>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f9      	beq.n	800130a <Wait_for+0x1a>
	if (uart == device_uart)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	4a30      	ldr	r2, [pc, #192]	@ (80013dc <Wait_for+0xec>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d114      	bne.n	8001348 <Wait_for+0x58>
		while (Uart_peek(uart) != string[so_far]) _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 800131e:	e008      	b.n	8001332 <Wait_for+0x42>
 8001320:	4b2f      	ldr	r3, [pc, #188]	@ (80013e0 <Wait_for+0xf0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	4b2d      	ldr	r3, [pc, #180]	@ (80013e0 <Wait_for+0xf0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001330:	645a      	str	r2, [r3, #68]	@ 0x44
 8001332:	6838      	ldr	r0, [r7, #0]
 8001334:	f7ff fde8 	bl	8000f08 <Uart_peek>
 8001338:	4601      	mov	r1, r0
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	4413      	add	r3, r2
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	4299      	cmp	r1, r3
 8001344:	d1ec      	bne.n	8001320 <Wait_for+0x30>
 8001346:	e02b      	b.n	80013a0 <Wait_for+0xb0>
	else if (uart == pc_uart)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	4a26      	ldr	r2, [pc, #152]	@ (80013e4 <Wait_for+0xf4>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d127      	bne.n	80013a0 <Wait_for+0xb0>
		while (Uart_peek(uart) != string[so_far]) _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8001350:	e008      	b.n	8001364 <Wait_for+0x74>
 8001352:	4b25      	ldr	r3, [pc, #148]	@ (80013e8 <Wait_for+0xf8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001358:	1c5a      	adds	r2, r3, #1
 800135a:	4b23      	ldr	r3, [pc, #140]	@ (80013e8 <Wait_for+0xf8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001362:	645a      	str	r2, [r3, #68]	@ 0x44
 8001364:	6838      	ldr	r0, [r7, #0]
 8001366:	f7ff fdcf 	bl	8000f08 <Uart_peek>
 800136a:	4601      	mov	r1, r0
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4299      	cmp	r1, r3
 8001376:	d1ec      	bne.n	8001352 <Wait_for+0x62>
	while (Uart_peek(uart) == string [so_far])
 8001378:	e012      	b.n	80013a0 <Wait_for+0xb0>
	{
		so_far++;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	3301      	adds	r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 8001380:	6838      	ldr	r0, [r7, #0]
 8001382:	f7ff fe01 	bl	8000f88 <Uart_read>
		if (so_far == len) return 1;
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	429a      	cmp	r2, r3
 800138c:	d101      	bne.n	8001392 <Wait_for+0xa2>
 800138e:	2301      	movs	r3, #1
 8001390:	e01f      	b.n	80013d2 <Wait_for+0xe2>
		while (!IsDataAvailable(uart));
 8001392:	bf00      	nop
 8001394:	6838      	ldr	r0, [r7, #0]
 8001396:	f7ff feb1 	bl	80010fc <IsDataAvailable>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f9      	beq.n	8001394 <Wait_for+0xa4>
	while (Uart_peek(uart) == string [so_far])
 80013a0:	6838      	ldr	r0, [r7, #0]
 80013a2:	f7ff fdb1 	bl	8000f08 <Uart_peek>
 80013a6:	4601      	mov	r1, r0
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4299      	cmp	r1, r3
 80013b2:	d0e2      	beq.n	800137a <Wait_for+0x8a>
	}

	if (so_far != len)
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d002      	beq.n	80013c2 <Wait_for+0xd2>
	{
		so_far = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
		goto again;
 80013c0:	e7a2      	b.n	8001308 <Wait_for+0x18>
	}

	if (so_far == len) return 1;
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d101      	bne.n	80013ce <Wait_for+0xde>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e001      	b.n	80013d2 <Wait_for+0xe2>
	else return -1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20002ae0 	.word	0x20002ae0
 80013e0:	200028a8 	.word	0x200028a8
 80013e4:	20002b28 	.word	0x20002b28
 80013e8:	200028b0 	.word	0x200028b0

080013ec <Uart_isr>:


void Uart_isr (UART_HandleTypeDef *huart)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f003 0320 	and.w	r3, r3, #32
 800140a:	2b00      	cmp	r3, #0
 800140c:	d023      	beq.n	8001456 <Uart_isr+0x6a>
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	f003 0320 	and.w	r3, r3, #32
 8001414:	2b00      	cmp	r3, #0
 8001416:	d01e      	beq.n	8001456 <Uart_isr+0x6a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a3a      	ldr	r2, [pc, #232]	@ (8001514 <Uart_isr+0x128>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d107      	bne.n	800143e <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 800142e:	4b3a      	ldr	r3, [pc, #232]	@ (8001518 <Uart_isr+0x12c>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fcf4 	bl	8000e24 <store_char>
        else if (huart == pc_uart)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 800143c:	e063      	b.n	8001506 <Uart_isr+0x11a>
        else if (huart == pc_uart)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a36      	ldr	r2, [pc, #216]	@ (800151c <Uart_isr+0x130>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d15f      	bne.n	8001506 <Uart_isr+0x11a>
           	store_char (c, _rx_buffer2);  // store data in buffer
 8001446:	4b36      	ldr	r3, [pc, #216]	@ (8001520 <Uart_isr+0x134>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	4611      	mov	r1, r2
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fce8 	bl	8000e24 <store_char>
        return;
 8001454:	e057      	b.n	8001506 <Uart_isr+0x11a>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800145c:	2b00      	cmp	r3, #0
 800145e:	d055      	beq.n	800150c <Uart_isr+0x120>
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001466:	2b00      	cmp	r3, #0
 8001468:	d050      	beq.n	800150c <Uart_isr+0x120>
    {
    	if (huart == device_uart){
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a29      	ldr	r2, [pc, #164]	@ (8001514 <Uart_isr+0x128>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d122      	bne.n	80014b8 <Uart_isr+0xcc>
    	if(tx_buffer1.head == tx_buffer1.tail)
 8001472:	4b2c      	ldr	r3, [pc, #176]	@ (8001524 <Uart_isr+0x138>)
 8001474:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001476:	4b2b      	ldr	r3, [pc, #172]	@ (8001524 <Uart_isr+0x138>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	429a      	cmp	r2, r3
 800147c:	d108      	bne.n	8001490 <Uart_isr+0xa4>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800148c:	60da      	str	r2, [r3, #12]
        	      huart->Instance->SR;
        	      huart->Instance->DR = c;

        	    }
        	}
    	return;
 800148e:	e03c      	b.n	800150a <Uart_isr+0x11e>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8001490:	4b24      	ldr	r3, [pc, #144]	@ (8001524 <Uart_isr+0x138>)
 8001492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001494:	4a23      	ldr	r2, [pc, #140]	@ (8001524 <Uart_isr+0x138>)
 8001496:	5cd3      	ldrb	r3, [r2, r3]
 8001498:	737b      	strb	r3, [r7, #13]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 800149a:	4b22      	ldr	r3, [pc, #136]	@ (8001524 <Uart_isr+0x138>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149e:	3301      	adds	r3, #1
 80014a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001524 <Uart_isr+0x138>)
 80014a6:	6453      	str	r3, [r2, #68]	@ 0x44
    	      huart->Instance->SR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	7b7a      	ldrb	r2, [r7, #13]
 80014b4:	605a      	str	r2, [r3, #4]
    	return;
 80014b6:	e028      	b.n	800150a <Uart_isr+0x11e>
    	else if (huart == pc_uart){
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a18      	ldr	r2, [pc, #96]	@ (800151c <Uart_isr+0x130>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d124      	bne.n	800150a <Uart_isr+0x11e>
        	if(tx_buffer2.head == tx_buffer2.tail)
 80014c0:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <Uart_isr+0x13c>)
 80014c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014c4:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <Uart_isr+0x13c>)
 80014c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d108      	bne.n	80014de <Uart_isr+0xf2>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014da:	60da      	str	r2, [r3, #12]
    	return;
 80014dc:	e015      	b.n	800150a <Uart_isr+0x11e>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 80014de:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <Uart_isr+0x13c>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e2:	4a11      	ldr	r2, [pc, #68]	@ (8001528 <Uart_isr+0x13c>)
 80014e4:	5cd3      	ldrb	r3, [r2, r3]
 80014e6:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <Uart_isr+0x13c>)
 80014ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ec:	3301      	adds	r3, #1
 80014ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001528 <Uart_isr+0x13c>)
 80014f4:	6453      	str	r3, [r2, #68]	@ 0x44
        	      huart->Instance->SR;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	7bba      	ldrb	r2, [r7, #14]
 8001502:	605a      	str	r2, [r3, #4]
    	return;
 8001504:	e001      	b.n	800150a <Uart_isr+0x11e>
        return;
 8001506:	bf00      	nop
 8001508:	e000      	b.n	800150c <Uart_isr+0x120>
    	return;
 800150a:	bf00      	nop
    }
}
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20002ae0 	.word	0x20002ae0
 8001518:	200028a8 	.word	0x200028a8
 800151c:	20002b28 	.word	0x20002b28
 8001520:	200028b0 	.word	0x200028b0
 8001524:	200027d0 	.word	0x200027d0
 8001528:	20002860 	.word	0x20002860

0800152c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b0c0      	sub	sp, #256	@ 0x100
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001532:	f000 fd15 	bl	8001f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001536:	f000 f84d 	bl	80015d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153a:	f000 f987 	bl	800184c <MX_GPIO_Init>
  MX_ETH_Init();
 800153e:	f000 f8b5 	bl	80016ac <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001542:	f000 f92b 	bl	800179c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001546:	f000 f953 	bl	80017f0 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 800154a:	f000 f8fd 	bl	8001748 <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */

  uint8_t buffer[256];
  sprintf((char *)buffer, "\n\r\n\r=====================================\n\r");
 800154e:	463b      	mov	r3, r7
 8001550:	491a      	ldr	r1, [pc, #104]	@ (80015bc <main+0x90>)
 8001552:	4618      	mov	r0, r3
 8001554:	f003 fd6a 	bl	800502c <siprintf>
  HAL_UART_Transmit(&huart3, buffer, strlen((char *)buffer), 100);
 8001558:	463b      	mov	r3, r7
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe fe48 	bl	80001f0 <strlen>
 8001560:	4603      	mov	r3, r0
 8001562:	b29a      	uxth	r2, r3
 8001564:	4639      	mov	r1, r7
 8001566:	2364      	movs	r3, #100	@ 0x64
 8001568:	4815      	ldr	r0, [pc, #84]	@ (80015c0 <main+0x94>)
 800156a:	f002 fa17 	bl	800399c <HAL_UART_Transmit>

  sprintf((char *)buffer, "[와이파이 연결을 시작합니다]\n\r");
 800156e:	463b      	mov	r3, r7
 8001570:	4914      	ldr	r1, [pc, #80]	@ (80015c4 <main+0x98>)
 8001572:	4618      	mov	r0, r3
 8001574:	f003 fd5a 	bl	800502c <siprintf>
  HAL_UART_Transmit(&huart3, buffer, strlen((char *)buffer), 100);
 8001578:	463b      	mov	r3, r7
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe fe38 	bl	80001f0 <strlen>
 8001580:	4603      	mov	r3, r0
 8001582:	b29a      	uxth	r2, r3
 8001584:	4639      	mov	r1, r7
 8001586:	2364      	movs	r3, #100	@ 0x64
 8001588:	480d      	ldr	r0, [pc, #52]	@ (80015c0 <main+0x94>)
 800158a:	f002 fa07 	bl	800399c <HAL_UART_Transmit>

//  ESP_Init("your-wifi-ssid", "your-wifi-pw");
  ESP_Init("Hyeon Joon iPhone ", "qwertyui");
 800158e:	490e      	ldr	r1, [pc, #56]	@ (80015c8 <main+0x9c>)
 8001590:	480e      	ldr	r0, [pc, #56]	@ (80015cc <main+0xa0>)
 8001592:	f7ff f809 	bl	80005a8 <ESP_Init>


  sprintf((char *)buffer, "\n\r[연결 완료]\n\r");
 8001596:	463b      	mov	r3, r7
 8001598:	490d      	ldr	r1, [pc, #52]	@ (80015d0 <main+0xa4>)
 800159a:	4618      	mov	r0, r3
 800159c:	f003 fd46 	bl	800502c <siprintf>
  HAL_UART_Transmit(&huart3, buffer, strlen((char *)buffer), 100);
 80015a0:	463b      	mov	r3, r7
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe fe24 	bl	80001f0 <strlen>
 80015a8:	4603      	mov	r3, r0
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	4639      	mov	r1, r7
 80015ae:	2364      	movs	r3, #100	@ 0x64
 80015b0:	4803      	ldr	r0, [pc, #12]	@ (80015c0 <main+0x94>)
 80015b2:	f002 f9f3 	bl	800399c <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Server_Start();
 80015b6:	f7ff fa77 	bl	8000aa8 <Server_Start>
 80015ba:	e7fc      	b.n	80015b6 <main+0x8a>
 80015bc:	08005f74 	.word	0x08005f74
 80015c0:	20002b28 	.word	0x20002b28
 80015c4:	08005fa0 	.word	0x08005fa0
 80015c8:	08005fcc 	.word	0x08005fcc
 80015cc:	08005fd8 	.word	0x08005fd8
 80015d0:	08005fec 	.word	0x08005fec

080015d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b094      	sub	sp, #80	@ 0x50
 80015d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015da:	f107 0320 	add.w	r3, r7, #32
 80015de:	2230      	movs	r2, #48	@ 0x30
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f003 fd42 	bl	800506c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	4b29      	ldr	r3, [pc, #164]	@ (80016a4 <SystemClock_Config+0xd0>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001600:	4a28      	ldr	r2, [pc, #160]	@ (80016a4 <SystemClock_Config+0xd0>)
 8001602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001606:	6413      	str	r3, [r2, #64]	@ 0x40
 8001608:	4b26      	ldr	r3, [pc, #152]	@ (80016a4 <SystemClock_Config+0xd0>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001614:	2300      	movs	r3, #0
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	4b23      	ldr	r3, [pc, #140]	@ (80016a8 <SystemClock_Config+0xd4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001620:	4a21      	ldr	r2, [pc, #132]	@ (80016a8 <SystemClock_Config+0xd4>)
 8001622:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <SystemClock_Config+0xd4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001634:	2301      	movs	r3, #1
 8001636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001638:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800163c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800163e:	2302      	movs	r3, #2
 8001640:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001642:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001648:	2304      	movs	r3, #4
 800164a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800164c:	2360      	movs	r3, #96	@ 0x60
 800164e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001650:	2302      	movs	r3, #2
 8001652:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001654:	2304      	movs	r3, #4
 8001656:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001658:	f107 0320 	add.w	r3, r7, #32
 800165c:	4618      	mov	r0, r3
 800165e:	f001 fcb5 	bl	8002fcc <HAL_RCC_OscConfig>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001668:	f000 f9c6 	bl	80019f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800166c:	230f      	movs	r3, #15
 800166e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001670:	2302      	movs	r3, #2
 8001672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001674:	2380      	movs	r3, #128	@ 0x80
 8001676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001678:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800167c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800167e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001682:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	2101      	movs	r1, #1
 800168a:	4618      	mov	r0, r3
 800168c:	f001 ff16 	bl	80034bc <HAL_RCC_ClockConfig>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001696:	f000 f9af 	bl	80019f8 <Error_Handler>
  }
}
 800169a:	bf00      	nop
 800169c:	3750      	adds	r7, #80	@ 0x50
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40007000 	.word	0x40007000

080016ac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80016b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001730 <MX_ETH_Init+0x84>)
 80016b2:	4a20      	ldr	r2, [pc, #128]	@ (8001734 <MX_ETH_Init+0x88>)
 80016b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80016b6:	4b20      	ldr	r3, [pc, #128]	@ (8001738 <MX_ETH_Init+0x8c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80016bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001738 <MX_ETH_Init+0x8c>)
 80016be:	2280      	movs	r2, #128	@ 0x80
 80016c0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80016c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001738 <MX_ETH_Init+0x8c>)
 80016c4:	22e1      	movs	r2, #225	@ 0xe1
 80016c6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <MX_ETH_Init+0x8c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80016ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001738 <MX_ETH_Init+0x8c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80016d4:	4b18      	ldr	r3, [pc, #96]	@ (8001738 <MX_ETH_Init+0x8c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80016da:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <MX_ETH_Init+0x84>)
 80016dc:	4a16      	ldr	r2, [pc, #88]	@ (8001738 <MX_ETH_Init+0x8c>)
 80016de:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80016e0:	4b13      	ldr	r3, [pc, #76]	@ (8001730 <MX_ETH_Init+0x84>)
 80016e2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80016e6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80016e8:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <MX_ETH_Init+0x84>)
 80016ea:	4a14      	ldr	r2, [pc, #80]	@ (800173c <MX_ETH_Init+0x90>)
 80016ec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80016ee:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <MX_ETH_Init+0x84>)
 80016f0:	4a13      	ldr	r2, [pc, #76]	@ (8001740 <MX_ETH_Init+0x94>)
 80016f2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80016f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <MX_ETH_Init+0x84>)
 80016f6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80016fa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80016fc:	480c      	ldr	r0, [pc, #48]	@ (8001730 <MX_ETH_Init+0x84>)
 80016fe:	f000 fe69 	bl	80023d4 <HAL_ETH_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001708:	f000 f976 	bl	80019f8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800170c:	2238      	movs	r2, #56	@ 0x38
 800170e:	2100      	movs	r1, #0
 8001710:	480c      	ldr	r0, [pc, #48]	@ (8001744 <MX_ETH_Init+0x98>)
 8001712:	f003 fcab 	bl	800506c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001716:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <MX_ETH_Init+0x98>)
 8001718:	2221      	movs	r2, #33	@ 0x21
 800171a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800171c:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <MX_ETH_Init+0x98>)
 800171e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001722:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001724:	4b07      	ldr	r3, [pc, #28]	@ (8001744 <MX_ETH_Init+0x98>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20002a30 	.word	0x20002a30
 8001734:	40028000 	.word	0x40028000
 8001738:	20003054 	.word	0x20003054
 800173c:	20002990 	.word	0x20002990
 8001740:	200028f0 	.word	0x200028f0
 8001744:	200028b8 	.word	0x200028b8

08001748 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <MX_USART2_UART_Init+0x4c>)
 800174e:	4a12      	ldr	r2, [pc, #72]	@ (8001798 <MX_USART2_UART_Init+0x50>)
 8001750:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001752:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <MX_USART2_UART_Init+0x4c>)
 8001754:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001758:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800175a:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <MX_USART2_UART_Init+0x4c>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001760:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <MX_USART2_UART_Init+0x4c>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001766:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <MX_USART2_UART_Init+0x4c>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800176c:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <MX_USART2_UART_Init+0x4c>)
 800176e:	220c      	movs	r2, #12
 8001770:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001772:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <MX_USART2_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <MX_USART2_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800177e:	4805      	ldr	r0, [pc, #20]	@ (8001794 <MX_USART2_UART_Init+0x4c>)
 8001780:	f002 f8bc 	bl	80038fc <HAL_UART_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800178a:	f000 f935 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20002ae0 	.word	0x20002ae0
 8001798:	40004400 	.word	0x40004400

0800179c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017a0:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <MX_USART3_UART_Init+0x4c>)
 80017a2:	4a12      	ldr	r2, [pc, #72]	@ (80017ec <MX_USART3_UART_Init+0x50>)
 80017a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 56000;
 80017a6:	4b10      	ldr	r3, [pc, #64]	@ (80017e8 <MX_USART3_UART_Init+0x4c>)
 80017a8:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 80017ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <MX_USART3_UART_Init+0x4c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <MX_USART3_UART_Init+0x4c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017ba:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <MX_USART3_UART_Init+0x4c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017c0:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <MX_USART3_UART_Init+0x4c>)
 80017c2:	220c      	movs	r2, #12
 80017c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c6:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <MX_USART3_UART_Init+0x4c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <MX_USART3_UART_Init+0x4c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017d2:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <MX_USART3_UART_Init+0x4c>)
 80017d4:	f002 f892 	bl	80038fc <HAL_UART_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017de:	f000 f90b 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20002b28 	.word	0x20002b28
 80017ec:	40004800 	.word	0x40004800

080017f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80017f4:	4b14      	ldr	r3, [pc, #80]	@ (8001848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80017fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80017fc:	4b12      	ldr	r3, [pc, #72]	@ (8001848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017fe:	2204      	movs	r2, #4
 8001800:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001802:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001804:	2202      	movs	r2, #2
 8001806:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001808:	4b0f      	ldr	r3, [pc, #60]	@ (8001848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800180a:	2200      	movs	r2, #0
 800180c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800180e:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001810:	2202      	movs	r2, #2
 8001812:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001814:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001816:	2201      	movs	r2, #1
 8001818:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800181a:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800181c:	2200      	movs	r2, #0
 800181e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001820:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001822:	2200      	movs	r2, #0
 8001824:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001826:	4b08      	ldr	r3, [pc, #32]	@ (8001848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001828:	2201      	movs	r2, #1
 800182a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800182c:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800182e:	2200      	movs	r2, #0
 8001830:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001832:	4805      	ldr	r0, [pc, #20]	@ (8001848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001834:	f001 fabb 	bl	8002dae <HAL_PCD_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800183e:	f000 f8db 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20002b70 	.word	0x20002b70

0800184c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08c      	sub	sp, #48	@ 0x30
 8001850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001852:	f107 031c 	add.w	r3, r7, #28
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
 8001866:	4b5f      	ldr	r3, [pc, #380]	@ (80019e4 <MX_GPIO_Init+0x198>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	4a5e      	ldr	r2, [pc, #376]	@ (80019e4 <MX_GPIO_Init+0x198>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	6313      	str	r3, [r2, #48]	@ 0x30
 8001872:	4b5c      	ldr	r3, [pc, #368]	@ (80019e4 <MX_GPIO_Init+0x198>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	61bb      	str	r3, [r7, #24]
 800187c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	4b58      	ldr	r3, [pc, #352]	@ (80019e4 <MX_GPIO_Init+0x198>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	4a57      	ldr	r2, [pc, #348]	@ (80019e4 <MX_GPIO_Init+0x198>)
 8001888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800188c:	6313      	str	r3, [r2, #48]	@ 0x30
 800188e:	4b55      	ldr	r3, [pc, #340]	@ (80019e4 <MX_GPIO_Init+0x198>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	4b51      	ldr	r3, [pc, #324]	@ (80019e4 <MX_GPIO_Init+0x198>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	4a50      	ldr	r2, [pc, #320]	@ (80019e4 <MX_GPIO_Init+0x198>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018aa:	4b4e      	ldr	r3, [pc, #312]	@ (80019e4 <MX_GPIO_Init+0x198>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b4a      	ldr	r3, [pc, #296]	@ (80019e4 <MX_GPIO_Init+0x198>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	4a49      	ldr	r2, [pc, #292]	@ (80019e4 <MX_GPIO_Init+0x198>)
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c6:	4b47      	ldr	r3, [pc, #284]	@ (80019e4 <MX_GPIO_Init+0x198>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	4b43      	ldr	r3, [pc, #268]	@ (80019e4 <MX_GPIO_Init+0x198>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	4a42      	ldr	r2, [pc, #264]	@ (80019e4 <MX_GPIO_Init+0x198>)
 80018dc:	f043 0308 	orr.w	r3, r3, #8
 80018e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e2:	4b40      	ldr	r3, [pc, #256]	@ (80019e4 <MX_GPIO_Init+0x198>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	4b3c      	ldr	r3, [pc, #240]	@ (80019e4 <MX_GPIO_Init+0x198>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	4a3b      	ldr	r2, [pc, #236]	@ (80019e4 <MX_GPIO_Init+0x198>)
 80018f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fe:	4b39      	ldr	r3, [pc, #228]	@ (80019e4 <MX_GPIO_Init+0x198>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	2104      	movs	r1, #4
 800190e:	4836      	ldr	r0, [pc, #216]	@ (80019e8 <MX_GPIO_Init+0x19c>)
 8001910:	f001 fa34 	bl	8002d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001914:	2200      	movs	r2, #0
 8001916:	f244 0181 	movw	r1, #16513	@ 0x4081
 800191a:	4834      	ldr	r0, [pc, #208]	@ (80019ec <MX_GPIO_Init+0x1a0>)
 800191c:	f001 fa2e 	bl	8002d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	2140      	movs	r1, #64	@ 0x40
 8001924:	4832      	ldr	r0, [pc, #200]	@ (80019f0 <MX_GPIO_Init+0x1a4>)
 8001926:	f001 fa29 	bl	8002d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	21d0      	movs	r1, #208	@ 0xd0
 800192e:	4831      	ldr	r0, [pc, #196]	@ (80019f4 <MX_GPIO_Init+0x1a8>)
 8001930:	f001 fa24 	bl	8002d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001934:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800193a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800193e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001944:	f107 031c 	add.w	r3, r7, #28
 8001948:	4619      	mov	r1, r3
 800194a:	4827      	ldr	r0, [pc, #156]	@ (80019e8 <MX_GPIO_Init+0x19c>)
 800194c:	f001 f86a 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001950:	2304      	movs	r3, #4
 8001952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001954:	2301      	movs	r3, #1
 8001956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4619      	mov	r1, r3
 8001966:	4820      	ldr	r0, [pc, #128]	@ (80019e8 <MX_GPIO_Init+0x19c>)
 8001968:	f001 f85c 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800196c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001972:	2301      	movs	r3, #1
 8001974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	2300      	movs	r3, #0
 800197c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197e:	f107 031c 	add.w	r3, r7, #28
 8001982:	4619      	mov	r1, r3
 8001984:	4819      	ldr	r0, [pc, #100]	@ (80019ec <MX_GPIO_Init+0x1a0>)
 8001986:	f001 f84d 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800198a:	2340      	movs	r3, #64	@ 0x40
 800198c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198e:	2301      	movs	r3, #1
 8001990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	4619      	mov	r1, r3
 80019a0:	4813      	ldr	r0, [pc, #76]	@ (80019f0 <MX_GPIO_Init+0x1a4>)
 80019a2:	f001 f83f 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80019a6:	2380      	movs	r3, #128	@ 0x80
 80019a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019b2:	f107 031c 	add.w	r3, r7, #28
 80019b6:	4619      	mov	r1, r3
 80019b8:	480d      	ldr	r0, [pc, #52]	@ (80019f0 <MX_GPIO_Init+0x1a4>)
 80019ba:	f001 f833 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 80019be:	23d0      	movs	r3, #208	@ 0xd0
 80019c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c2:	2301      	movs	r3, #1
 80019c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	4619      	mov	r1, r3
 80019d4:	4807      	ldr	r0, [pc, #28]	@ (80019f4 <MX_GPIO_Init+0x1a8>)
 80019d6:	f001 f825 	bl	8002a24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019da:	bf00      	nop
 80019dc:	3730      	adds	r7, #48	@ 0x30
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40020800 	.word	0x40020800
 80019ec:	40020400 	.word	0x40020400
 80019f0:	40021800 	.word	0x40021800
 80019f4:	40020c00 	.word	0x40020c00

080019f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019fc:	b672      	cpsid	i
}
 80019fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <Error_Handler+0x8>

08001a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <HAL_MspInit+0x4c>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	4a0f      	ldr	r2, [pc, #60]	@ (8001a50 <HAL_MspInit+0x4c>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a50 <HAL_MspInit+0x4c>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <HAL_MspInit+0x4c>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	4a08      	ldr	r2, [pc, #32]	@ (8001a50 <HAL_MspInit+0x4c>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a36:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <HAL_MspInit+0x4c>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800

08001a54 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08e      	sub	sp, #56	@ 0x38
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a55      	ldr	r2, [pc, #340]	@ (8001bc8 <HAL_ETH_MspInit+0x174>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	f040 80a4 	bne.w	8001bc0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001a78:	2300      	movs	r3, #0
 8001a7a:	623b      	str	r3, [r7, #32]
 8001a7c:	4b53      	ldr	r3, [pc, #332]	@ (8001bcc <HAL_ETH_MspInit+0x178>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a80:	4a52      	ldr	r2, [pc, #328]	@ (8001bcc <HAL_ETH_MspInit+0x178>)
 8001a82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a86:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a88:	4b50      	ldr	r3, [pc, #320]	@ (8001bcc <HAL_ETH_MspInit+0x178>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a90:	623b      	str	r3, [r7, #32]
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
 8001a98:	4b4c      	ldr	r3, [pc, #304]	@ (8001bcc <HAL_ETH_MspInit+0x178>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9c:	4a4b      	ldr	r2, [pc, #300]	@ (8001bcc <HAL_ETH_MspInit+0x178>)
 8001a9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001aa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa4:	4b49      	ldr	r3, [pc, #292]	@ (8001bcc <HAL_ETH_MspInit+0x178>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61bb      	str	r3, [r7, #24]
 8001ab4:	4b45      	ldr	r3, [pc, #276]	@ (8001bcc <HAL_ETH_MspInit+0x178>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab8:	4a44      	ldr	r2, [pc, #272]	@ (8001bcc <HAL_ETH_MspInit+0x178>)
 8001aba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001abe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac0:	4b42      	ldr	r3, [pc, #264]	@ (8001bcc <HAL_ETH_MspInit+0x178>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ac8:	61bb      	str	r3, [r7, #24]
 8001aca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	4b3e      	ldr	r3, [pc, #248]	@ (8001bcc <HAL_ETH_MspInit+0x178>)
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad4:	4a3d      	ldr	r2, [pc, #244]	@ (8001bcc <HAL_ETH_MspInit+0x178>)
 8001ad6:	f043 0304 	orr.w	r3, r3, #4
 8001ada:	6313      	str	r3, [r2, #48]	@ 0x30
 8001adc:	4b3b      	ldr	r3, [pc, #236]	@ (8001bcc <HAL_ETH_MspInit+0x178>)
 8001ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae8:	2300      	movs	r3, #0
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	4b37      	ldr	r3, [pc, #220]	@ (8001bcc <HAL_ETH_MspInit+0x178>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af0:	4a36      	ldr	r2, [pc, #216]	@ (8001bcc <HAL_ETH_MspInit+0x178>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af8:	4b34      	ldr	r3, [pc, #208]	@ (8001bcc <HAL_ETH_MspInit+0x178>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	4b30      	ldr	r3, [pc, #192]	@ (8001bcc <HAL_ETH_MspInit+0x178>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0c:	4a2f      	ldr	r2, [pc, #188]	@ (8001bcc <HAL_ETH_MspInit+0x178>)
 8001b0e:	f043 0302 	orr.w	r3, r3, #2
 8001b12:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b14:	4b2d      	ldr	r3, [pc, #180]	@ (8001bcc <HAL_ETH_MspInit+0x178>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b20:	2300      	movs	r3, #0
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	4b29      	ldr	r3, [pc, #164]	@ (8001bcc <HAL_ETH_MspInit+0x178>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b28:	4a28      	ldr	r2, [pc, #160]	@ (8001bcc <HAL_ETH_MspInit+0x178>)
 8001b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b30:	4b26      	ldr	r3, [pc, #152]	@ (8001bcc <HAL_ETH_MspInit+0x178>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001b3c:	2332      	movs	r3, #50	@ 0x32
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b4c:	230b      	movs	r3, #11
 8001b4e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b54:	4619      	mov	r1, r3
 8001b56:	481e      	ldr	r0, [pc, #120]	@ (8001bd0 <HAL_ETH_MspInit+0x17c>)
 8001b58:	f000 ff64 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001b5c:	2386      	movs	r3, #134	@ 0x86
 8001b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b6c:	230b      	movs	r3, #11
 8001b6e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b74:	4619      	mov	r1, r3
 8001b76:	4817      	ldr	r0, [pc, #92]	@ (8001bd4 <HAL_ETH_MspInit+0x180>)
 8001b78:	f000 ff54 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001b7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b8e:	230b      	movs	r3, #11
 8001b90:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b96:	4619      	mov	r1, r3
 8001b98:	480f      	ldr	r0, [pc, #60]	@ (8001bd8 <HAL_ETH_MspInit+0x184>)
 8001b9a:	f000 ff43 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001b9e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bb0:	230b      	movs	r3, #11
 8001bb2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4808      	ldr	r0, [pc, #32]	@ (8001bdc <HAL_ETH_MspInit+0x188>)
 8001bbc:	f000 ff32 	bl	8002a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001bc0:	bf00      	nop
 8001bc2:	3738      	adds	r7, #56	@ 0x38
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40028000 	.word	0x40028000
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020800 	.word	0x40020800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	40021800 	.word	0x40021800

08001be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08c      	sub	sp, #48	@ 0x30
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 031c 	add.w	r3, r7, #28
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a49      	ldr	r2, [pc, #292]	@ (8001d24 <HAL_UART_MspInit+0x144>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d152      	bne.n	8001ca8 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	61bb      	str	r3, [r7, #24]
 8001c06:	4b48      	ldr	r3, [pc, #288]	@ (8001d28 <HAL_UART_MspInit+0x148>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	4a47      	ldr	r2, [pc, #284]	@ (8001d28 <HAL_UART_MspInit+0x148>)
 8001c0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c12:	4b45      	ldr	r3, [pc, #276]	@ (8001d28 <HAL_UART_MspInit+0x148>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1a:	61bb      	str	r3, [r7, #24]
 8001c1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	4b41      	ldr	r3, [pc, #260]	@ (8001d28 <HAL_UART_MspInit+0x148>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	4a40      	ldr	r2, [pc, #256]	@ (8001d28 <HAL_UART_MspInit+0x148>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d28 <HAL_UART_MspInit+0x148>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d28 <HAL_UART_MspInit+0x148>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	4a39      	ldr	r2, [pc, #228]	@ (8001d28 <HAL_UART_MspInit+0x148>)
 8001c44:	f043 0308 	orr.w	r3, r3, #8
 8001c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4a:	4b37      	ldr	r3, [pc, #220]	@ (8001d28 <HAL_UART_MspInit+0x148>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c56:	2308      	movs	r3, #8
 8001c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c66:	2307      	movs	r3, #7
 8001c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	f107 031c 	add.w	r3, r7, #28
 8001c6e:	4619      	mov	r1, r3
 8001c70:	482e      	ldr	r0, [pc, #184]	@ (8001d2c <HAL_UART_MspInit+0x14c>)
 8001c72:	f000 fed7 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c76:	2320      	movs	r3, #32
 8001c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c82:	2303      	movs	r3, #3
 8001c84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c86:	2307      	movs	r3, #7
 8001c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c8a:	f107 031c 	add.w	r3, r7, #28
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4827      	ldr	r0, [pc, #156]	@ (8001d30 <HAL_UART_MspInit+0x150>)
 8001c92:	f000 fec7 	bl	8002a24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2026      	movs	r0, #38	@ 0x26
 8001c9c:	f000 fad1 	bl	8002242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ca0:	2026      	movs	r0, #38	@ 0x26
 8001ca2:	f000 faea 	bl	800227a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ca6:	e039      	b.n	8001d1c <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a21      	ldr	r2, [pc, #132]	@ (8001d34 <HAL_UART_MspInit+0x154>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d134      	bne.n	8001d1c <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d28 <HAL_UART_MspInit+0x148>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	4a1b      	ldr	r2, [pc, #108]	@ (8001d28 <HAL_UART_MspInit+0x148>)
 8001cbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cc2:	4b19      	ldr	r3, [pc, #100]	@ (8001d28 <HAL_UART_MspInit+0x148>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	4b15      	ldr	r3, [pc, #84]	@ (8001d28 <HAL_UART_MspInit+0x148>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	4a14      	ldr	r2, [pc, #80]	@ (8001d28 <HAL_UART_MspInit+0x148>)
 8001cd8:	f043 0308 	orr.w	r3, r3, #8
 8001cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cde:	4b12      	ldr	r3, [pc, #72]	@ (8001d28 <HAL_UART_MspInit+0x148>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001cea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cfc:	2307      	movs	r3, #7
 8001cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d00:	f107 031c 	add.w	r3, r7, #28
 8001d04:	4619      	mov	r1, r3
 8001d06:	480a      	ldr	r0, [pc, #40]	@ (8001d30 <HAL_UART_MspInit+0x150>)
 8001d08:	f000 fe8c 	bl	8002a24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2100      	movs	r1, #0
 8001d10:	2027      	movs	r0, #39	@ 0x27
 8001d12:	f000 fa96 	bl	8002242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d16:	2027      	movs	r0, #39	@ 0x27
 8001d18:	f000 faaf 	bl	800227a <HAL_NVIC_EnableIRQ>
}
 8001d1c:	bf00      	nop
 8001d1e:	3730      	adds	r7, #48	@ 0x30
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40004400 	.word	0x40004400
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40020000 	.word	0x40020000
 8001d30:	40020c00 	.word	0x40020c00
 8001d34:	40004800 	.word	0x40004800

08001d38 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08a      	sub	sp, #40	@ 0x28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d58:	d13f      	bne.n	8001dda <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	4b21      	ldr	r3, [pc, #132]	@ (8001de4 <HAL_PCD_MspInit+0xac>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	4a20      	ldr	r2, [pc, #128]	@ (8001de4 <HAL_PCD_MspInit+0xac>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001de4 <HAL_PCD_MspInit+0xac>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001d76:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d88:	230a      	movs	r3, #10
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4619      	mov	r1, r3
 8001d92:	4815      	ldr	r0, [pc, #84]	@ (8001de8 <HAL_PCD_MspInit+0xb0>)
 8001d94:	f000 fe46 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001d98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001da6:	f107 0314 	add.w	r3, r7, #20
 8001daa:	4619      	mov	r1, r3
 8001dac:	480e      	ldr	r0, [pc, #56]	@ (8001de8 <HAL_PCD_MspInit+0xb0>)
 8001dae:	f000 fe39 	bl	8002a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001db2:	4b0c      	ldr	r3, [pc, #48]	@ (8001de4 <HAL_PCD_MspInit+0xac>)
 8001db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001db6:	4a0b      	ldr	r2, [pc, #44]	@ (8001de4 <HAL_PCD_MspInit+0xac>)
 8001db8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dbc:	6353      	str	r3, [r2, #52]	@ 0x34
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b08      	ldr	r3, [pc, #32]	@ (8001de4 <HAL_PCD_MspInit+0xac>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc6:	4a07      	ldr	r2, [pc, #28]	@ (8001de4 <HAL_PCD_MspInit+0xac>)
 8001dc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dce:	4b05      	ldr	r3, [pc, #20]	@ (8001de4 <HAL_PCD_MspInit+0xac>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001dda:	bf00      	nop
 8001ddc:	3728      	adds	r7, #40	@ 0x28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40020000 	.word	0x40020000

08001dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <NMI_Handler+0x4>

08001df4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <HardFault_Handler+0x4>

08001dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <MemManage_Handler+0x4>

08001e04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <BusFault_Handler+0x4>

08001e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <UsageFault_Handler+0x4>

08001e14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e42:	f000 f8df 	bl	8002004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 8001e50:	4803      	ldr	r0, [pc, #12]	@ (8001e60 <USART2_IRQHandler+0x14>)
 8001e52:	f7ff facb 	bl	80013ec <Uart_isr>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e56:	4802      	ldr	r0, [pc, #8]	@ (8001e60 <USART2_IRQHandler+0x14>)
 8001e58:	f001 fec2 	bl	8003be0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20002ae0 	.word	0x20002ae0

08001e64 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr(&huart3);
 8001e68:	4803      	ldr	r0, [pc, #12]	@ (8001e78 <USART3_IRQHandler+0x14>)
 8001e6a:	f7ff fabf 	bl	80013ec <Uart_isr>

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e6e:	4802      	ldr	r0, [pc, #8]	@ (8001e78 <USART3_IRQHandler+0x14>)
 8001e70:	f001 feb6 	bl	8003be0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20002b28 	.word	0x20002b28

08001e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e84:	4a14      	ldr	r2, [pc, #80]	@ (8001ed8 <_sbrk+0x5c>)
 8001e86:	4b15      	ldr	r3, [pc, #84]	@ (8001edc <_sbrk+0x60>)
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e90:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <_sbrk+0x64>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <_sbrk+0x22>
  {    __sbrk_heap_end = &_end;
 8001e98:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <_sbrk+0x64>)
 8001e9a:	4a12      	ldr	r2, [pc, #72]	@ (8001ee4 <_sbrk+0x68>)
 8001e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <_sbrk+0x64>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d207      	bcs.n	8001ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eac:	f003 f8e6 	bl	800507c <__errno>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eba:	e009      	b.n	8001ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ebc:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <_sbrk+0x64>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ec2:	4b07      	ldr	r3, [pc, #28]	@ (8001ee0 <_sbrk+0x64>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	4a05      	ldr	r2, [pc, #20]	@ (8001ee0 <_sbrk+0x64>)
 8001ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ece:	68fb      	ldr	r3, [r7, #12]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20030000 	.word	0x20030000
 8001edc:	00000400 	.word	0x00000400
 8001ee0:	2000305c 	.word	0x2000305c
 8001ee4:	200031b0 	.word	0x200031b0

08001ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eec:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <SystemInit+0x20>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ef2:	4a05      	ldr	r2, [pc, #20]	@ (8001f08 <SystemInit+0x20>)
 8001ef4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ef8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001f0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f10:	f7ff ffea 	bl	8001ee8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f14:	480c      	ldr	r0, [pc, #48]	@ (8001f48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f16:	490d      	ldr	r1, [pc, #52]	@ (8001f4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f18:	4a0d      	ldr	r2, [pc, #52]	@ (8001f50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f1c:	e002      	b.n	8001f24 <LoopCopyDataInit>

08001f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f22:	3304      	adds	r3, #4

08001f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f28:	d3f9      	bcc.n	8001f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f2c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f30:	e001      	b.n	8001f36 <LoopFillZerobss>

08001f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f34:	3204      	adds	r2, #4

08001f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f38:	d3fb      	bcc.n	8001f32 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f3a:	f003 f8a5 	bl	8005088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f3e:	f7ff faf5 	bl	800152c <main>
  bx  lr    
 8001f42:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f44:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f4c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001f50:	0800605c 	.word	0x0800605c
  ldr r2, =_sbss
 8001f54:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001f58:	200031ac 	.word	0x200031ac

08001f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f5c:	e7fe      	b.n	8001f5c <ADC_IRQHandler>
	...

08001f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f64:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa0 <HAL_Init+0x40>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa0 <HAL_Init+0x40>)
 8001f6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f70:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <HAL_Init+0x40>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa0 <HAL_Init+0x40>)
 8001f76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f7c:	4b08      	ldr	r3, [pc, #32]	@ (8001fa0 <HAL_Init+0x40>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a07      	ldr	r2, [pc, #28]	@ (8001fa0 <HAL_Init+0x40>)
 8001f82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f88:	2003      	movs	r0, #3
 8001f8a:	f000 f94f 	bl	800222c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f000 f808 	bl	8001fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f94:	f7ff fd36 	bl	8001a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023c00 	.word	0x40023c00

08001fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fac:	4b12      	ldr	r3, [pc, #72]	@ (8001ff8 <HAL_InitTick+0x54>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <HAL_InitTick+0x58>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 f967 	bl	8002296 <HAL_SYSTICK_Config>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e00e      	b.n	8001ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b0f      	cmp	r3, #15
 8001fd6:	d80a      	bhi.n	8001fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe0:	f000 f92f 	bl	8002242 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe4:	4a06      	ldr	r2, [pc, #24]	@ (8002000 <HAL_InitTick+0x5c>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e000      	b.n	8001ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	20000008 	.word	0x20000008
 8002000:	20000004 	.word	0x20000004

08002004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002008:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <HAL_IncTick+0x20>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	461a      	mov	r2, r3
 800200e:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <HAL_IncTick+0x24>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4413      	add	r3, r2
 8002014:	4a04      	ldr	r2, [pc, #16]	@ (8002028 <HAL_IncTick+0x24>)
 8002016:	6013      	str	r3, [r2, #0]
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000008 	.word	0x20000008
 8002028:	20003060 	.word	0x20003060

0800202c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return uwTick;
 8002030:	4b03      	ldr	r3, [pc, #12]	@ (8002040 <HAL_GetTick+0x14>)
 8002032:	681b      	ldr	r3, [r3, #0]
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	20003060 	.word	0x20003060

08002044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800204c:	f7ff ffee 	bl	800202c <HAL_GetTick>
 8002050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205c:	d005      	beq.n	800206a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800205e:	4b0a      	ldr	r3, [pc, #40]	@ (8002088 <HAL_Delay+0x44>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4413      	add	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800206a:	bf00      	nop
 800206c:	f7ff ffde 	bl	800202c <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	429a      	cmp	r2, r3
 800207a:	d8f7      	bhi.n	800206c <HAL_Delay+0x28>
  {
  }
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000008 	.word	0x20000008

0800208c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800209c:	4b0c      	ldr	r3, [pc, #48]	@ (80020d0 <__NVIC_SetPriorityGrouping+0x44>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020a8:	4013      	ands	r3, r2
 80020aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020be:	4a04      	ldr	r2, [pc, #16]	@ (80020d0 <__NVIC_SetPriorityGrouping+0x44>)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	60d3      	str	r3, [r2, #12]
}
 80020c4:	bf00      	nop
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d8:	4b04      	ldr	r3, [pc, #16]	@ (80020ec <__NVIC_GetPriorityGrouping+0x18>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	f003 0307 	and.w	r3, r3, #7
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	db0b      	blt.n	800211a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	f003 021f 	and.w	r2, r3, #31
 8002108:	4907      	ldr	r1, [pc, #28]	@ (8002128 <__NVIC_EnableIRQ+0x38>)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	095b      	lsrs	r3, r3, #5
 8002110:	2001      	movs	r0, #1
 8002112:	fa00 f202 	lsl.w	r2, r0, r2
 8002116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000e100 	.word	0xe000e100

0800212c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	6039      	str	r1, [r7, #0]
 8002136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213c:	2b00      	cmp	r3, #0
 800213e:	db0a      	blt.n	8002156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	b2da      	uxtb	r2, r3
 8002144:	490c      	ldr	r1, [pc, #48]	@ (8002178 <__NVIC_SetPriority+0x4c>)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	0112      	lsls	r2, r2, #4
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	440b      	add	r3, r1
 8002150:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002154:	e00a      	b.n	800216c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4908      	ldr	r1, [pc, #32]	@ (800217c <__NVIC_SetPriority+0x50>)
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	3b04      	subs	r3, #4
 8002164:	0112      	lsls	r2, r2, #4
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	440b      	add	r3, r1
 800216a:	761a      	strb	r2, [r3, #24]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000e100 	.word	0xe000e100
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002180:	b480      	push	{r7}
 8002182:	b089      	sub	sp, #36	@ 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f1c3 0307 	rsb	r3, r3, #7
 800219a:	2b04      	cmp	r3, #4
 800219c:	bf28      	it	cs
 800219e:	2304      	movcs	r3, #4
 80021a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3304      	adds	r3, #4
 80021a6:	2b06      	cmp	r3, #6
 80021a8:	d902      	bls.n	80021b0 <NVIC_EncodePriority+0x30>
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3b03      	subs	r3, #3
 80021ae:	e000      	b.n	80021b2 <NVIC_EncodePriority+0x32>
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	f04f 32ff 	mov.w	r2, #4294967295
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43da      	mvns	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	401a      	ands	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c8:	f04f 31ff 	mov.w	r1, #4294967295
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
 80021d2:	43d9      	mvns	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	4313      	orrs	r3, r2
         );
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3724      	adds	r7, #36	@ 0x24
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021f8:	d301      	bcc.n	80021fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00f      	b.n	800221e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002228 <SysTick_Config+0x40>)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002206:	210f      	movs	r1, #15
 8002208:	f04f 30ff 	mov.w	r0, #4294967295
 800220c:	f7ff ff8e 	bl	800212c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002210:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <SysTick_Config+0x40>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002216:	4b04      	ldr	r3, [pc, #16]	@ (8002228 <SysTick_Config+0x40>)
 8002218:	2207      	movs	r2, #7
 800221a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	e000e010 	.word	0xe000e010

0800222c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff ff29 	bl	800208c <__NVIC_SetPriorityGrouping>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002242:	b580      	push	{r7, lr}
 8002244:	b086      	sub	sp, #24
 8002246:	af00      	add	r7, sp, #0
 8002248:	4603      	mov	r3, r0
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002254:	f7ff ff3e 	bl	80020d4 <__NVIC_GetPriorityGrouping>
 8002258:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	6978      	ldr	r0, [r7, #20]
 8002260:	f7ff ff8e 	bl	8002180 <NVIC_EncodePriority>
 8002264:	4602      	mov	r2, r0
 8002266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff5d 	bl	800212c <__NVIC_SetPriority>
}
 8002272:	bf00      	nop
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	4603      	mov	r3, r0
 8002282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff31 	bl	80020f0 <__NVIC_EnableIRQ>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff ffa2 	bl	80021e8 <SysTick_Config>
 80022a4:	4603      	mov	r3, r0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b084      	sub	sp, #16
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022bc:	f7ff feb6 	bl	800202c <HAL_GetTick>
 80022c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d008      	beq.n	80022e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2280      	movs	r2, #128	@ 0x80
 80022d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e052      	b.n	8002386 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0216 	bic.w	r2, r2, #22
 80022ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	2b00      	cmp	r3, #0
 8002306:	d103      	bne.n	8002310 <HAL_DMA_Abort+0x62>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800230c:	2b00      	cmp	r3, #0
 800230e:	d007      	beq.n	8002320 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0208 	bic.w	r2, r2, #8
 800231e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0201 	bic.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002330:	e013      	b.n	800235a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002332:	f7ff fe7b 	bl	800202c <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b05      	cmp	r3, #5
 800233e:	d90c      	bls.n	800235a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2220      	movs	r2, #32
 8002344:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2203      	movs	r2, #3
 800234a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e015      	b.n	8002386 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1e4      	bne.n	8002332 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236c:	223f      	movs	r2, #63	@ 0x3f
 800236e:	409a      	lsls	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d004      	beq.n	80023ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2280      	movs	r2, #128	@ 0x80
 80023a6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e00c      	b.n	80023c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2205      	movs	r2, #5
 80023b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0201 	bic.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e06c      	b.n	80024c0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d106      	bne.n	80023fe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2223      	movs	r2, #35	@ 0x23
 80023f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff fb2b 	bl	8001a54 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	4b31      	ldr	r3, [pc, #196]	@ (80024c8 <HAL_ETH_Init+0xf4>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002406:	4a30      	ldr	r2, [pc, #192]	@ (80024c8 <HAL_ETH_Init+0xf4>)
 8002408:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800240c:	6453      	str	r3, [r2, #68]	@ 0x44
 800240e:	4b2e      	ldr	r3, [pc, #184]	@ (80024c8 <HAL_ETH_Init+0xf4>)
 8002410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002412:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800241a:	4b2c      	ldr	r3, [pc, #176]	@ (80024cc <HAL_ETH_Init+0xf8>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4a2b      	ldr	r2, [pc, #172]	@ (80024cc <HAL_ETH_Init+0xf8>)
 8002420:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002424:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002426:	4b29      	ldr	r3, [pc, #164]	@ (80024cc <HAL_ETH_Init+0xf8>)
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	4927      	ldr	r1, [pc, #156]	@ (80024cc <HAL_ETH_Init+0xf8>)
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002434:	4b25      	ldr	r3, [pc, #148]	@ (80024cc <HAL_ETH_Init+0xf8>)
 8002436:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800244e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002450:	f7ff fdec 	bl	800202c <HAL_GetTick>
 8002454:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002456:	e011      	b.n	800247c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002458:	f7ff fde8 	bl	800202c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002466:	d909      	bls.n	800247c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2204      	movs	r2, #4
 800246c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	22e0      	movs	r2, #224	@ 0xe0
 8002474:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e021      	b.n	80024c0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1e4      	bne.n	8002458 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f958 	bl	8002744 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f9ff 	bl	8002898 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fa55 	bl	800294a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	461a      	mov	r2, r3
 80024a6:	2100      	movs	r1, #0
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f9bd 	bl	8002828 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2210      	movs	r2, #16
 80024ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40023800 	.word	0x40023800
 80024cc:	40013800 	.word	0x40013800

080024d0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4b51      	ldr	r3, [pc, #324]	@ (800262c <ETH_SetMACConfig+0x15c>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	7c1b      	ldrb	r3, [r3, #16]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d102      	bne.n	80024f8 <ETH_SetMACConfig+0x28>
 80024f2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80024f6:	e000      	b.n	80024fa <ETH_SetMACConfig+0x2a>
 80024f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	7c5b      	ldrb	r3, [r3, #17]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d102      	bne.n	8002508 <ETH_SetMACConfig+0x38>
 8002502:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002506:	e000      	b.n	800250a <ETH_SetMACConfig+0x3a>
 8002508:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800250a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002510:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	7fdb      	ldrb	r3, [r3, #31]
 8002516:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002518:	431a      	orrs	r2, r3
                        macconf->Speed |
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800251e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	7f92      	ldrb	r2, [r2, #30]
 8002524:	2a00      	cmp	r2, #0
 8002526:	d102      	bne.n	800252e <ETH_SetMACConfig+0x5e>
 8002528:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800252c:	e000      	b.n	8002530 <ETH_SetMACConfig+0x60>
 800252e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002530:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	7f1b      	ldrb	r3, [r3, #28]
 8002536:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002538:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800253e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	791b      	ldrb	r3, [r3, #4]
 8002544:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002546:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800254e:	2a00      	cmp	r2, #0
 8002550:	d102      	bne.n	8002558 <ETH_SetMACConfig+0x88>
 8002552:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002556:	e000      	b.n	800255a <ETH_SetMACConfig+0x8a>
 8002558:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800255a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	7bdb      	ldrb	r3, [r3, #15]
 8002560:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002562:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002568:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002570:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002572:	4313      	orrs	r3, r2
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800258a:	2001      	movs	r0, #1
 800258c:	f7ff fd5a 	bl	8002044 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80025a6:	4013      	ands	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ae:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80025b6:	2a00      	cmp	r2, #0
 80025b8:	d101      	bne.n	80025be <ETH_SetMACConfig+0xee>
 80025ba:	2280      	movs	r2, #128	@ 0x80
 80025bc:	e000      	b.n	80025c0 <ETH_SetMACConfig+0xf0>
 80025be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80025c0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80025c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80025ce:	2a01      	cmp	r2, #1
 80025d0:	d101      	bne.n	80025d6 <ETH_SetMACConfig+0x106>
 80025d2:	2208      	movs	r2, #8
 80025d4:	e000      	b.n	80025d8 <ETH_SetMACConfig+0x108>
 80025d6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80025d8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80025e0:	2a01      	cmp	r2, #1
 80025e2:	d101      	bne.n	80025e8 <ETH_SetMACConfig+0x118>
 80025e4:	2204      	movs	r2, #4
 80025e6:	e000      	b.n	80025ea <ETH_SetMACConfig+0x11a>
 80025e8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80025ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80025f2:	2a01      	cmp	r2, #1
 80025f4:	d101      	bne.n	80025fa <ETH_SetMACConfig+0x12a>
 80025f6:	2202      	movs	r2, #2
 80025f8:	e000      	b.n	80025fc <ETH_SetMACConfig+0x12c>
 80025fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80025fc:	4313      	orrs	r3, r2
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002614:	2001      	movs	r0, #1
 8002616:	f7ff fd15 	bl	8002044 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	619a      	str	r2, [r3, #24]
}
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	ff20810f 	.word	0xff20810f

08002630 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4b3d      	ldr	r3, [pc, #244]	@ (8002740 <ETH_SetDMAConfig+0x110>)
 800264a:	4013      	ands	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	7b1b      	ldrb	r3, [r3, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d102      	bne.n	800265c <ETH_SetDMAConfig+0x2c>
 8002656:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800265a:	e000      	b.n	800265e <ETH_SetDMAConfig+0x2e>
 800265c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	7b5b      	ldrb	r3, [r3, #13]
 8002662:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002664:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	7f52      	ldrb	r2, [r2, #29]
 800266a:	2a00      	cmp	r2, #0
 800266c:	d102      	bne.n	8002674 <ETH_SetDMAConfig+0x44>
 800266e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002672:	e000      	b.n	8002676 <ETH_SetDMAConfig+0x46>
 8002674:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002676:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	7b9b      	ldrb	r3, [r3, #14]
 800267c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800267e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002684:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	7f1b      	ldrb	r3, [r3, #28]
 800268a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800268c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	7f9b      	ldrb	r3, [r3, #30]
 8002692:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002694:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800269a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026a2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80026a4:	4313      	orrs	r3, r2
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026b4:	461a      	mov	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026c6:	2001      	movs	r0, #1
 80026c8:	f7ff fcbc 	bl	8002044 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026d4:	461a      	mov	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	791b      	ldrb	r3, [r3, #4]
 80026de:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80026e4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80026ea:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80026f0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026f8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80026fa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002700:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002702:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002708:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002712:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002716:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002724:	2001      	movs	r0, #1
 8002726:	f7ff fc8d 	bl	8002044 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002732:	461a      	mov	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6013      	str	r3, [r2, #0]
}
 8002738:	bf00      	nop
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	f8de3f23 	.word	0xf8de3f23

08002744 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b0a6      	sub	sp, #152	@ 0x98
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800274c:	2301      	movs	r3, #1
 800274e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002752:	2301      	movs	r3, #1
 8002754:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002758:	2300      	movs	r3, #0
 800275a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800275c:	2300      	movs	r3, #0
 800275e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002762:	2301      	movs	r3, #1
 8002764:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002768:	2300      	movs	r3, #0
 800276a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800276e:	2301      	movs	r3, #1
 8002770:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002774:	2300      	movs	r3, #0
 8002776:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002780:	2300      	movs	r3, #0
 8002782:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002784:	2300      	movs	r3, #0
 8002786:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800278a:	2300      	movs	r3, #0
 800278c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800278e:	2300      	movs	r3, #0
 8002790:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002794:	2300      	movs	r3, #0
 8002796:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800279a:	2300      	movs	r3, #0
 800279c:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80027a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80027aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80027ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80027b2:	2300      	movs	r3, #0
 80027b4:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80027b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80027bc:	4619      	mov	r1, r3
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff fe86 	bl	80024d0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80027c4:	2301      	movs	r3, #1
 80027c6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80027c8:	2301      	movs	r3, #1
 80027ca:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80027cc:	2301      	movs	r3, #1
 80027ce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80027d2:	2301      	movs	r3, #1
 80027d4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80027e6:	2300      	movs	r3, #0
 80027e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80027ea:	2301      	movs	r3, #1
 80027ec:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80027f0:	2301      	movs	r3, #1
 80027f2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80027f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027f8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80027fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80027fe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002800:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002804:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002806:	2301      	movs	r3, #1
 8002808:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800280c:	2300      	movs	r3, #0
 800280e:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002810:	2300      	movs	r3, #0
 8002812:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002814:	f107 0308 	add.w	r3, r7, #8
 8002818:	4619      	mov	r1, r3
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff ff08 	bl	8002630 <ETH_SetDMAConfig>
}
 8002820:	bf00      	nop
 8002822:	3798      	adds	r7, #152	@ 0x98
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002828:	b480      	push	{r7}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3305      	adds	r3, #5
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	3204      	adds	r2, #4
 8002840:	7812      	ldrb	r2, [r2, #0]
 8002842:	4313      	orrs	r3, r2
 8002844:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	4b11      	ldr	r3, [pc, #68]	@ (8002890 <ETH_MACAddressConfig+0x68>)
 800284a:	4413      	add	r3, r2
 800284c:	461a      	mov	r2, r3
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3303      	adds	r3, #3
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	061a      	lsls	r2, r3, #24
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3302      	adds	r3, #2
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	041b      	lsls	r3, r3, #16
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3301      	adds	r3, #1
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	021b      	lsls	r3, r3, #8
 800286c:	4313      	orrs	r3, r2
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	7812      	ldrb	r2, [r2, #0]
 8002872:	4313      	orrs	r3, r2
 8002874:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	4b06      	ldr	r3, [pc, #24]	@ (8002894 <ETH_MACAddressConfig+0x6c>)
 800287a:	4413      	add	r3, r2
 800287c:	461a      	mov	r2, r3
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	6013      	str	r3, [r2, #0]
}
 8002882:	bf00      	nop
 8002884:	371c      	adds	r7, #28
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	40028040 	.word	0x40028040
 8002894:	40028044 	.word	0x40028044

08002898 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028a0:	2300      	movs	r3, #0
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	e03e      	b.n	8002924 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68d9      	ldr	r1, [r3, #12]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	440b      	add	r3, r1
 80028b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2200      	movs	r2, #0
 80028c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2200      	movs	r2, #0
 80028ce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	3206      	adds	r2, #6
 80028d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d80c      	bhi.n	8002908 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68d9      	ldr	r1, [r3, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	440b      	add	r3, r1
 8002900:	461a      	mov	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	e004      	b.n	8002912 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	461a      	mov	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	3301      	adds	r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2b03      	cmp	r3, #3
 8002928:	d9bd      	bls.n	80028a6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800293c:	611a      	str	r2, [r3, #16]
}
 800293e:	bf00      	nop
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800294a:	b480      	push	{r7}
 800294c:	b085      	sub	sp, #20
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	e046      	b.n	80029e6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6919      	ldr	r1, [r3, #16]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	440b      	add	r3, r1
 8002968:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2200      	movs	r2, #0
 8002974:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2200      	movs	r2, #0
 800297a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2200      	movs	r2, #0
 8002980:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2200      	movs	r2, #0
 8002986:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2200      	movs	r2, #0
 800298c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002994:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 800299c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80029aa:	68b9      	ldr	r1, [r7, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	3212      	adds	r2, #18
 80029b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d80c      	bhi.n	80029d6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6919      	ldr	r1, [r3, #16]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	440b      	add	r3, r1
 80029ce:	461a      	mov	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	60da      	str	r2, [r3, #12]
 80029d4:	e004      	b.n	80029e0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	461a      	mov	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3301      	adds	r3, #1
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d9b5      	bls.n	8002958 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a16:	60da      	str	r2, [r3, #12]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b089      	sub	sp, #36	@ 0x24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	e177      	b.n	8002d30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a40:	2201      	movs	r2, #1
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	4013      	ands	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	f040 8166 	bne.w	8002d2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d005      	beq.n	8002a76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d130      	bne.n	8002ad8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	2203      	movs	r2, #3
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aac:	2201      	movs	r2, #1
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 0201 	and.w	r2, r3, #1
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d017      	beq.n	8002b14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	2203      	movs	r2, #3
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d123      	bne.n	8002b68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	08da      	lsrs	r2, r3, #3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3208      	adds	r2, #8
 8002b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	220f      	movs	r2, #15
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	08da      	lsrs	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3208      	adds	r2, #8
 8002b62:	69b9      	ldr	r1, [r7, #24]
 8002b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	2203      	movs	r2, #3
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0203 	and.w	r2, r3, #3
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80c0 	beq.w	8002d2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	4b66      	ldr	r3, [pc, #408]	@ (8002d48 <HAL_GPIO_Init+0x324>)
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb2:	4a65      	ldr	r2, [pc, #404]	@ (8002d48 <HAL_GPIO_Init+0x324>)
 8002bb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bba:	4b63      	ldr	r3, [pc, #396]	@ (8002d48 <HAL_GPIO_Init+0x324>)
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bc6:	4a61      	ldr	r2, [pc, #388]	@ (8002d4c <HAL_GPIO_Init+0x328>)
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	089b      	lsrs	r3, r3, #2
 8002bcc:	3302      	adds	r3, #2
 8002bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	220f      	movs	r2, #15
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a58      	ldr	r2, [pc, #352]	@ (8002d50 <HAL_GPIO_Init+0x32c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d037      	beq.n	8002c62 <HAL_GPIO_Init+0x23e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a57      	ldr	r2, [pc, #348]	@ (8002d54 <HAL_GPIO_Init+0x330>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d031      	beq.n	8002c5e <HAL_GPIO_Init+0x23a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a56      	ldr	r2, [pc, #344]	@ (8002d58 <HAL_GPIO_Init+0x334>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d02b      	beq.n	8002c5a <HAL_GPIO_Init+0x236>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a55      	ldr	r2, [pc, #340]	@ (8002d5c <HAL_GPIO_Init+0x338>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d025      	beq.n	8002c56 <HAL_GPIO_Init+0x232>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a54      	ldr	r2, [pc, #336]	@ (8002d60 <HAL_GPIO_Init+0x33c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d01f      	beq.n	8002c52 <HAL_GPIO_Init+0x22e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a53      	ldr	r2, [pc, #332]	@ (8002d64 <HAL_GPIO_Init+0x340>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d019      	beq.n	8002c4e <HAL_GPIO_Init+0x22a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a52      	ldr	r2, [pc, #328]	@ (8002d68 <HAL_GPIO_Init+0x344>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d013      	beq.n	8002c4a <HAL_GPIO_Init+0x226>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a51      	ldr	r2, [pc, #324]	@ (8002d6c <HAL_GPIO_Init+0x348>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00d      	beq.n	8002c46 <HAL_GPIO_Init+0x222>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a50      	ldr	r2, [pc, #320]	@ (8002d70 <HAL_GPIO_Init+0x34c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d007      	beq.n	8002c42 <HAL_GPIO_Init+0x21e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a4f      	ldr	r2, [pc, #316]	@ (8002d74 <HAL_GPIO_Init+0x350>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d101      	bne.n	8002c3e <HAL_GPIO_Init+0x21a>
 8002c3a:	2309      	movs	r3, #9
 8002c3c:	e012      	b.n	8002c64 <HAL_GPIO_Init+0x240>
 8002c3e:	230a      	movs	r3, #10
 8002c40:	e010      	b.n	8002c64 <HAL_GPIO_Init+0x240>
 8002c42:	2308      	movs	r3, #8
 8002c44:	e00e      	b.n	8002c64 <HAL_GPIO_Init+0x240>
 8002c46:	2307      	movs	r3, #7
 8002c48:	e00c      	b.n	8002c64 <HAL_GPIO_Init+0x240>
 8002c4a:	2306      	movs	r3, #6
 8002c4c:	e00a      	b.n	8002c64 <HAL_GPIO_Init+0x240>
 8002c4e:	2305      	movs	r3, #5
 8002c50:	e008      	b.n	8002c64 <HAL_GPIO_Init+0x240>
 8002c52:	2304      	movs	r3, #4
 8002c54:	e006      	b.n	8002c64 <HAL_GPIO_Init+0x240>
 8002c56:	2303      	movs	r3, #3
 8002c58:	e004      	b.n	8002c64 <HAL_GPIO_Init+0x240>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e002      	b.n	8002c64 <HAL_GPIO_Init+0x240>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <HAL_GPIO_Init+0x240>
 8002c62:	2300      	movs	r3, #0
 8002c64:	69fa      	ldr	r2, [r7, #28]
 8002c66:	f002 0203 	and.w	r2, r2, #3
 8002c6a:	0092      	lsls	r2, r2, #2
 8002c6c:	4093      	lsls	r3, r2
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c74:	4935      	ldr	r1, [pc, #212]	@ (8002d4c <HAL_GPIO_Init+0x328>)
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	089b      	lsrs	r3, r3, #2
 8002c7a:	3302      	adds	r3, #2
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c82:	4b3d      	ldr	r3, [pc, #244]	@ (8002d78 <HAL_GPIO_Init+0x354>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ca6:	4a34      	ldr	r2, [pc, #208]	@ (8002d78 <HAL_GPIO_Init+0x354>)
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cac:	4b32      	ldr	r3, [pc, #200]	@ (8002d78 <HAL_GPIO_Init+0x354>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cd0:	4a29      	ldr	r2, [pc, #164]	@ (8002d78 <HAL_GPIO_Init+0x354>)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cd6:	4b28      	ldr	r3, [pc, #160]	@ (8002d78 <HAL_GPIO_Init+0x354>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cfa:	4a1f      	ldr	r2, [pc, #124]	@ (8002d78 <HAL_GPIO_Init+0x354>)
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d00:	4b1d      	ldr	r3, [pc, #116]	@ (8002d78 <HAL_GPIO_Init+0x354>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d24:	4a14      	ldr	r2, [pc, #80]	@ (8002d78 <HAL_GPIO_Init+0x354>)
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	61fb      	str	r3, [r7, #28]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	2b0f      	cmp	r3, #15
 8002d34:	f67f ae84 	bls.w	8002a40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	3724      	adds	r7, #36	@ 0x24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40013800 	.word	0x40013800
 8002d50:	40020000 	.word	0x40020000
 8002d54:	40020400 	.word	0x40020400
 8002d58:	40020800 	.word	0x40020800
 8002d5c:	40020c00 	.word	0x40020c00
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40021400 	.word	0x40021400
 8002d68:	40021800 	.word	0x40021800
 8002d6c:	40021c00 	.word	0x40021c00
 8002d70:	40022000 	.word	0x40022000
 8002d74:	40022400 	.word	0x40022400
 8002d78:	40013c00 	.word	0x40013c00

08002d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d8c:	787b      	ldrb	r3, [r7, #1]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d92:	887a      	ldrh	r2, [r7, #2]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d98:	e003      	b.n	8002da2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d9a:	887b      	ldrh	r3, [r7, #2]
 8002d9c:	041a      	lsls	r2, r3, #16
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	619a      	str	r2, [r3, #24]
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b086      	sub	sp, #24
 8002db2:	af02      	add	r7, sp, #8
 8002db4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e101      	b.n	8002fc4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fe ffac 	bl	8001d38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2203      	movs	r2, #3
 8002de4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dee:	d102      	bne.n	8002df6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f001 fe7a 	bl	8004af4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	7c1a      	ldrb	r2, [r3, #16]
 8002e08:	f88d 2000 	strb.w	r2, [sp]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e10:	f001 fe0c 	bl	8004a2c <USB_CoreInit>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e0ce      	b.n	8002fc4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f001 fe72 	bl	8004b16 <USB_SetCurrentMode>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0bf      	b.n	8002fc4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e44:	2300      	movs	r3, #0
 8002e46:	73fb      	strb	r3, [r7, #15]
 8002e48:	e04a      	b.n	8002ee0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e4a:	7bfa      	ldrb	r2, [r7, #15]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	3315      	adds	r3, #21
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e5e:	7bfa      	ldrb	r2, [r7, #15]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3314      	adds	r3, #20
 8002e6e:	7bfa      	ldrb	r2, [r7, #15]
 8002e70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e72:	7bfa      	ldrb	r2, [r7, #15]
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	b298      	uxth	r0, r3
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4413      	add	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	332e      	adds	r3, #46	@ 0x2e
 8002e86:	4602      	mov	r2, r0
 8002e88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e8a:	7bfa      	ldrb	r2, [r7, #15]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	3318      	adds	r3, #24
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	331c      	adds	r3, #28
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002eb2:	7bfa      	ldrb	r2, [r7, #15]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3320      	adds	r3, #32
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ec6:	7bfa      	ldrb	r2, [r7, #15]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	3324      	adds	r3, #36	@ 0x24
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	3301      	adds	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	791b      	ldrb	r3, [r3, #4]
 8002ee4:	7bfa      	ldrb	r2, [r7, #15]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d3af      	bcc.n	8002e4a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eea:	2300      	movs	r3, #0
 8002eec:	73fb      	strb	r3, [r7, #15]
 8002eee:	e044      	b.n	8002f7a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ef0:	7bfa      	ldrb	r2, [r7, #15]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f06:	7bfa      	ldrb	r2, [r7, #15]
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002f18:	7bfa      	ldrb	r2, [r7, #15]
 8002f1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f1c:	7bfa      	ldrb	r2, [r7, #15]
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f2e:	2200      	movs	r2, #0
 8002f30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f32:	7bfa      	ldrb	r2, [r7, #15]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f48:	7bfa      	ldrb	r2, [r7, #15]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f5e:	7bfa      	ldrb	r2, [r7, #15]
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	3301      	adds	r3, #1
 8002f78:	73fb      	strb	r3, [r7, #15]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	791b      	ldrb	r3, [r3, #4]
 8002f7e:	7bfa      	ldrb	r2, [r7, #15]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d3b5      	bcc.n	8002ef0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6818      	ldr	r0, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	7c1a      	ldrb	r2, [r3, #16]
 8002f8c:	f88d 2000 	strb.w	r2, [sp]
 8002f90:	3304      	adds	r3, #4
 8002f92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f94:	f001 fe0c 	bl	8004bb0 <USB_DevInit>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e00c      	b.n	8002fc4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f001 ffd4 	bl	8004f6a <USB_DevDisconnect>

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e267      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d075      	beq.n	80030d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fea:	4b88      	ldr	r3, [pc, #544]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 030c 	and.w	r3, r3, #12
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d00c      	beq.n	8003010 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ff6:	4b85      	ldr	r3, [pc, #532]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d112      	bne.n	8003028 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003002:	4b82      	ldr	r3, [pc, #520]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800300a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800300e:	d10b      	bne.n	8003028 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003010:	4b7e      	ldr	r3, [pc, #504]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d05b      	beq.n	80030d4 <HAL_RCC_OscConfig+0x108>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d157      	bne.n	80030d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e242      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003030:	d106      	bne.n	8003040 <HAL_RCC_OscConfig+0x74>
 8003032:	4b76      	ldr	r3, [pc, #472]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a75      	ldr	r2, [pc, #468]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 8003038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	e01d      	b.n	800307c <HAL_RCC_OscConfig+0xb0>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003048:	d10c      	bne.n	8003064 <HAL_RCC_OscConfig+0x98>
 800304a:	4b70      	ldr	r3, [pc, #448]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a6f      	ldr	r2, [pc, #444]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 8003050:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	4b6d      	ldr	r3, [pc, #436]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a6c      	ldr	r2, [pc, #432]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 800305c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	e00b      	b.n	800307c <HAL_RCC_OscConfig+0xb0>
 8003064:	4b69      	ldr	r3, [pc, #420]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a68      	ldr	r2, [pc, #416]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 800306a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	4b66      	ldr	r3, [pc, #408]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a65      	ldr	r2, [pc, #404]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 8003076:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800307a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d013      	beq.n	80030ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fe ffd2 	bl	800202c <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800308c:	f7fe ffce 	bl	800202c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b64      	cmp	r3, #100	@ 0x64
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e207      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	4b5b      	ldr	r3, [pc, #364]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f0      	beq.n	800308c <HAL_RCC_OscConfig+0xc0>
 80030aa:	e014      	b.n	80030d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ac:	f7fe ffbe 	bl	800202c <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b4:	f7fe ffba 	bl	800202c <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	@ 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e1f3      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c6:	4b51      	ldr	r3, [pc, #324]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0xe8>
 80030d2:	e000      	b.n	80030d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d063      	beq.n	80031aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030e2:	4b4a      	ldr	r3, [pc, #296]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 030c 	and.w	r3, r3, #12
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00b      	beq.n	8003106 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ee:	4b47      	ldr	r3, [pc, #284]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d11c      	bne.n	8003134 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030fa:	4b44      	ldr	r3, [pc, #272]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d116      	bne.n	8003134 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003106:	4b41      	ldr	r3, [pc, #260]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d005      	beq.n	800311e <HAL_RCC_OscConfig+0x152>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d001      	beq.n	800311e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e1c7      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311e:	4b3b      	ldr	r3, [pc, #236]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4937      	ldr	r1, [pc, #220]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 800312e:	4313      	orrs	r3, r2
 8003130:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003132:	e03a      	b.n	80031aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d020      	beq.n	800317e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800313c:	4b34      	ldr	r3, [pc, #208]	@ (8003210 <HAL_RCC_OscConfig+0x244>)
 800313e:	2201      	movs	r2, #1
 8003140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003142:	f7fe ff73 	bl	800202c <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800314a:	f7fe ff6f 	bl	800202c <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e1a8      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315c:	4b2b      	ldr	r3, [pc, #172]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003168:	4b28      	ldr	r3, [pc, #160]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4925      	ldr	r1, [pc, #148]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 8003178:	4313      	orrs	r3, r2
 800317a:	600b      	str	r3, [r1, #0]
 800317c:	e015      	b.n	80031aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800317e:	4b24      	ldr	r3, [pc, #144]	@ (8003210 <HAL_RCC_OscConfig+0x244>)
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7fe ff52 	bl	800202c <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800318c:	f7fe ff4e 	bl	800202c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e187      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319e:	4b1b      	ldr	r3, [pc, #108]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d036      	beq.n	8003224 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d016      	beq.n	80031ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031be:	4b15      	ldr	r3, [pc, #84]	@ (8003214 <HAL_RCC_OscConfig+0x248>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c4:	f7fe ff32 	bl	800202c <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031cc:	f7fe ff2e 	bl	800202c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e167      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031de:	4b0b      	ldr	r3, [pc, #44]	@ (800320c <HAL_RCC_OscConfig+0x240>)
 80031e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f0      	beq.n	80031cc <HAL_RCC_OscConfig+0x200>
 80031ea:	e01b      	b.n	8003224 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ec:	4b09      	ldr	r3, [pc, #36]	@ (8003214 <HAL_RCC_OscConfig+0x248>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f2:	f7fe ff1b 	bl	800202c <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f8:	e00e      	b.n	8003218 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031fa:	f7fe ff17 	bl	800202c <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d907      	bls.n	8003218 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e150      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
 800320c:	40023800 	.word	0x40023800
 8003210:	42470000 	.word	0x42470000
 8003214:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003218:	4b88      	ldr	r3, [pc, #544]	@ (800343c <HAL_RCC_OscConfig+0x470>)
 800321a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1ea      	bne.n	80031fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 8097 	beq.w	8003360 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003232:	2300      	movs	r3, #0
 8003234:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003236:	4b81      	ldr	r3, [pc, #516]	@ (800343c <HAL_RCC_OscConfig+0x470>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10f      	bne.n	8003262 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	4b7d      	ldr	r3, [pc, #500]	@ (800343c <HAL_RCC_OscConfig+0x470>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	4a7c      	ldr	r2, [pc, #496]	@ (800343c <HAL_RCC_OscConfig+0x470>)
 800324c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003250:	6413      	str	r3, [r2, #64]	@ 0x40
 8003252:	4b7a      	ldr	r3, [pc, #488]	@ (800343c <HAL_RCC_OscConfig+0x470>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800325e:	2301      	movs	r3, #1
 8003260:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003262:	4b77      	ldr	r3, [pc, #476]	@ (8003440 <HAL_RCC_OscConfig+0x474>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326a:	2b00      	cmp	r3, #0
 800326c:	d118      	bne.n	80032a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800326e:	4b74      	ldr	r3, [pc, #464]	@ (8003440 <HAL_RCC_OscConfig+0x474>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a73      	ldr	r2, [pc, #460]	@ (8003440 <HAL_RCC_OscConfig+0x474>)
 8003274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800327a:	f7fe fed7 	bl	800202c <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003282:	f7fe fed3 	bl	800202c <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e10c      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003294:	4b6a      	ldr	r3, [pc, #424]	@ (8003440 <HAL_RCC_OscConfig+0x474>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0f0      	beq.n	8003282 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d106      	bne.n	80032b6 <HAL_RCC_OscConfig+0x2ea>
 80032a8:	4b64      	ldr	r3, [pc, #400]	@ (800343c <HAL_RCC_OscConfig+0x470>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ac:	4a63      	ldr	r2, [pc, #396]	@ (800343c <HAL_RCC_OscConfig+0x470>)
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80032b4:	e01c      	b.n	80032f0 <HAL_RCC_OscConfig+0x324>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b05      	cmp	r3, #5
 80032bc:	d10c      	bne.n	80032d8 <HAL_RCC_OscConfig+0x30c>
 80032be:	4b5f      	ldr	r3, [pc, #380]	@ (800343c <HAL_RCC_OscConfig+0x470>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c2:	4a5e      	ldr	r2, [pc, #376]	@ (800343c <HAL_RCC_OscConfig+0x470>)
 80032c4:	f043 0304 	orr.w	r3, r3, #4
 80032c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ca:	4b5c      	ldr	r3, [pc, #368]	@ (800343c <HAL_RCC_OscConfig+0x470>)
 80032cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ce:	4a5b      	ldr	r2, [pc, #364]	@ (800343c <HAL_RCC_OscConfig+0x470>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80032d6:	e00b      	b.n	80032f0 <HAL_RCC_OscConfig+0x324>
 80032d8:	4b58      	ldr	r3, [pc, #352]	@ (800343c <HAL_RCC_OscConfig+0x470>)
 80032da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032dc:	4a57      	ldr	r2, [pc, #348]	@ (800343c <HAL_RCC_OscConfig+0x470>)
 80032de:	f023 0301 	bic.w	r3, r3, #1
 80032e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80032e4:	4b55      	ldr	r3, [pc, #340]	@ (800343c <HAL_RCC_OscConfig+0x470>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e8:	4a54      	ldr	r2, [pc, #336]	@ (800343c <HAL_RCC_OscConfig+0x470>)
 80032ea:	f023 0304 	bic.w	r3, r3, #4
 80032ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d015      	beq.n	8003324 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f8:	f7fe fe98 	bl	800202c <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fe:	e00a      	b.n	8003316 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003300:	f7fe fe94 	bl	800202c <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e0cb      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003316:	4b49      	ldr	r3, [pc, #292]	@ (800343c <HAL_RCC_OscConfig+0x470>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0ee      	beq.n	8003300 <HAL_RCC_OscConfig+0x334>
 8003322:	e014      	b.n	800334e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003324:	f7fe fe82 	bl	800202c <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800332a:	e00a      	b.n	8003342 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800332c:	f7fe fe7e 	bl	800202c <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800333a:	4293      	cmp	r3, r2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e0b5      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003342:	4b3e      	ldr	r3, [pc, #248]	@ (800343c <HAL_RCC_OscConfig+0x470>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1ee      	bne.n	800332c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800334e:	7dfb      	ldrb	r3, [r7, #23]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d105      	bne.n	8003360 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003354:	4b39      	ldr	r3, [pc, #228]	@ (800343c <HAL_RCC_OscConfig+0x470>)
 8003356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003358:	4a38      	ldr	r2, [pc, #224]	@ (800343c <HAL_RCC_OscConfig+0x470>)
 800335a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800335e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80a1 	beq.w	80034ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800336a:	4b34      	ldr	r3, [pc, #208]	@ (800343c <HAL_RCC_OscConfig+0x470>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	2b08      	cmp	r3, #8
 8003374:	d05c      	beq.n	8003430 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d141      	bne.n	8003402 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337e:	4b31      	ldr	r3, [pc, #196]	@ (8003444 <HAL_RCC_OscConfig+0x478>)
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003384:	f7fe fe52 	bl	800202c <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800338c:	f7fe fe4e 	bl	800202c <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e087      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339e:	4b27      	ldr	r3, [pc, #156]	@ (800343c <HAL_RCC_OscConfig+0x470>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1f0      	bne.n	800338c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69da      	ldr	r2, [r3, #28]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b8:	019b      	lsls	r3, r3, #6
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c0:	085b      	lsrs	r3, r3, #1
 80033c2:	3b01      	subs	r3, #1
 80033c4:	041b      	lsls	r3, r3, #16
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033cc:	061b      	lsls	r3, r3, #24
 80033ce:	491b      	ldr	r1, [pc, #108]	@ (800343c <HAL_RCC_OscConfig+0x470>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003444 <HAL_RCC_OscConfig+0x478>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033da:	f7fe fe27 	bl	800202c <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e2:	f7fe fe23 	bl	800202c <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e05c      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f4:	4b11      	ldr	r3, [pc, #68]	@ (800343c <HAL_RCC_OscConfig+0x470>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f0      	beq.n	80033e2 <HAL_RCC_OscConfig+0x416>
 8003400:	e054      	b.n	80034ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003402:	4b10      	ldr	r3, [pc, #64]	@ (8003444 <HAL_RCC_OscConfig+0x478>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7fe fe10 	bl	800202c <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003410:	f7fe fe0c 	bl	800202c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e045      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003422:	4b06      	ldr	r3, [pc, #24]	@ (800343c <HAL_RCC_OscConfig+0x470>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x444>
 800342e:	e03d      	b.n	80034ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d107      	bne.n	8003448 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e038      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
 800343c:	40023800 	.word	0x40023800
 8003440:	40007000 	.word	0x40007000
 8003444:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003448:	4b1b      	ldr	r3, [pc, #108]	@ (80034b8 <HAL_RCC_OscConfig+0x4ec>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d028      	beq.n	80034a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003460:	429a      	cmp	r2, r3
 8003462:	d121      	bne.n	80034a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346e:	429a      	cmp	r2, r3
 8003470:	d11a      	bne.n	80034a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003478:	4013      	ands	r3, r2
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800347e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003480:	4293      	cmp	r3, r2
 8003482:	d111      	bne.n	80034a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348e:	085b      	lsrs	r3, r3, #1
 8003490:	3b01      	subs	r3, #1
 8003492:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003494:	429a      	cmp	r2, r3
 8003496:	d107      	bne.n	80034a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d001      	beq.n	80034ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40023800 	.word	0x40023800

080034bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0cc      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034d0:	4b68      	ldr	r3, [pc, #416]	@ (8003674 <HAL_RCC_ClockConfig+0x1b8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d90c      	bls.n	80034f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034de:	4b65      	ldr	r3, [pc, #404]	@ (8003674 <HAL_RCC_ClockConfig+0x1b8>)
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e6:	4b63      	ldr	r3, [pc, #396]	@ (8003674 <HAL_RCC_ClockConfig+0x1b8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0b8      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d020      	beq.n	8003546 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003510:	4b59      	ldr	r3, [pc, #356]	@ (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	4a58      	ldr	r2, [pc, #352]	@ (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800351a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003528:	4b53      	ldr	r3, [pc, #332]	@ (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	4a52      	ldr	r2, [pc, #328]	@ (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003532:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003534:	4b50      	ldr	r3, [pc, #320]	@ (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	494d      	ldr	r1, [pc, #308]	@ (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d044      	beq.n	80035dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d107      	bne.n	800356a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355a:	4b47      	ldr	r3, [pc, #284]	@ (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d119      	bne.n	800359a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e07f      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d003      	beq.n	800357a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003576:	2b03      	cmp	r3, #3
 8003578:	d107      	bne.n	800358a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357a:	4b3f      	ldr	r3, [pc, #252]	@ (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e06f      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358a:	4b3b      	ldr	r3, [pc, #236]	@ (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e067      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800359a:	4b37      	ldr	r3, [pc, #220]	@ (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f023 0203 	bic.w	r2, r3, #3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	4934      	ldr	r1, [pc, #208]	@ (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035ac:	f7fe fd3e 	bl	800202c <HAL_GetTick>
 80035b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b2:	e00a      	b.n	80035ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b4:	f7fe fd3a 	bl	800202c <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e04f      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 020c 	and.w	r2, r3, #12
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	429a      	cmp	r2, r3
 80035da:	d1eb      	bne.n	80035b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035dc:	4b25      	ldr	r3, [pc, #148]	@ (8003674 <HAL_RCC_ClockConfig+0x1b8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d20c      	bcs.n	8003604 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ea:	4b22      	ldr	r3, [pc, #136]	@ (8003674 <HAL_RCC_ClockConfig+0x1b8>)
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f2:	4b20      	ldr	r3, [pc, #128]	@ (8003674 <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d001      	beq.n	8003604 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e032      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d008      	beq.n	8003622 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003610:	4b19      	ldr	r3, [pc, #100]	@ (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	4916      	ldr	r1, [pc, #88]	@ (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	4313      	orrs	r3, r2
 8003620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d009      	beq.n	8003642 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800362e:	4b12      	ldr	r3, [pc, #72]	@ (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	490e      	ldr	r1, [pc, #56]	@ (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	4313      	orrs	r3, r2
 8003640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003642:	f000 f821 	bl	8003688 <HAL_RCC_GetSysClockFreq>
 8003646:	4602      	mov	r2, r0
 8003648:	4b0b      	ldr	r3, [pc, #44]	@ (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	490a      	ldr	r1, [pc, #40]	@ (800367c <HAL_RCC_ClockConfig+0x1c0>)
 8003654:	5ccb      	ldrb	r3, [r1, r3]
 8003656:	fa22 f303 	lsr.w	r3, r2, r3
 800365a:	4a09      	ldr	r2, [pc, #36]	@ (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 800365c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800365e:	4b09      	ldr	r3, [pc, #36]	@ (8003684 <HAL_RCC_ClockConfig+0x1c8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe fc9e 	bl	8001fa4 <HAL_InitTick>

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40023c00 	.word	0x40023c00
 8003678:	40023800 	.word	0x40023800
 800367c:	08006000 	.word	0x08006000
 8003680:	20000000 	.word	0x20000000
 8003684:	20000004 	.word	0x20000004

08003688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800368c:	b094      	sub	sp, #80	@ 0x50
 800368e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	647b      	str	r3, [r7, #68]	@ 0x44
 8003694:	2300      	movs	r3, #0
 8003696:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003698:	2300      	movs	r3, #0
 800369a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036a0:	4b79      	ldr	r3, [pc, #484]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x200>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 030c 	and.w	r3, r3, #12
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d00d      	beq.n	80036c8 <HAL_RCC_GetSysClockFreq+0x40>
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	f200 80e1 	bhi.w	8003874 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <HAL_RCC_GetSysClockFreq+0x34>
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d003      	beq.n	80036c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80036ba:	e0db      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036bc:	4b73      	ldr	r3, [pc, #460]	@ (800388c <HAL_RCC_GetSysClockFreq+0x204>)
 80036be:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80036c0:	e0db      	b.n	800387a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036c2:	4b73      	ldr	r3, [pc, #460]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x208>)
 80036c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036c6:	e0d8      	b.n	800387a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x200>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x200>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d063      	beq.n	80037a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036de:	4b6a      	ldr	r3, [pc, #424]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x200>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	099b      	lsrs	r3, r3, #6
 80036e4:	2200      	movs	r2, #0
 80036e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80036ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80036f2:	2300      	movs	r3, #0
 80036f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80036f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80036fa:	4622      	mov	r2, r4
 80036fc:	462b      	mov	r3, r5
 80036fe:	f04f 0000 	mov.w	r0, #0
 8003702:	f04f 0100 	mov.w	r1, #0
 8003706:	0159      	lsls	r1, r3, #5
 8003708:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800370c:	0150      	lsls	r0, r2, #5
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4621      	mov	r1, r4
 8003714:	1a51      	subs	r1, r2, r1
 8003716:	6139      	str	r1, [r7, #16]
 8003718:	4629      	mov	r1, r5
 800371a:	eb63 0301 	sbc.w	r3, r3, r1
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800372c:	4659      	mov	r1, fp
 800372e:	018b      	lsls	r3, r1, #6
 8003730:	4651      	mov	r1, sl
 8003732:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003736:	4651      	mov	r1, sl
 8003738:	018a      	lsls	r2, r1, #6
 800373a:	4651      	mov	r1, sl
 800373c:	ebb2 0801 	subs.w	r8, r2, r1
 8003740:	4659      	mov	r1, fp
 8003742:	eb63 0901 	sbc.w	r9, r3, r1
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	f04f 0300 	mov.w	r3, #0
 800374e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003752:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003756:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800375a:	4690      	mov	r8, r2
 800375c:	4699      	mov	r9, r3
 800375e:	4623      	mov	r3, r4
 8003760:	eb18 0303 	adds.w	r3, r8, r3
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	462b      	mov	r3, r5
 8003768:	eb49 0303 	adc.w	r3, r9, r3
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800377a:	4629      	mov	r1, r5
 800377c:	024b      	lsls	r3, r1, #9
 800377e:	4621      	mov	r1, r4
 8003780:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003784:	4621      	mov	r1, r4
 8003786:	024a      	lsls	r2, r1, #9
 8003788:	4610      	mov	r0, r2
 800378a:	4619      	mov	r1, r3
 800378c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800378e:	2200      	movs	r2, #0
 8003790:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003792:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003794:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003798:	f7fc fd82 	bl	80002a0 <__aeabi_uldivmod>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4613      	mov	r3, r2
 80037a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037a4:	e058      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a6:	4b38      	ldr	r3, [pc, #224]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	099b      	lsrs	r3, r3, #6
 80037ac:	2200      	movs	r2, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	4611      	mov	r1, r2
 80037b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037b6:	623b      	str	r3, [r7, #32]
 80037b8:	2300      	movs	r3, #0
 80037ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80037bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037c0:	4642      	mov	r2, r8
 80037c2:	464b      	mov	r3, r9
 80037c4:	f04f 0000 	mov.w	r0, #0
 80037c8:	f04f 0100 	mov.w	r1, #0
 80037cc:	0159      	lsls	r1, r3, #5
 80037ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d2:	0150      	lsls	r0, r2, #5
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4641      	mov	r1, r8
 80037da:	ebb2 0a01 	subs.w	sl, r2, r1
 80037de:	4649      	mov	r1, r9
 80037e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037f8:	ebb2 040a 	subs.w	r4, r2, sl
 80037fc:	eb63 050b 	sbc.w	r5, r3, fp
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	00eb      	lsls	r3, r5, #3
 800380a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800380e:	00e2      	lsls	r2, r4, #3
 8003810:	4614      	mov	r4, r2
 8003812:	461d      	mov	r5, r3
 8003814:	4643      	mov	r3, r8
 8003816:	18e3      	adds	r3, r4, r3
 8003818:	603b      	str	r3, [r7, #0]
 800381a:	464b      	mov	r3, r9
 800381c:	eb45 0303 	adc.w	r3, r5, r3
 8003820:	607b      	str	r3, [r7, #4]
 8003822:	f04f 0200 	mov.w	r2, #0
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800382e:	4629      	mov	r1, r5
 8003830:	028b      	lsls	r3, r1, #10
 8003832:	4621      	mov	r1, r4
 8003834:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003838:	4621      	mov	r1, r4
 800383a:	028a      	lsls	r2, r1, #10
 800383c:	4610      	mov	r0, r2
 800383e:	4619      	mov	r1, r3
 8003840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003842:	2200      	movs	r2, #0
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	61fa      	str	r2, [r7, #28]
 8003848:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800384c:	f7fc fd28 	bl	80002a0 <__aeabi_uldivmod>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4613      	mov	r3, r2
 8003856:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003858:	4b0b      	ldr	r3, [pc, #44]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x200>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	0c1b      	lsrs	r3, r3, #16
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	3301      	adds	r3, #1
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003868:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800386a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800386c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003870:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003872:	e002      	b.n	800387a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003874:	4b05      	ldr	r3, [pc, #20]	@ (800388c <HAL_RCC_GetSysClockFreq+0x204>)
 8003876:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003878:	bf00      	nop
    }
  }
  return sysclockfreq;
 800387a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800387c:	4618      	mov	r0, r3
 800387e:	3750      	adds	r7, #80	@ 0x50
 8003880:	46bd      	mov	sp, r7
 8003882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003886:	bf00      	nop
 8003888:	40023800 	.word	0x40023800
 800388c:	00f42400 	.word	0x00f42400
 8003890:	007a1200 	.word	0x007a1200

08003894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003898:	4b03      	ldr	r3, [pc, #12]	@ (80038a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800389a:	681b      	ldr	r3, [r3, #0]
}
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	20000000 	.word	0x20000000

080038ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038b0:	f7ff fff0 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4b05      	ldr	r3, [pc, #20]	@ (80038cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	0a9b      	lsrs	r3, r3, #10
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	4903      	ldr	r1, [pc, #12]	@ (80038d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c2:	5ccb      	ldrb	r3, [r1, r3]
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40023800 	.word	0x40023800
 80038d0:	08006010 	.word	0x08006010

080038d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038d8:	f7ff ffdc 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80038dc:	4602      	mov	r2, r0
 80038de:	4b05      	ldr	r3, [pc, #20]	@ (80038f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	0b5b      	lsrs	r3, r3, #13
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	4903      	ldr	r1, [pc, #12]	@ (80038f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ea:	5ccb      	ldrb	r3, [r1, r3]
 80038ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40023800 	.word	0x40023800
 80038f8:	08006010 	.word	0x08006010

080038fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e042      	b.n	8003994 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fe f95c 	bl	8001be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2224      	movs	r2, #36	@ 0x24
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800393e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fdff 	bl	8004544 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08a      	sub	sp, #40	@ 0x28
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	4613      	mov	r3, r2
 80039aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d175      	bne.n	8003aa8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <HAL_UART_Transmit+0x2c>
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e06e      	b.n	8003aaa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2221      	movs	r2, #33	@ 0x21
 80039d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039da:	f7fe fb27 	bl	800202c <HAL_GetTick>
 80039de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	88fa      	ldrh	r2, [r7, #6]
 80039e4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	88fa      	ldrh	r2, [r7, #6]
 80039ea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039f4:	d108      	bne.n	8003a08 <HAL_UART_Transmit+0x6c>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d104      	bne.n	8003a08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	61bb      	str	r3, [r7, #24]
 8003a06:	e003      	b.n	8003a10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a10:	e02e      	b.n	8003a70 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2180      	movs	r1, #128	@ 0x80
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 fb9b 	bl	8004158 <UART_WaitOnFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e03a      	b.n	8003aaa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10b      	bne.n	8003a52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	3302      	adds	r3, #2
 8003a4e:	61bb      	str	r3, [r7, #24]
 8003a50:	e007      	b.n	8003a62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	781a      	ldrb	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1cb      	bne.n	8003a12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2200      	movs	r2, #0
 8003a82:	2140      	movs	r1, #64	@ 0x40
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 fb67 	bl	8004158 <UART_WaitOnFlagUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e006      	b.n	8003aaa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e000      	b.n	8003aaa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003aa8:	2302      	movs	r3, #2
  }
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b08a      	sub	sp, #40	@ 0x28
 8003ab6:	af02      	add	r7, sp, #8
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	603b      	str	r3, [r7, #0]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	f040 8081 	bne.w	8003bd6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <HAL_UART_Receive+0x2e>
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e079      	b.n	8003bd8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2222      	movs	r2, #34	@ 0x22
 8003aee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003af8:	f7fe fa98 	bl	800202c <HAL_GetTick>
 8003afc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	88fa      	ldrh	r2, [r7, #6]
 8003b02:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	88fa      	ldrh	r2, [r7, #6]
 8003b08:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b12:	d108      	bne.n	8003b26 <HAL_UART_Receive+0x74>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d104      	bne.n	8003b26 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	61bb      	str	r3, [r7, #24]
 8003b24:	e003      	b.n	8003b2e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003b2e:	e047      	b.n	8003bc0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2200      	movs	r2, #0
 8003b38:	2120      	movs	r1, #32
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 fb0c 	bl	8004158 <UART_WaitOnFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e042      	b.n	8003bd8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10c      	bne.n	8003b72 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	3302      	adds	r3, #2
 8003b6e:	61bb      	str	r3, [r7, #24]
 8003b70:	e01f      	b.n	8003bb2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b7a:	d007      	beq.n	8003b8c <HAL_UART_Receive+0xda>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10a      	bne.n	8003b9a <HAL_UART_Receive+0xe8>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d106      	bne.n	8003b9a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	701a      	strb	r2, [r3, #0]
 8003b98:	e008      	b.n	8003bac <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1b2      	bne.n	8003b30 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e000      	b.n	8003bd8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003bd6:	2302      	movs	r3, #2
  }
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3720      	adds	r7, #32
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b0ba      	sub	sp, #232	@ 0xe8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10f      	bne.n	8003c46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c2a:	f003 0320 	and.w	r3, r3, #32
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d009      	beq.n	8003c46 <HAL_UART_IRQHandler+0x66>
 8003c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fbc2 	bl	80043c8 <UART_Receive_IT>
      return;
 8003c44:	e25b      	b.n	80040fe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 80de 	beq.w	8003e0c <HAL_UART_IRQHandler+0x22c>
 8003c50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d106      	bne.n	8003c6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c60:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80d1 	beq.w	8003e0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00b      	beq.n	8003c8e <HAL_UART_IRQHandler+0xae>
 8003c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c86:	f043 0201 	orr.w	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <HAL_UART_IRQHandler+0xd2>
 8003c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d005      	beq.n	8003cb2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003caa:	f043 0202 	orr.w	r2, r3, #2
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00b      	beq.n	8003cd6 <HAL_UART_IRQHandler+0xf6>
 8003cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cce:	f043 0204 	orr.w	r2, r3, #4
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d011      	beq.n	8003d06 <HAL_UART_IRQHandler+0x126>
 8003ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d105      	bne.n	8003cfa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfe:	f043 0208 	orr.w	r2, r3, #8
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 81f2 	beq.w	80040f4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_UART_IRQHandler+0x14e>
 8003d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fb4d 	bl	80043c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d38:	2b40      	cmp	r3, #64	@ 0x40
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2301      	moveq	r3, #1
 8003d3e:	2300      	movne	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d103      	bne.n	8003d5a <HAL_UART_IRQHandler+0x17a>
 8003d52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d04f      	beq.n	8003dfa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fa55 	bl	800420a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6a:	2b40      	cmp	r3, #64	@ 0x40
 8003d6c:	d141      	bne.n	8003df2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3314      	adds	r3, #20
 8003d74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3314      	adds	r3, #20
 8003d96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d9a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003da6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003daa:	e841 2300 	strex	r3, r2, [r1]
 8003dae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003db2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1d9      	bne.n	8003d6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d013      	beq.n	8003dea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc6:	4a7e      	ldr	r2, [pc, #504]	@ (8003fc0 <HAL_UART_IRQHandler+0x3e0>)
 8003dc8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fe fadd 	bl	800238e <HAL_DMA_Abort_IT>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d016      	beq.n	8003e08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003de4:	4610      	mov	r0, r2
 8003de6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de8:	e00e      	b.n	8003e08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f99e 	bl	800412c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df0:	e00a      	b.n	8003e08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f99a 	bl	800412c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df8:	e006      	b.n	8003e08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f996 	bl	800412c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003e06:	e175      	b.n	80040f4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e08:	bf00      	nop
    return;
 8003e0a:	e173      	b.n	80040f4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	f040 814f 	bne.w	80040b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e1a:	f003 0310 	and.w	r3, r3, #16
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 8148 	beq.w	80040b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 8141 	beq.w	80040b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e32:	2300      	movs	r3, #0
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e52:	2b40      	cmp	r3, #64	@ 0x40
 8003e54:	f040 80b6 	bne.w	8003fc4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 8145 	beq.w	80040f8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e76:	429a      	cmp	r2, r3
 8003e78:	f080 813e 	bcs.w	80040f8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e82:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e8e:	f000 8088 	beq.w	8003fa2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	330c      	adds	r3, #12
 8003e98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ea0:	e853 3f00 	ldrex	r3, [r3]
 8003ea4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ea8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003eac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003eb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	330c      	adds	r3, #12
 8003eba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003ebe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ec2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003eca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ece:	e841 2300 	strex	r3, r2, [r1]
 8003ed2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ed6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1d9      	bne.n	8003e92 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	3314      	adds	r3, #20
 8003ee4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ee8:	e853 3f00 	ldrex	r3, [r3]
 8003eec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003eee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ef0:	f023 0301 	bic.w	r3, r3, #1
 8003ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3314      	adds	r3, #20
 8003efe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f02:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f06:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e1      	bne.n	8003ede <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3314      	adds	r3, #20
 8003f20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3314      	adds	r3, #20
 8003f3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e3      	bne.n	8003f1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	330c      	adds	r3, #12
 8003f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f6a:	e853 3f00 	ldrex	r3, [r3]
 8003f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f72:	f023 0310 	bic.w	r3, r3, #16
 8003f76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	330c      	adds	r3, #12
 8003f80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003f84:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f86:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f8c:	e841 2300 	strex	r3, r2, [r1]
 8003f90:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e3      	bne.n	8003f60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fe f986 	bl	80022ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f8c1 	bl	8004140 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fbe:	e09b      	b.n	80040f8 <HAL_UART_IRQHandler+0x518>
 8003fc0:	080042d1 	.word	0x080042d1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 808e 	beq.w	80040fc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003fe0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 8089 	beq.w	80040fc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	330c      	adds	r3, #12
 8003ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ffc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004000:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	330c      	adds	r3, #12
 800400a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800400e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004010:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004014:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800401c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e3      	bne.n	8003fea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3314      	adds	r3, #20
 8004028:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	623b      	str	r3, [r7, #32]
   return(result);
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	f023 0301 	bic.w	r3, r3, #1
 8004038:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3314      	adds	r3, #20
 8004042:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004046:	633a      	str	r2, [r7, #48]	@ 0x30
 8004048:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800404c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e3      	bne.n	8004022 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2220      	movs	r2, #32
 800405e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	330c      	adds	r3, #12
 800406e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	e853 3f00 	ldrex	r3, [r3]
 8004076:	60fb      	str	r3, [r7, #12]
   return(result);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0310 	bic.w	r3, r3, #16
 800407e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	330c      	adds	r3, #12
 8004088:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800408c:	61fa      	str	r2, [r7, #28]
 800408e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	69b9      	ldr	r1, [r7, #24]
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	617b      	str	r3, [r7, #20]
   return(result);
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e3      	bne.n	8004068 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040aa:	4619      	mov	r1, r3
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f847 	bl	8004140 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040b2:	e023      	b.n	80040fc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d009      	beq.n	80040d4 <HAL_UART_IRQHandler+0x4f4>
 80040c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f913 	bl	80042f8 <UART_Transmit_IT>
    return;
 80040d2:	e014      	b.n	80040fe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00e      	beq.n	80040fe <HAL_UART_IRQHandler+0x51e>
 80040e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d008      	beq.n	80040fe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f953 	bl	8004398 <UART_EndTransmit_IT>
    return;
 80040f2:	e004      	b.n	80040fe <HAL_UART_IRQHandler+0x51e>
    return;
 80040f4:	bf00      	nop
 80040f6:	e002      	b.n	80040fe <HAL_UART_IRQHandler+0x51e>
      return;
 80040f8:	bf00      	nop
 80040fa:	e000      	b.n	80040fe <HAL_UART_IRQHandler+0x51e>
      return;
 80040fc:	bf00      	nop
  }
}
 80040fe:	37e8      	adds	r7, #232	@ 0xe8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	4613      	mov	r3, r2
 8004166:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004168:	e03b      	b.n	80041e2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004170:	d037      	beq.n	80041e2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004172:	f7fd ff5b 	bl	800202c <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	6a3a      	ldr	r2, [r7, #32]
 800417e:	429a      	cmp	r2, r3
 8004180:	d302      	bcc.n	8004188 <UART_WaitOnFlagUntilTimeout+0x30>
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e03a      	b.n	8004202 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b00      	cmp	r3, #0
 8004198:	d023      	beq.n	80041e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b80      	cmp	r3, #128	@ 0x80
 800419e:	d020      	beq.n	80041e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b40      	cmp	r3, #64	@ 0x40
 80041a4:	d01d      	beq.n	80041e2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d116      	bne.n	80041e2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f81d 	bl	800420a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2208      	movs	r2, #8
 80041d4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e00f      	b.n	8004202 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	4013      	ands	r3, r2
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	bf0c      	ite	eq
 80041f2:	2301      	moveq	r3, #1
 80041f4:	2300      	movne	r3, #0
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	461a      	mov	r2, r3
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d0b4      	beq.n	800416a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800420a:	b480      	push	{r7}
 800420c:	b095      	sub	sp, #84	@ 0x54
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	330c      	adds	r3, #12
 8004218:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800421c:	e853 3f00 	ldrex	r3, [r3]
 8004220:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004224:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004228:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	330c      	adds	r3, #12
 8004230:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004232:	643a      	str	r2, [r7, #64]	@ 0x40
 8004234:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004236:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004238:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800423a:	e841 2300 	strex	r3, r2, [r1]
 800423e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1e5      	bne.n	8004212 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3314      	adds	r3, #20
 800424c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	61fb      	str	r3, [r7, #28]
   return(result);
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	f023 0301 	bic.w	r3, r3, #1
 800425c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3314      	adds	r3, #20
 8004264:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004266:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004268:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800426c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800426e:	e841 2300 	strex	r3, r2, [r1]
 8004272:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1e5      	bne.n	8004246 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427e:	2b01      	cmp	r3, #1
 8004280:	d119      	bne.n	80042b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	330c      	adds	r3, #12
 8004288:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	e853 3f00 	ldrex	r3, [r3]
 8004290:	60bb      	str	r3, [r7, #8]
   return(result);
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f023 0310 	bic.w	r3, r3, #16
 8004298:	647b      	str	r3, [r7, #68]	@ 0x44
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	330c      	adds	r3, #12
 80042a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042a2:	61ba      	str	r2, [r7, #24]
 80042a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a6:	6979      	ldr	r1, [r7, #20]
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	e841 2300 	strex	r3, r2, [r1]
 80042ae:	613b      	str	r3, [r7, #16]
   return(result);
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1e5      	bne.n	8004282 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80042c4:	bf00      	nop
 80042c6:	3754      	adds	r7, #84	@ 0x54
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f7ff ff1e 	bl	800412c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042f0:	bf00      	nop
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b21      	cmp	r3, #33	@ 0x21
 800430a:	d13e      	bne.n	800438a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004314:	d114      	bne.n	8004340 <UART_Transmit_IT+0x48>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d110      	bne.n	8004340 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	461a      	mov	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004332:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	1c9a      	adds	r2, r3, #2
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	621a      	str	r2, [r3, #32]
 800433e:	e008      	b.n	8004352 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	1c59      	adds	r1, r3, #1
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6211      	str	r1, [r2, #32]
 800434a:	781a      	ldrb	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29b      	uxth	r3, r3
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	4619      	mov	r1, r3
 8004360:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10f      	bne.n	8004386 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004374:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004384:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	e000      	b.n	800438c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800438a:	2302      	movs	r3, #2
  }
}
 800438c:	4618      	mov	r0, r3
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff fea3 	bl	8004104 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08c      	sub	sp, #48	@ 0x30
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b22      	cmp	r3, #34	@ 0x22
 80043da:	f040 80ae 	bne.w	800453a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043e6:	d117      	bne.n	8004418 <UART_Receive_IT+0x50>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d113      	bne.n	8004418 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	b29b      	uxth	r3, r3
 8004402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004406:	b29a      	uxth	r2, r3
 8004408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800440a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004410:	1c9a      	adds	r2, r3, #2
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	629a      	str	r2, [r3, #40]	@ 0x28
 8004416:	e026      	b.n	8004466 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800441c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800441e:	2300      	movs	r3, #0
 8004420:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800442a:	d007      	beq.n	800443c <UART_Receive_IT+0x74>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10a      	bne.n	800444a <UART_Receive_IT+0x82>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d106      	bne.n	800444a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	b2da      	uxtb	r2, r3
 8004444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004446:	701a      	strb	r2, [r3, #0]
 8004448:	e008      	b.n	800445c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004456:	b2da      	uxtb	r2, r3
 8004458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800445a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800446a:	b29b      	uxth	r3, r3
 800446c:	3b01      	subs	r3, #1
 800446e:	b29b      	uxth	r3, r3
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	4619      	mov	r1, r3
 8004474:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004476:	2b00      	cmp	r3, #0
 8004478:	d15d      	bne.n	8004536 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0220 	bic.w	r2, r2, #32
 8004488:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004498:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695a      	ldr	r2, [r3, #20]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0201 	bic.w	r2, r2, #1
 80044a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d135      	bne.n	800452c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	330c      	adds	r3, #12
 80044cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	e853 3f00 	ldrex	r3, [r3]
 80044d4:	613b      	str	r3, [r7, #16]
   return(result);
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f023 0310 	bic.w	r3, r3, #16
 80044dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	330c      	adds	r3, #12
 80044e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044e6:	623a      	str	r2, [r7, #32]
 80044e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ea:	69f9      	ldr	r1, [r7, #28]
 80044ec:	6a3a      	ldr	r2, [r7, #32]
 80044ee:	e841 2300 	strex	r3, r2, [r1]
 80044f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1e5      	bne.n	80044c6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0310 	and.w	r3, r3, #16
 8004504:	2b10      	cmp	r3, #16
 8004506:	d10a      	bne.n	800451e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004522:	4619      	mov	r1, r3
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7ff fe0b 	bl	8004140 <HAL_UARTEx_RxEventCallback>
 800452a:	e002      	b.n	8004532 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7ff fdf3 	bl	8004118 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	e002      	b.n	800453c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	e000      	b.n	800453c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800453a:	2302      	movs	r3, #2
  }
}
 800453c:	4618      	mov	r0, r3
 800453e:	3730      	adds	r7, #48	@ 0x30
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004548:	b0c0      	sub	sp, #256	@ 0x100
 800454a:	af00      	add	r7, sp, #0
 800454c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800455c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004560:	68d9      	ldr	r1, [r3, #12]
 8004562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	ea40 0301 	orr.w	r3, r0, r1
 800456c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800456e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	431a      	orrs	r2, r3
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	431a      	orrs	r2, r3
 8004584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800459c:	f021 010c 	bic.w	r1, r1, #12
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80045aa:	430b      	orrs	r3, r1
 80045ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045be:	6999      	ldr	r1, [r3, #24]
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	ea40 0301 	orr.w	r3, r0, r1
 80045ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	4b8f      	ldr	r3, [pc, #572]	@ (8004810 <UART_SetConfig+0x2cc>)
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d005      	beq.n	80045e4 <UART_SetConfig+0xa0>
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	4b8d      	ldr	r3, [pc, #564]	@ (8004814 <UART_SetConfig+0x2d0>)
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d104      	bne.n	80045ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045e4:	f7ff f976 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 80045e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80045ec:	e003      	b.n	80045f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045ee:	f7ff f95d 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 80045f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004600:	f040 810c 	bne.w	800481c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004608:	2200      	movs	r2, #0
 800460a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800460e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004612:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004616:	4622      	mov	r2, r4
 8004618:	462b      	mov	r3, r5
 800461a:	1891      	adds	r1, r2, r2
 800461c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800461e:	415b      	adcs	r3, r3
 8004620:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004622:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004626:	4621      	mov	r1, r4
 8004628:	eb12 0801 	adds.w	r8, r2, r1
 800462c:	4629      	mov	r1, r5
 800462e:	eb43 0901 	adc.w	r9, r3, r1
 8004632:	f04f 0200 	mov.w	r2, #0
 8004636:	f04f 0300 	mov.w	r3, #0
 800463a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800463e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004642:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004646:	4690      	mov	r8, r2
 8004648:	4699      	mov	r9, r3
 800464a:	4623      	mov	r3, r4
 800464c:	eb18 0303 	adds.w	r3, r8, r3
 8004650:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004654:	462b      	mov	r3, r5
 8004656:	eb49 0303 	adc.w	r3, r9, r3
 800465a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800465e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800466a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800466e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004672:	460b      	mov	r3, r1
 8004674:	18db      	adds	r3, r3, r3
 8004676:	653b      	str	r3, [r7, #80]	@ 0x50
 8004678:	4613      	mov	r3, r2
 800467a:	eb42 0303 	adc.w	r3, r2, r3
 800467e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004680:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004684:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004688:	f7fb fe0a 	bl	80002a0 <__aeabi_uldivmod>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4b61      	ldr	r3, [pc, #388]	@ (8004818 <UART_SetConfig+0x2d4>)
 8004692:	fba3 2302 	umull	r2, r3, r3, r2
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	011c      	lsls	r4, r3, #4
 800469a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800469e:	2200      	movs	r2, #0
 80046a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80046a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80046ac:	4642      	mov	r2, r8
 80046ae:	464b      	mov	r3, r9
 80046b0:	1891      	adds	r1, r2, r2
 80046b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80046b4:	415b      	adcs	r3, r3
 80046b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046bc:	4641      	mov	r1, r8
 80046be:	eb12 0a01 	adds.w	sl, r2, r1
 80046c2:	4649      	mov	r1, r9
 80046c4:	eb43 0b01 	adc.w	fp, r3, r1
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046dc:	4692      	mov	sl, r2
 80046de:	469b      	mov	fp, r3
 80046e0:	4643      	mov	r3, r8
 80046e2:	eb1a 0303 	adds.w	r3, sl, r3
 80046e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046ea:	464b      	mov	r3, r9
 80046ec:	eb4b 0303 	adc.w	r3, fp, r3
 80046f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004700:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004704:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004708:	460b      	mov	r3, r1
 800470a:	18db      	adds	r3, r3, r3
 800470c:	643b      	str	r3, [r7, #64]	@ 0x40
 800470e:	4613      	mov	r3, r2
 8004710:	eb42 0303 	adc.w	r3, r2, r3
 8004714:	647b      	str	r3, [r7, #68]	@ 0x44
 8004716:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800471a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800471e:	f7fb fdbf 	bl	80002a0 <__aeabi_uldivmod>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	4611      	mov	r1, r2
 8004728:	4b3b      	ldr	r3, [pc, #236]	@ (8004818 <UART_SetConfig+0x2d4>)
 800472a:	fba3 2301 	umull	r2, r3, r3, r1
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	2264      	movs	r2, #100	@ 0x64
 8004732:	fb02 f303 	mul.w	r3, r2, r3
 8004736:	1acb      	subs	r3, r1, r3
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800473e:	4b36      	ldr	r3, [pc, #216]	@ (8004818 <UART_SetConfig+0x2d4>)
 8004740:	fba3 2302 	umull	r2, r3, r3, r2
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800474c:	441c      	add	r4, r3
 800474e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004752:	2200      	movs	r2, #0
 8004754:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004758:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800475c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004760:	4642      	mov	r2, r8
 8004762:	464b      	mov	r3, r9
 8004764:	1891      	adds	r1, r2, r2
 8004766:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004768:	415b      	adcs	r3, r3
 800476a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800476c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004770:	4641      	mov	r1, r8
 8004772:	1851      	adds	r1, r2, r1
 8004774:	6339      	str	r1, [r7, #48]	@ 0x30
 8004776:	4649      	mov	r1, r9
 8004778:	414b      	adcs	r3, r1
 800477a:	637b      	str	r3, [r7, #52]	@ 0x34
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004788:	4659      	mov	r1, fp
 800478a:	00cb      	lsls	r3, r1, #3
 800478c:	4651      	mov	r1, sl
 800478e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004792:	4651      	mov	r1, sl
 8004794:	00ca      	lsls	r2, r1, #3
 8004796:	4610      	mov	r0, r2
 8004798:	4619      	mov	r1, r3
 800479a:	4603      	mov	r3, r0
 800479c:	4642      	mov	r2, r8
 800479e:	189b      	adds	r3, r3, r2
 80047a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047a4:	464b      	mov	r3, r9
 80047a6:	460a      	mov	r2, r1
 80047a8:	eb42 0303 	adc.w	r3, r2, r3
 80047ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80047c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047c4:	460b      	mov	r3, r1
 80047c6:	18db      	adds	r3, r3, r3
 80047c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047ca:	4613      	mov	r3, r2
 80047cc:	eb42 0303 	adc.w	r3, r2, r3
 80047d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80047da:	f7fb fd61 	bl	80002a0 <__aeabi_uldivmod>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004818 <UART_SetConfig+0x2d4>)
 80047e4:	fba3 1302 	umull	r1, r3, r3, r2
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	2164      	movs	r1, #100	@ 0x64
 80047ec:	fb01 f303 	mul.w	r3, r1, r3
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	3332      	adds	r3, #50	@ 0x32
 80047f6:	4a08      	ldr	r2, [pc, #32]	@ (8004818 <UART_SetConfig+0x2d4>)
 80047f8:	fba2 2303 	umull	r2, r3, r2, r3
 80047fc:	095b      	lsrs	r3, r3, #5
 80047fe:	f003 0207 	and.w	r2, r3, #7
 8004802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4422      	add	r2, r4
 800480a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800480c:	e106      	b.n	8004a1c <UART_SetConfig+0x4d8>
 800480e:	bf00      	nop
 8004810:	40011000 	.word	0x40011000
 8004814:	40011400 	.word	0x40011400
 8004818:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800481c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004820:	2200      	movs	r2, #0
 8004822:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004826:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800482a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800482e:	4642      	mov	r2, r8
 8004830:	464b      	mov	r3, r9
 8004832:	1891      	adds	r1, r2, r2
 8004834:	6239      	str	r1, [r7, #32]
 8004836:	415b      	adcs	r3, r3
 8004838:	627b      	str	r3, [r7, #36]	@ 0x24
 800483a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800483e:	4641      	mov	r1, r8
 8004840:	1854      	adds	r4, r2, r1
 8004842:	4649      	mov	r1, r9
 8004844:	eb43 0501 	adc.w	r5, r3, r1
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	00eb      	lsls	r3, r5, #3
 8004852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004856:	00e2      	lsls	r2, r4, #3
 8004858:	4614      	mov	r4, r2
 800485a:	461d      	mov	r5, r3
 800485c:	4643      	mov	r3, r8
 800485e:	18e3      	adds	r3, r4, r3
 8004860:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004864:	464b      	mov	r3, r9
 8004866:	eb45 0303 	adc.w	r3, r5, r3
 800486a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800487a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	f04f 0300 	mov.w	r3, #0
 8004886:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800488a:	4629      	mov	r1, r5
 800488c:	008b      	lsls	r3, r1, #2
 800488e:	4621      	mov	r1, r4
 8004890:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004894:	4621      	mov	r1, r4
 8004896:	008a      	lsls	r2, r1, #2
 8004898:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800489c:	f7fb fd00 	bl	80002a0 <__aeabi_uldivmod>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	4b60      	ldr	r3, [pc, #384]	@ (8004a28 <UART_SetConfig+0x4e4>)
 80048a6:	fba3 2302 	umull	r2, r3, r3, r2
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	011c      	lsls	r4, r3, #4
 80048ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048b2:	2200      	movs	r2, #0
 80048b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80048c0:	4642      	mov	r2, r8
 80048c2:	464b      	mov	r3, r9
 80048c4:	1891      	adds	r1, r2, r2
 80048c6:	61b9      	str	r1, [r7, #24]
 80048c8:	415b      	adcs	r3, r3
 80048ca:	61fb      	str	r3, [r7, #28]
 80048cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048d0:	4641      	mov	r1, r8
 80048d2:	1851      	adds	r1, r2, r1
 80048d4:	6139      	str	r1, [r7, #16]
 80048d6:	4649      	mov	r1, r9
 80048d8:	414b      	adcs	r3, r1
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	f04f 0300 	mov.w	r3, #0
 80048e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048e8:	4659      	mov	r1, fp
 80048ea:	00cb      	lsls	r3, r1, #3
 80048ec:	4651      	mov	r1, sl
 80048ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048f2:	4651      	mov	r1, sl
 80048f4:	00ca      	lsls	r2, r1, #3
 80048f6:	4610      	mov	r0, r2
 80048f8:	4619      	mov	r1, r3
 80048fa:	4603      	mov	r3, r0
 80048fc:	4642      	mov	r2, r8
 80048fe:	189b      	adds	r3, r3, r2
 8004900:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004904:	464b      	mov	r3, r9
 8004906:	460a      	mov	r2, r1
 8004908:	eb42 0303 	adc.w	r3, r2, r3
 800490c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	67bb      	str	r3, [r7, #120]	@ 0x78
 800491a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004928:	4649      	mov	r1, r9
 800492a:	008b      	lsls	r3, r1, #2
 800492c:	4641      	mov	r1, r8
 800492e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004932:	4641      	mov	r1, r8
 8004934:	008a      	lsls	r2, r1, #2
 8004936:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800493a:	f7fb fcb1 	bl	80002a0 <__aeabi_uldivmod>
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	4611      	mov	r1, r2
 8004944:	4b38      	ldr	r3, [pc, #224]	@ (8004a28 <UART_SetConfig+0x4e4>)
 8004946:	fba3 2301 	umull	r2, r3, r3, r1
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	2264      	movs	r2, #100	@ 0x64
 800494e:	fb02 f303 	mul.w	r3, r2, r3
 8004952:	1acb      	subs	r3, r1, r3
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	3332      	adds	r3, #50	@ 0x32
 8004958:	4a33      	ldr	r2, [pc, #204]	@ (8004a28 <UART_SetConfig+0x4e4>)
 800495a:	fba2 2303 	umull	r2, r3, r2, r3
 800495e:	095b      	lsrs	r3, r3, #5
 8004960:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004964:	441c      	add	r4, r3
 8004966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800496a:	2200      	movs	r2, #0
 800496c:	673b      	str	r3, [r7, #112]	@ 0x70
 800496e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004970:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004974:	4642      	mov	r2, r8
 8004976:	464b      	mov	r3, r9
 8004978:	1891      	adds	r1, r2, r2
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	415b      	adcs	r3, r3
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004984:	4641      	mov	r1, r8
 8004986:	1851      	adds	r1, r2, r1
 8004988:	6039      	str	r1, [r7, #0]
 800498a:	4649      	mov	r1, r9
 800498c:	414b      	adcs	r3, r1
 800498e:	607b      	str	r3, [r7, #4]
 8004990:	f04f 0200 	mov.w	r2, #0
 8004994:	f04f 0300 	mov.w	r3, #0
 8004998:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800499c:	4659      	mov	r1, fp
 800499e:	00cb      	lsls	r3, r1, #3
 80049a0:	4651      	mov	r1, sl
 80049a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049a6:	4651      	mov	r1, sl
 80049a8:	00ca      	lsls	r2, r1, #3
 80049aa:	4610      	mov	r0, r2
 80049ac:	4619      	mov	r1, r3
 80049ae:	4603      	mov	r3, r0
 80049b0:	4642      	mov	r2, r8
 80049b2:	189b      	adds	r3, r3, r2
 80049b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049b6:	464b      	mov	r3, r9
 80049b8:	460a      	mov	r2, r1
 80049ba:	eb42 0303 	adc.w	r3, r2, r3
 80049be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80049ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80049d8:	4649      	mov	r1, r9
 80049da:	008b      	lsls	r3, r1, #2
 80049dc:	4641      	mov	r1, r8
 80049de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049e2:	4641      	mov	r1, r8
 80049e4:	008a      	lsls	r2, r1, #2
 80049e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80049ea:	f7fb fc59 	bl	80002a0 <__aeabi_uldivmod>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a28 <UART_SetConfig+0x4e4>)
 80049f4:	fba3 1302 	umull	r1, r3, r3, r2
 80049f8:	095b      	lsrs	r3, r3, #5
 80049fa:	2164      	movs	r1, #100	@ 0x64
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	3332      	adds	r3, #50	@ 0x32
 8004a06:	4a08      	ldr	r2, [pc, #32]	@ (8004a28 <UART_SetConfig+0x4e4>)
 8004a08:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	f003 020f 	and.w	r2, r3, #15
 8004a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4422      	add	r2, r4
 8004a1a:	609a      	str	r2, [r3, #8]
}
 8004a1c:	bf00      	nop
 8004a1e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a22:	46bd      	mov	sp, r7
 8004a24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a28:	51eb851f 	.word	0x51eb851f

08004a2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	f107 001c 	add.w	r0, r7, #28
 8004a3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a3e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d123      	bne.n	8004a8e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004a5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d105      	bne.n	8004a82 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 faa0 	bl	8004fc8 <USB_CoreReset>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	73fb      	strb	r3, [r7, #15]
 8004a8c:	e01b      	b.n	8004ac6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fa94 	bl	8004fc8 <USB_CoreReset>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004aa4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d106      	bne.n	8004aba <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ab8:	e005      	b.n	8004ac6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004abe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ac6:	7fbb      	ldrb	r3, [r7, #30]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d10b      	bne.n	8004ae4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f043 0206 	orr.w	r2, r3, #6
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f043 0220 	orr.w	r2, r3, #32
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004af0:	b004      	add	sp, #16
 8004af2:	4770      	bx	lr

08004af4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f023 0201 	bic.w	r2, r3, #1
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	460b      	mov	r3, r1
 8004b20:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b22:	2300      	movs	r3, #0
 8004b24:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b32:	78fb      	ldrb	r3, [r7, #3]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d115      	bne.n	8004b64 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004b44:	200a      	movs	r0, #10
 8004b46:	f7fd fa7d 	bl	8002044 <HAL_Delay>
      ms += 10U;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	330a      	adds	r3, #10
 8004b4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fa2b 	bl	8004fac <USB_GetMode>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d01e      	beq.n	8004b9a <USB_SetCurrentMode+0x84>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004b60:	d9f0      	bls.n	8004b44 <USB_SetCurrentMode+0x2e>
 8004b62:	e01a      	b.n	8004b9a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b64:	78fb      	ldrb	r3, [r7, #3]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d115      	bne.n	8004b96 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004b76:	200a      	movs	r0, #10
 8004b78:	f7fd fa64 	bl	8002044 <HAL_Delay>
      ms += 10U;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	330a      	adds	r3, #10
 8004b80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fa12 	bl	8004fac <USB_GetMode>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <USB_SetCurrentMode+0x84>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2bc7      	cmp	r3, #199	@ 0xc7
 8004b92:	d9f0      	bls.n	8004b76 <USB_SetCurrentMode+0x60>
 8004b94:	e001      	b.n	8004b9a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e005      	b.n	8004ba6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2bc8      	cmp	r3, #200	@ 0xc8
 8004b9e:	d101      	bne.n	8004ba4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b086      	sub	sp, #24
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004bbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004bca:	2300      	movs	r3, #0
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	e009      	b.n	8004be4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	3340      	adds	r3, #64	@ 0x40
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	2200      	movs	r2, #0
 8004bdc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	3301      	adds	r3, #1
 8004be2:	613b      	str	r3, [r7, #16]
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	2b0e      	cmp	r3, #14
 8004be8:	d9f2      	bls.n	8004bd0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004bea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d11c      	bne.n	8004c2c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c00:	f043 0302 	orr.w	r3, r3, #2
 8004c04:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c16:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c22:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	639a      	str	r2, [r3, #56]	@ 0x38
 8004c2a:	e00b      	b.n	8004c44 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c30:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c50:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d10d      	bne.n	8004c74 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d104      	bne.n	8004c6a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c60:	2100      	movs	r1, #0
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f968 	bl	8004f38 <USB_SetDevSpeed>
 8004c68:	e008      	b.n	8004c7c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f963 	bl	8004f38 <USB_SetDevSpeed>
 8004c72:	e003      	b.n	8004c7c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c74:	2103      	movs	r1, #3
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f95e 	bl	8004f38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c7c:	2110      	movs	r1, #16
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f8fa 	bl	8004e78 <USB_FlushTxFifo>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f924 	bl	8004edc <USB_FlushRxFifo>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	e043      	b.n	8004d50 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cde:	d118      	bne.n	8004d12 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10a      	bne.n	8004cfc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	e013      	b.n	8004d24 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d08:	461a      	mov	r2, r3
 8004d0a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	e008      	b.n	8004d24 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	015a      	lsls	r2, r3, #5
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d1e:	461a      	mov	r2, r3
 8004d20:	2300      	movs	r3, #0
 8004d22:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d30:	461a      	mov	r2, r3
 8004d32:	2300      	movs	r3, #0
 8004d34:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d42:	461a      	mov	r2, r3
 8004d44:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	613b      	str	r3, [r7, #16]
 8004d50:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004d54:	461a      	mov	r2, r3
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d3b5      	bcc.n	8004cc8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	e043      	b.n	8004dea <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d78:	d118      	bne.n	8004dac <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004d92:	6013      	str	r3, [r2, #0]
 8004d94:	e013      	b.n	8004dbe <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004da2:	461a      	mov	r2, r3
 8004da4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	e008      	b.n	8004dbe <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db8:	461a      	mov	r2, r3
 8004dba:	2300      	movs	r3, #0
 8004dbc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	015a      	lsls	r2, r3, #5
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dca:	461a      	mov	r2, r3
 8004dcc:	2300      	movs	r3, #0
 8004dce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ddc:	461a      	mov	r2, r3
 8004dde:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004de2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	3301      	adds	r3, #1
 8004de8:	613b      	str	r3, [r7, #16]
 8004dea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004dee:	461a      	mov	r2, r3
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d3b5      	bcc.n	8004d62 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e08:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004e16:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d105      	bne.n	8004e2c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	f043 0210 	orr.w	r2, r3, #16
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	699a      	ldr	r2, [r3, #24]
 8004e30:	4b10      	ldr	r3, [pc, #64]	@ (8004e74 <USB_DevInit+0x2c4>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e38:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	f043 0208 	orr.w	r2, r3, #8
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e4c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d107      	bne.n	8004e64 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e5c:	f043 0304 	orr.w	r3, r3, #4
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e70:	b004      	add	sp, #16
 8004e72:	4770      	bx	lr
 8004e74:	803c3800 	.word	0x803c3800

08004e78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e92:	d901      	bls.n	8004e98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e01b      	b.n	8004ed0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	daf2      	bge.n	8004e86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	019b      	lsls	r3, r3, #6
 8004ea8:	f043 0220 	orr.w	r2, r3, #32
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ebc:	d901      	bls.n	8004ec2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e006      	b.n	8004ed0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f003 0320 	and.w	r3, r3, #32
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	d0f0      	beq.n	8004eb0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	3301      	adds	r3, #1
 8004eec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ef4:	d901      	bls.n	8004efa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e018      	b.n	8004f2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	daf2      	bge.n	8004ee8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2210      	movs	r2, #16
 8004f0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f18:	d901      	bls.n	8004f1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e006      	b.n	8004f2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 0310 	and.w	r3, r3, #16
 8004f26:	2b10      	cmp	r3, #16
 8004f28:	d0f0      	beq.n	8004f0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	460b      	mov	r3, r1
 8004f42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	68f9      	ldr	r1, [r7, #12]
 8004f54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b085      	sub	sp, #20
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004f84:	f023 0303 	bic.w	r3, r3, #3
 8004f88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f98:	f043 0302 	orr.w	r3, r3, #2
 8004f9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fe0:	d901      	bls.n	8004fe6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e01b      	b.n	800501e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	daf2      	bge.n	8004fd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f043 0201 	orr.w	r2, r3, #1
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	3301      	adds	r3, #1
 8005002:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800500a:	d901      	bls.n	8005010 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e006      	b.n	800501e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b01      	cmp	r3, #1
 800501a:	d0f0      	beq.n	8004ffe <USB_CoreReset+0x36>

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
	...

0800502c <siprintf>:
 800502c:	b40e      	push	{r1, r2, r3}
 800502e:	b500      	push	{lr}
 8005030:	b09c      	sub	sp, #112	@ 0x70
 8005032:	ab1d      	add	r3, sp, #116	@ 0x74
 8005034:	9002      	str	r0, [sp, #8]
 8005036:	9006      	str	r0, [sp, #24]
 8005038:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800503c:	4809      	ldr	r0, [pc, #36]	@ (8005064 <siprintf+0x38>)
 800503e:	9107      	str	r1, [sp, #28]
 8005040:	9104      	str	r1, [sp, #16]
 8005042:	4909      	ldr	r1, [pc, #36]	@ (8005068 <siprintf+0x3c>)
 8005044:	f853 2b04 	ldr.w	r2, [r3], #4
 8005048:	9105      	str	r1, [sp, #20]
 800504a:	6800      	ldr	r0, [r0, #0]
 800504c:	9301      	str	r3, [sp, #4]
 800504e:	a902      	add	r1, sp, #8
 8005050:	f000 f994 	bl	800537c <_svfiprintf_r>
 8005054:	9b02      	ldr	r3, [sp, #8]
 8005056:	2200      	movs	r2, #0
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	b01c      	add	sp, #112	@ 0x70
 800505c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005060:	b003      	add	sp, #12
 8005062:	4770      	bx	lr
 8005064:	2000000c 	.word	0x2000000c
 8005068:	ffff0208 	.word	0xffff0208

0800506c <memset>:
 800506c:	4402      	add	r2, r0
 800506e:	4603      	mov	r3, r0
 8005070:	4293      	cmp	r3, r2
 8005072:	d100      	bne.n	8005076 <memset+0xa>
 8005074:	4770      	bx	lr
 8005076:	f803 1b01 	strb.w	r1, [r3], #1
 800507a:	e7f9      	b.n	8005070 <memset+0x4>

0800507c <__errno>:
 800507c:	4b01      	ldr	r3, [pc, #4]	@ (8005084 <__errno+0x8>)
 800507e:	6818      	ldr	r0, [r3, #0]
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	2000000c 	.word	0x2000000c

08005088 <__libc_init_array>:
 8005088:	b570      	push	{r4, r5, r6, lr}
 800508a:	4d0d      	ldr	r5, [pc, #52]	@ (80050c0 <__libc_init_array+0x38>)
 800508c:	4c0d      	ldr	r4, [pc, #52]	@ (80050c4 <__libc_init_array+0x3c>)
 800508e:	1b64      	subs	r4, r4, r5
 8005090:	10a4      	asrs	r4, r4, #2
 8005092:	2600      	movs	r6, #0
 8005094:	42a6      	cmp	r6, r4
 8005096:	d109      	bne.n	80050ac <__libc_init_array+0x24>
 8005098:	4d0b      	ldr	r5, [pc, #44]	@ (80050c8 <__libc_init_array+0x40>)
 800509a:	4c0c      	ldr	r4, [pc, #48]	@ (80050cc <__libc_init_array+0x44>)
 800509c:	f000 fc66 	bl	800596c <_init>
 80050a0:	1b64      	subs	r4, r4, r5
 80050a2:	10a4      	asrs	r4, r4, #2
 80050a4:	2600      	movs	r6, #0
 80050a6:	42a6      	cmp	r6, r4
 80050a8:	d105      	bne.n	80050b6 <__libc_init_array+0x2e>
 80050aa:	bd70      	pop	{r4, r5, r6, pc}
 80050ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80050b0:	4798      	blx	r3
 80050b2:	3601      	adds	r6, #1
 80050b4:	e7ee      	b.n	8005094 <__libc_init_array+0xc>
 80050b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ba:	4798      	blx	r3
 80050bc:	3601      	adds	r6, #1
 80050be:	e7f2      	b.n	80050a6 <__libc_init_array+0x1e>
 80050c0:	08006054 	.word	0x08006054
 80050c4:	08006054 	.word	0x08006054
 80050c8:	08006054 	.word	0x08006054
 80050cc:	08006058 	.word	0x08006058

080050d0 <__retarget_lock_acquire_recursive>:
 80050d0:	4770      	bx	lr

080050d2 <__retarget_lock_release_recursive>:
 80050d2:	4770      	bx	lr

080050d4 <_free_r>:
 80050d4:	b538      	push	{r3, r4, r5, lr}
 80050d6:	4605      	mov	r5, r0
 80050d8:	2900      	cmp	r1, #0
 80050da:	d041      	beq.n	8005160 <_free_r+0x8c>
 80050dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050e0:	1f0c      	subs	r4, r1, #4
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	bfb8      	it	lt
 80050e6:	18e4      	addlt	r4, r4, r3
 80050e8:	f000 f8e0 	bl	80052ac <__malloc_lock>
 80050ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005164 <_free_r+0x90>)
 80050ee:	6813      	ldr	r3, [r2, #0]
 80050f0:	b933      	cbnz	r3, 8005100 <_free_r+0x2c>
 80050f2:	6063      	str	r3, [r4, #4]
 80050f4:	6014      	str	r4, [r2, #0]
 80050f6:	4628      	mov	r0, r5
 80050f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050fc:	f000 b8dc 	b.w	80052b8 <__malloc_unlock>
 8005100:	42a3      	cmp	r3, r4
 8005102:	d908      	bls.n	8005116 <_free_r+0x42>
 8005104:	6820      	ldr	r0, [r4, #0]
 8005106:	1821      	adds	r1, r4, r0
 8005108:	428b      	cmp	r3, r1
 800510a:	bf01      	itttt	eq
 800510c:	6819      	ldreq	r1, [r3, #0]
 800510e:	685b      	ldreq	r3, [r3, #4]
 8005110:	1809      	addeq	r1, r1, r0
 8005112:	6021      	streq	r1, [r4, #0]
 8005114:	e7ed      	b.n	80050f2 <_free_r+0x1e>
 8005116:	461a      	mov	r2, r3
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	b10b      	cbz	r3, 8005120 <_free_r+0x4c>
 800511c:	42a3      	cmp	r3, r4
 800511e:	d9fa      	bls.n	8005116 <_free_r+0x42>
 8005120:	6811      	ldr	r1, [r2, #0]
 8005122:	1850      	adds	r0, r2, r1
 8005124:	42a0      	cmp	r0, r4
 8005126:	d10b      	bne.n	8005140 <_free_r+0x6c>
 8005128:	6820      	ldr	r0, [r4, #0]
 800512a:	4401      	add	r1, r0
 800512c:	1850      	adds	r0, r2, r1
 800512e:	4283      	cmp	r3, r0
 8005130:	6011      	str	r1, [r2, #0]
 8005132:	d1e0      	bne.n	80050f6 <_free_r+0x22>
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	6053      	str	r3, [r2, #4]
 800513a:	4408      	add	r0, r1
 800513c:	6010      	str	r0, [r2, #0]
 800513e:	e7da      	b.n	80050f6 <_free_r+0x22>
 8005140:	d902      	bls.n	8005148 <_free_r+0x74>
 8005142:	230c      	movs	r3, #12
 8005144:	602b      	str	r3, [r5, #0]
 8005146:	e7d6      	b.n	80050f6 <_free_r+0x22>
 8005148:	6820      	ldr	r0, [r4, #0]
 800514a:	1821      	adds	r1, r4, r0
 800514c:	428b      	cmp	r3, r1
 800514e:	bf04      	itt	eq
 8005150:	6819      	ldreq	r1, [r3, #0]
 8005152:	685b      	ldreq	r3, [r3, #4]
 8005154:	6063      	str	r3, [r4, #4]
 8005156:	bf04      	itt	eq
 8005158:	1809      	addeq	r1, r1, r0
 800515a:	6021      	streq	r1, [r4, #0]
 800515c:	6054      	str	r4, [r2, #4]
 800515e:	e7ca      	b.n	80050f6 <_free_r+0x22>
 8005160:	bd38      	pop	{r3, r4, r5, pc}
 8005162:	bf00      	nop
 8005164:	200031a8 	.word	0x200031a8

08005168 <sbrk_aligned>:
 8005168:	b570      	push	{r4, r5, r6, lr}
 800516a:	4e0f      	ldr	r6, [pc, #60]	@ (80051a8 <sbrk_aligned+0x40>)
 800516c:	460c      	mov	r4, r1
 800516e:	6831      	ldr	r1, [r6, #0]
 8005170:	4605      	mov	r5, r0
 8005172:	b911      	cbnz	r1, 800517a <sbrk_aligned+0x12>
 8005174:	f000 fba6 	bl	80058c4 <_sbrk_r>
 8005178:	6030      	str	r0, [r6, #0]
 800517a:	4621      	mov	r1, r4
 800517c:	4628      	mov	r0, r5
 800517e:	f000 fba1 	bl	80058c4 <_sbrk_r>
 8005182:	1c43      	adds	r3, r0, #1
 8005184:	d103      	bne.n	800518e <sbrk_aligned+0x26>
 8005186:	f04f 34ff 	mov.w	r4, #4294967295
 800518a:	4620      	mov	r0, r4
 800518c:	bd70      	pop	{r4, r5, r6, pc}
 800518e:	1cc4      	adds	r4, r0, #3
 8005190:	f024 0403 	bic.w	r4, r4, #3
 8005194:	42a0      	cmp	r0, r4
 8005196:	d0f8      	beq.n	800518a <sbrk_aligned+0x22>
 8005198:	1a21      	subs	r1, r4, r0
 800519a:	4628      	mov	r0, r5
 800519c:	f000 fb92 	bl	80058c4 <_sbrk_r>
 80051a0:	3001      	adds	r0, #1
 80051a2:	d1f2      	bne.n	800518a <sbrk_aligned+0x22>
 80051a4:	e7ef      	b.n	8005186 <sbrk_aligned+0x1e>
 80051a6:	bf00      	nop
 80051a8:	200031a4 	.word	0x200031a4

080051ac <_malloc_r>:
 80051ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051b0:	1ccd      	adds	r5, r1, #3
 80051b2:	f025 0503 	bic.w	r5, r5, #3
 80051b6:	3508      	adds	r5, #8
 80051b8:	2d0c      	cmp	r5, #12
 80051ba:	bf38      	it	cc
 80051bc:	250c      	movcc	r5, #12
 80051be:	2d00      	cmp	r5, #0
 80051c0:	4606      	mov	r6, r0
 80051c2:	db01      	blt.n	80051c8 <_malloc_r+0x1c>
 80051c4:	42a9      	cmp	r1, r5
 80051c6:	d904      	bls.n	80051d2 <_malloc_r+0x26>
 80051c8:	230c      	movs	r3, #12
 80051ca:	6033      	str	r3, [r6, #0]
 80051cc:	2000      	movs	r0, #0
 80051ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80052a8 <_malloc_r+0xfc>
 80051d6:	f000 f869 	bl	80052ac <__malloc_lock>
 80051da:	f8d8 3000 	ldr.w	r3, [r8]
 80051de:	461c      	mov	r4, r3
 80051e0:	bb44      	cbnz	r4, 8005234 <_malloc_r+0x88>
 80051e2:	4629      	mov	r1, r5
 80051e4:	4630      	mov	r0, r6
 80051e6:	f7ff ffbf 	bl	8005168 <sbrk_aligned>
 80051ea:	1c43      	adds	r3, r0, #1
 80051ec:	4604      	mov	r4, r0
 80051ee:	d158      	bne.n	80052a2 <_malloc_r+0xf6>
 80051f0:	f8d8 4000 	ldr.w	r4, [r8]
 80051f4:	4627      	mov	r7, r4
 80051f6:	2f00      	cmp	r7, #0
 80051f8:	d143      	bne.n	8005282 <_malloc_r+0xd6>
 80051fa:	2c00      	cmp	r4, #0
 80051fc:	d04b      	beq.n	8005296 <_malloc_r+0xea>
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	4639      	mov	r1, r7
 8005202:	4630      	mov	r0, r6
 8005204:	eb04 0903 	add.w	r9, r4, r3
 8005208:	f000 fb5c 	bl	80058c4 <_sbrk_r>
 800520c:	4581      	cmp	r9, r0
 800520e:	d142      	bne.n	8005296 <_malloc_r+0xea>
 8005210:	6821      	ldr	r1, [r4, #0]
 8005212:	1a6d      	subs	r5, r5, r1
 8005214:	4629      	mov	r1, r5
 8005216:	4630      	mov	r0, r6
 8005218:	f7ff ffa6 	bl	8005168 <sbrk_aligned>
 800521c:	3001      	adds	r0, #1
 800521e:	d03a      	beq.n	8005296 <_malloc_r+0xea>
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	442b      	add	r3, r5
 8005224:	6023      	str	r3, [r4, #0]
 8005226:	f8d8 3000 	ldr.w	r3, [r8]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	bb62      	cbnz	r2, 8005288 <_malloc_r+0xdc>
 800522e:	f8c8 7000 	str.w	r7, [r8]
 8005232:	e00f      	b.n	8005254 <_malloc_r+0xa8>
 8005234:	6822      	ldr	r2, [r4, #0]
 8005236:	1b52      	subs	r2, r2, r5
 8005238:	d420      	bmi.n	800527c <_malloc_r+0xd0>
 800523a:	2a0b      	cmp	r2, #11
 800523c:	d917      	bls.n	800526e <_malloc_r+0xc2>
 800523e:	1961      	adds	r1, r4, r5
 8005240:	42a3      	cmp	r3, r4
 8005242:	6025      	str	r5, [r4, #0]
 8005244:	bf18      	it	ne
 8005246:	6059      	strne	r1, [r3, #4]
 8005248:	6863      	ldr	r3, [r4, #4]
 800524a:	bf08      	it	eq
 800524c:	f8c8 1000 	streq.w	r1, [r8]
 8005250:	5162      	str	r2, [r4, r5]
 8005252:	604b      	str	r3, [r1, #4]
 8005254:	4630      	mov	r0, r6
 8005256:	f000 f82f 	bl	80052b8 <__malloc_unlock>
 800525a:	f104 000b 	add.w	r0, r4, #11
 800525e:	1d23      	adds	r3, r4, #4
 8005260:	f020 0007 	bic.w	r0, r0, #7
 8005264:	1ac2      	subs	r2, r0, r3
 8005266:	bf1c      	itt	ne
 8005268:	1a1b      	subne	r3, r3, r0
 800526a:	50a3      	strne	r3, [r4, r2]
 800526c:	e7af      	b.n	80051ce <_malloc_r+0x22>
 800526e:	6862      	ldr	r2, [r4, #4]
 8005270:	42a3      	cmp	r3, r4
 8005272:	bf0c      	ite	eq
 8005274:	f8c8 2000 	streq.w	r2, [r8]
 8005278:	605a      	strne	r2, [r3, #4]
 800527a:	e7eb      	b.n	8005254 <_malloc_r+0xa8>
 800527c:	4623      	mov	r3, r4
 800527e:	6864      	ldr	r4, [r4, #4]
 8005280:	e7ae      	b.n	80051e0 <_malloc_r+0x34>
 8005282:	463c      	mov	r4, r7
 8005284:	687f      	ldr	r7, [r7, #4]
 8005286:	e7b6      	b.n	80051f6 <_malloc_r+0x4a>
 8005288:	461a      	mov	r2, r3
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	42a3      	cmp	r3, r4
 800528e:	d1fb      	bne.n	8005288 <_malloc_r+0xdc>
 8005290:	2300      	movs	r3, #0
 8005292:	6053      	str	r3, [r2, #4]
 8005294:	e7de      	b.n	8005254 <_malloc_r+0xa8>
 8005296:	230c      	movs	r3, #12
 8005298:	6033      	str	r3, [r6, #0]
 800529a:	4630      	mov	r0, r6
 800529c:	f000 f80c 	bl	80052b8 <__malloc_unlock>
 80052a0:	e794      	b.n	80051cc <_malloc_r+0x20>
 80052a2:	6005      	str	r5, [r0, #0]
 80052a4:	e7d6      	b.n	8005254 <_malloc_r+0xa8>
 80052a6:	bf00      	nop
 80052a8:	200031a8 	.word	0x200031a8

080052ac <__malloc_lock>:
 80052ac:	4801      	ldr	r0, [pc, #4]	@ (80052b4 <__malloc_lock+0x8>)
 80052ae:	f7ff bf0f 	b.w	80050d0 <__retarget_lock_acquire_recursive>
 80052b2:	bf00      	nop
 80052b4:	200031a0 	.word	0x200031a0

080052b8 <__malloc_unlock>:
 80052b8:	4801      	ldr	r0, [pc, #4]	@ (80052c0 <__malloc_unlock+0x8>)
 80052ba:	f7ff bf0a 	b.w	80050d2 <__retarget_lock_release_recursive>
 80052be:	bf00      	nop
 80052c0:	200031a0 	.word	0x200031a0

080052c4 <__ssputs_r>:
 80052c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052c8:	688e      	ldr	r6, [r1, #8]
 80052ca:	461f      	mov	r7, r3
 80052cc:	42be      	cmp	r6, r7
 80052ce:	680b      	ldr	r3, [r1, #0]
 80052d0:	4682      	mov	sl, r0
 80052d2:	460c      	mov	r4, r1
 80052d4:	4690      	mov	r8, r2
 80052d6:	d82d      	bhi.n	8005334 <__ssputs_r+0x70>
 80052d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80052dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80052e0:	d026      	beq.n	8005330 <__ssputs_r+0x6c>
 80052e2:	6965      	ldr	r5, [r4, #20]
 80052e4:	6909      	ldr	r1, [r1, #16]
 80052e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052ea:	eba3 0901 	sub.w	r9, r3, r1
 80052ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052f2:	1c7b      	adds	r3, r7, #1
 80052f4:	444b      	add	r3, r9
 80052f6:	106d      	asrs	r5, r5, #1
 80052f8:	429d      	cmp	r5, r3
 80052fa:	bf38      	it	cc
 80052fc:	461d      	movcc	r5, r3
 80052fe:	0553      	lsls	r3, r2, #21
 8005300:	d527      	bpl.n	8005352 <__ssputs_r+0x8e>
 8005302:	4629      	mov	r1, r5
 8005304:	f7ff ff52 	bl	80051ac <_malloc_r>
 8005308:	4606      	mov	r6, r0
 800530a:	b360      	cbz	r0, 8005366 <__ssputs_r+0xa2>
 800530c:	6921      	ldr	r1, [r4, #16]
 800530e:	464a      	mov	r2, r9
 8005310:	f000 fae8 	bl	80058e4 <memcpy>
 8005314:	89a3      	ldrh	r3, [r4, #12]
 8005316:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800531a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800531e:	81a3      	strh	r3, [r4, #12]
 8005320:	6126      	str	r6, [r4, #16]
 8005322:	6165      	str	r5, [r4, #20]
 8005324:	444e      	add	r6, r9
 8005326:	eba5 0509 	sub.w	r5, r5, r9
 800532a:	6026      	str	r6, [r4, #0]
 800532c:	60a5      	str	r5, [r4, #8]
 800532e:	463e      	mov	r6, r7
 8005330:	42be      	cmp	r6, r7
 8005332:	d900      	bls.n	8005336 <__ssputs_r+0x72>
 8005334:	463e      	mov	r6, r7
 8005336:	6820      	ldr	r0, [r4, #0]
 8005338:	4632      	mov	r2, r6
 800533a:	4641      	mov	r1, r8
 800533c:	f000 faa8 	bl	8005890 <memmove>
 8005340:	68a3      	ldr	r3, [r4, #8]
 8005342:	1b9b      	subs	r3, r3, r6
 8005344:	60a3      	str	r3, [r4, #8]
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	4433      	add	r3, r6
 800534a:	6023      	str	r3, [r4, #0]
 800534c:	2000      	movs	r0, #0
 800534e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005352:	462a      	mov	r2, r5
 8005354:	f000 fad4 	bl	8005900 <_realloc_r>
 8005358:	4606      	mov	r6, r0
 800535a:	2800      	cmp	r0, #0
 800535c:	d1e0      	bne.n	8005320 <__ssputs_r+0x5c>
 800535e:	6921      	ldr	r1, [r4, #16]
 8005360:	4650      	mov	r0, sl
 8005362:	f7ff feb7 	bl	80050d4 <_free_r>
 8005366:	230c      	movs	r3, #12
 8005368:	f8ca 3000 	str.w	r3, [sl]
 800536c:	89a3      	ldrh	r3, [r4, #12]
 800536e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005372:	81a3      	strh	r3, [r4, #12]
 8005374:	f04f 30ff 	mov.w	r0, #4294967295
 8005378:	e7e9      	b.n	800534e <__ssputs_r+0x8a>
	...

0800537c <_svfiprintf_r>:
 800537c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005380:	4698      	mov	r8, r3
 8005382:	898b      	ldrh	r3, [r1, #12]
 8005384:	061b      	lsls	r3, r3, #24
 8005386:	b09d      	sub	sp, #116	@ 0x74
 8005388:	4607      	mov	r7, r0
 800538a:	460d      	mov	r5, r1
 800538c:	4614      	mov	r4, r2
 800538e:	d510      	bpl.n	80053b2 <_svfiprintf_r+0x36>
 8005390:	690b      	ldr	r3, [r1, #16]
 8005392:	b973      	cbnz	r3, 80053b2 <_svfiprintf_r+0x36>
 8005394:	2140      	movs	r1, #64	@ 0x40
 8005396:	f7ff ff09 	bl	80051ac <_malloc_r>
 800539a:	6028      	str	r0, [r5, #0]
 800539c:	6128      	str	r0, [r5, #16]
 800539e:	b930      	cbnz	r0, 80053ae <_svfiprintf_r+0x32>
 80053a0:	230c      	movs	r3, #12
 80053a2:	603b      	str	r3, [r7, #0]
 80053a4:	f04f 30ff 	mov.w	r0, #4294967295
 80053a8:	b01d      	add	sp, #116	@ 0x74
 80053aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ae:	2340      	movs	r3, #64	@ 0x40
 80053b0:	616b      	str	r3, [r5, #20]
 80053b2:	2300      	movs	r3, #0
 80053b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80053b6:	2320      	movs	r3, #32
 80053b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80053bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80053c0:	2330      	movs	r3, #48	@ 0x30
 80053c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005560 <_svfiprintf_r+0x1e4>
 80053c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80053ca:	f04f 0901 	mov.w	r9, #1
 80053ce:	4623      	mov	r3, r4
 80053d0:	469a      	mov	sl, r3
 80053d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053d6:	b10a      	cbz	r2, 80053dc <_svfiprintf_r+0x60>
 80053d8:	2a25      	cmp	r2, #37	@ 0x25
 80053da:	d1f9      	bne.n	80053d0 <_svfiprintf_r+0x54>
 80053dc:	ebba 0b04 	subs.w	fp, sl, r4
 80053e0:	d00b      	beq.n	80053fa <_svfiprintf_r+0x7e>
 80053e2:	465b      	mov	r3, fp
 80053e4:	4622      	mov	r2, r4
 80053e6:	4629      	mov	r1, r5
 80053e8:	4638      	mov	r0, r7
 80053ea:	f7ff ff6b 	bl	80052c4 <__ssputs_r>
 80053ee:	3001      	adds	r0, #1
 80053f0:	f000 80a7 	beq.w	8005542 <_svfiprintf_r+0x1c6>
 80053f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053f6:	445a      	add	r2, fp
 80053f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80053fa:	f89a 3000 	ldrb.w	r3, [sl]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 809f 	beq.w	8005542 <_svfiprintf_r+0x1c6>
 8005404:	2300      	movs	r3, #0
 8005406:	f04f 32ff 	mov.w	r2, #4294967295
 800540a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800540e:	f10a 0a01 	add.w	sl, sl, #1
 8005412:	9304      	str	r3, [sp, #16]
 8005414:	9307      	str	r3, [sp, #28]
 8005416:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800541a:	931a      	str	r3, [sp, #104]	@ 0x68
 800541c:	4654      	mov	r4, sl
 800541e:	2205      	movs	r2, #5
 8005420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005424:	484e      	ldr	r0, [pc, #312]	@ (8005560 <_svfiprintf_r+0x1e4>)
 8005426:	f7fa feeb 	bl	8000200 <memchr>
 800542a:	9a04      	ldr	r2, [sp, #16]
 800542c:	b9d8      	cbnz	r0, 8005466 <_svfiprintf_r+0xea>
 800542e:	06d0      	lsls	r0, r2, #27
 8005430:	bf44      	itt	mi
 8005432:	2320      	movmi	r3, #32
 8005434:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005438:	0711      	lsls	r1, r2, #28
 800543a:	bf44      	itt	mi
 800543c:	232b      	movmi	r3, #43	@ 0x2b
 800543e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005442:	f89a 3000 	ldrb.w	r3, [sl]
 8005446:	2b2a      	cmp	r3, #42	@ 0x2a
 8005448:	d015      	beq.n	8005476 <_svfiprintf_r+0xfa>
 800544a:	9a07      	ldr	r2, [sp, #28]
 800544c:	4654      	mov	r4, sl
 800544e:	2000      	movs	r0, #0
 8005450:	f04f 0c0a 	mov.w	ip, #10
 8005454:	4621      	mov	r1, r4
 8005456:	f811 3b01 	ldrb.w	r3, [r1], #1
 800545a:	3b30      	subs	r3, #48	@ 0x30
 800545c:	2b09      	cmp	r3, #9
 800545e:	d94b      	bls.n	80054f8 <_svfiprintf_r+0x17c>
 8005460:	b1b0      	cbz	r0, 8005490 <_svfiprintf_r+0x114>
 8005462:	9207      	str	r2, [sp, #28]
 8005464:	e014      	b.n	8005490 <_svfiprintf_r+0x114>
 8005466:	eba0 0308 	sub.w	r3, r0, r8
 800546a:	fa09 f303 	lsl.w	r3, r9, r3
 800546e:	4313      	orrs	r3, r2
 8005470:	9304      	str	r3, [sp, #16]
 8005472:	46a2      	mov	sl, r4
 8005474:	e7d2      	b.n	800541c <_svfiprintf_r+0xa0>
 8005476:	9b03      	ldr	r3, [sp, #12]
 8005478:	1d19      	adds	r1, r3, #4
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	9103      	str	r1, [sp, #12]
 800547e:	2b00      	cmp	r3, #0
 8005480:	bfbb      	ittet	lt
 8005482:	425b      	neglt	r3, r3
 8005484:	f042 0202 	orrlt.w	r2, r2, #2
 8005488:	9307      	strge	r3, [sp, #28]
 800548a:	9307      	strlt	r3, [sp, #28]
 800548c:	bfb8      	it	lt
 800548e:	9204      	strlt	r2, [sp, #16]
 8005490:	7823      	ldrb	r3, [r4, #0]
 8005492:	2b2e      	cmp	r3, #46	@ 0x2e
 8005494:	d10a      	bne.n	80054ac <_svfiprintf_r+0x130>
 8005496:	7863      	ldrb	r3, [r4, #1]
 8005498:	2b2a      	cmp	r3, #42	@ 0x2a
 800549a:	d132      	bne.n	8005502 <_svfiprintf_r+0x186>
 800549c:	9b03      	ldr	r3, [sp, #12]
 800549e:	1d1a      	adds	r2, r3, #4
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	9203      	str	r2, [sp, #12]
 80054a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80054a8:	3402      	adds	r4, #2
 80054aa:	9305      	str	r3, [sp, #20]
 80054ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005570 <_svfiprintf_r+0x1f4>
 80054b0:	7821      	ldrb	r1, [r4, #0]
 80054b2:	2203      	movs	r2, #3
 80054b4:	4650      	mov	r0, sl
 80054b6:	f7fa fea3 	bl	8000200 <memchr>
 80054ba:	b138      	cbz	r0, 80054cc <_svfiprintf_r+0x150>
 80054bc:	9b04      	ldr	r3, [sp, #16]
 80054be:	eba0 000a 	sub.w	r0, r0, sl
 80054c2:	2240      	movs	r2, #64	@ 0x40
 80054c4:	4082      	lsls	r2, r0
 80054c6:	4313      	orrs	r3, r2
 80054c8:	3401      	adds	r4, #1
 80054ca:	9304      	str	r3, [sp, #16]
 80054cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054d0:	4824      	ldr	r0, [pc, #144]	@ (8005564 <_svfiprintf_r+0x1e8>)
 80054d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80054d6:	2206      	movs	r2, #6
 80054d8:	f7fa fe92 	bl	8000200 <memchr>
 80054dc:	2800      	cmp	r0, #0
 80054de:	d036      	beq.n	800554e <_svfiprintf_r+0x1d2>
 80054e0:	4b21      	ldr	r3, [pc, #132]	@ (8005568 <_svfiprintf_r+0x1ec>)
 80054e2:	bb1b      	cbnz	r3, 800552c <_svfiprintf_r+0x1b0>
 80054e4:	9b03      	ldr	r3, [sp, #12]
 80054e6:	3307      	adds	r3, #7
 80054e8:	f023 0307 	bic.w	r3, r3, #7
 80054ec:	3308      	adds	r3, #8
 80054ee:	9303      	str	r3, [sp, #12]
 80054f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054f2:	4433      	add	r3, r6
 80054f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80054f6:	e76a      	b.n	80053ce <_svfiprintf_r+0x52>
 80054f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80054fc:	460c      	mov	r4, r1
 80054fe:	2001      	movs	r0, #1
 8005500:	e7a8      	b.n	8005454 <_svfiprintf_r+0xd8>
 8005502:	2300      	movs	r3, #0
 8005504:	3401      	adds	r4, #1
 8005506:	9305      	str	r3, [sp, #20]
 8005508:	4619      	mov	r1, r3
 800550a:	f04f 0c0a 	mov.w	ip, #10
 800550e:	4620      	mov	r0, r4
 8005510:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005514:	3a30      	subs	r2, #48	@ 0x30
 8005516:	2a09      	cmp	r2, #9
 8005518:	d903      	bls.n	8005522 <_svfiprintf_r+0x1a6>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0c6      	beq.n	80054ac <_svfiprintf_r+0x130>
 800551e:	9105      	str	r1, [sp, #20]
 8005520:	e7c4      	b.n	80054ac <_svfiprintf_r+0x130>
 8005522:	fb0c 2101 	mla	r1, ip, r1, r2
 8005526:	4604      	mov	r4, r0
 8005528:	2301      	movs	r3, #1
 800552a:	e7f0      	b.n	800550e <_svfiprintf_r+0x192>
 800552c:	ab03      	add	r3, sp, #12
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	462a      	mov	r2, r5
 8005532:	4b0e      	ldr	r3, [pc, #56]	@ (800556c <_svfiprintf_r+0x1f0>)
 8005534:	a904      	add	r1, sp, #16
 8005536:	4638      	mov	r0, r7
 8005538:	f3af 8000 	nop.w
 800553c:	1c42      	adds	r2, r0, #1
 800553e:	4606      	mov	r6, r0
 8005540:	d1d6      	bne.n	80054f0 <_svfiprintf_r+0x174>
 8005542:	89ab      	ldrh	r3, [r5, #12]
 8005544:	065b      	lsls	r3, r3, #25
 8005546:	f53f af2d 	bmi.w	80053a4 <_svfiprintf_r+0x28>
 800554a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800554c:	e72c      	b.n	80053a8 <_svfiprintf_r+0x2c>
 800554e:	ab03      	add	r3, sp, #12
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	462a      	mov	r2, r5
 8005554:	4b05      	ldr	r3, [pc, #20]	@ (800556c <_svfiprintf_r+0x1f0>)
 8005556:	a904      	add	r1, sp, #16
 8005558:	4638      	mov	r0, r7
 800555a:	f000 f879 	bl	8005650 <_printf_i>
 800555e:	e7ed      	b.n	800553c <_svfiprintf_r+0x1c0>
 8005560:	08006018 	.word	0x08006018
 8005564:	08006022 	.word	0x08006022
 8005568:	00000000 	.word	0x00000000
 800556c:	080052c5 	.word	0x080052c5
 8005570:	0800601e 	.word	0x0800601e

08005574 <_printf_common>:
 8005574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005578:	4616      	mov	r6, r2
 800557a:	4698      	mov	r8, r3
 800557c:	688a      	ldr	r2, [r1, #8]
 800557e:	690b      	ldr	r3, [r1, #16]
 8005580:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005584:	4293      	cmp	r3, r2
 8005586:	bfb8      	it	lt
 8005588:	4613      	movlt	r3, r2
 800558a:	6033      	str	r3, [r6, #0]
 800558c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005590:	4607      	mov	r7, r0
 8005592:	460c      	mov	r4, r1
 8005594:	b10a      	cbz	r2, 800559a <_printf_common+0x26>
 8005596:	3301      	adds	r3, #1
 8005598:	6033      	str	r3, [r6, #0]
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	0699      	lsls	r1, r3, #26
 800559e:	bf42      	ittt	mi
 80055a0:	6833      	ldrmi	r3, [r6, #0]
 80055a2:	3302      	addmi	r3, #2
 80055a4:	6033      	strmi	r3, [r6, #0]
 80055a6:	6825      	ldr	r5, [r4, #0]
 80055a8:	f015 0506 	ands.w	r5, r5, #6
 80055ac:	d106      	bne.n	80055bc <_printf_common+0x48>
 80055ae:	f104 0a19 	add.w	sl, r4, #25
 80055b2:	68e3      	ldr	r3, [r4, #12]
 80055b4:	6832      	ldr	r2, [r6, #0]
 80055b6:	1a9b      	subs	r3, r3, r2
 80055b8:	42ab      	cmp	r3, r5
 80055ba:	dc26      	bgt.n	800560a <_printf_common+0x96>
 80055bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055c0:	6822      	ldr	r2, [r4, #0]
 80055c2:	3b00      	subs	r3, #0
 80055c4:	bf18      	it	ne
 80055c6:	2301      	movne	r3, #1
 80055c8:	0692      	lsls	r2, r2, #26
 80055ca:	d42b      	bmi.n	8005624 <_printf_common+0xb0>
 80055cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055d0:	4641      	mov	r1, r8
 80055d2:	4638      	mov	r0, r7
 80055d4:	47c8      	blx	r9
 80055d6:	3001      	adds	r0, #1
 80055d8:	d01e      	beq.n	8005618 <_printf_common+0xa4>
 80055da:	6823      	ldr	r3, [r4, #0]
 80055dc:	6922      	ldr	r2, [r4, #16]
 80055de:	f003 0306 	and.w	r3, r3, #6
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	bf02      	ittt	eq
 80055e6:	68e5      	ldreq	r5, [r4, #12]
 80055e8:	6833      	ldreq	r3, [r6, #0]
 80055ea:	1aed      	subeq	r5, r5, r3
 80055ec:	68a3      	ldr	r3, [r4, #8]
 80055ee:	bf0c      	ite	eq
 80055f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055f4:	2500      	movne	r5, #0
 80055f6:	4293      	cmp	r3, r2
 80055f8:	bfc4      	itt	gt
 80055fa:	1a9b      	subgt	r3, r3, r2
 80055fc:	18ed      	addgt	r5, r5, r3
 80055fe:	2600      	movs	r6, #0
 8005600:	341a      	adds	r4, #26
 8005602:	42b5      	cmp	r5, r6
 8005604:	d11a      	bne.n	800563c <_printf_common+0xc8>
 8005606:	2000      	movs	r0, #0
 8005608:	e008      	b.n	800561c <_printf_common+0xa8>
 800560a:	2301      	movs	r3, #1
 800560c:	4652      	mov	r2, sl
 800560e:	4641      	mov	r1, r8
 8005610:	4638      	mov	r0, r7
 8005612:	47c8      	blx	r9
 8005614:	3001      	adds	r0, #1
 8005616:	d103      	bne.n	8005620 <_printf_common+0xac>
 8005618:	f04f 30ff 	mov.w	r0, #4294967295
 800561c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005620:	3501      	adds	r5, #1
 8005622:	e7c6      	b.n	80055b2 <_printf_common+0x3e>
 8005624:	18e1      	adds	r1, r4, r3
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	2030      	movs	r0, #48	@ 0x30
 800562a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800562e:	4422      	add	r2, r4
 8005630:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005634:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005638:	3302      	adds	r3, #2
 800563a:	e7c7      	b.n	80055cc <_printf_common+0x58>
 800563c:	2301      	movs	r3, #1
 800563e:	4622      	mov	r2, r4
 8005640:	4641      	mov	r1, r8
 8005642:	4638      	mov	r0, r7
 8005644:	47c8      	blx	r9
 8005646:	3001      	adds	r0, #1
 8005648:	d0e6      	beq.n	8005618 <_printf_common+0xa4>
 800564a:	3601      	adds	r6, #1
 800564c:	e7d9      	b.n	8005602 <_printf_common+0x8e>
	...

08005650 <_printf_i>:
 8005650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005654:	7e0f      	ldrb	r7, [r1, #24]
 8005656:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005658:	2f78      	cmp	r7, #120	@ 0x78
 800565a:	4691      	mov	r9, r2
 800565c:	4680      	mov	r8, r0
 800565e:	460c      	mov	r4, r1
 8005660:	469a      	mov	sl, r3
 8005662:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005666:	d807      	bhi.n	8005678 <_printf_i+0x28>
 8005668:	2f62      	cmp	r7, #98	@ 0x62
 800566a:	d80a      	bhi.n	8005682 <_printf_i+0x32>
 800566c:	2f00      	cmp	r7, #0
 800566e:	f000 80d2 	beq.w	8005816 <_printf_i+0x1c6>
 8005672:	2f58      	cmp	r7, #88	@ 0x58
 8005674:	f000 80b9 	beq.w	80057ea <_printf_i+0x19a>
 8005678:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800567c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005680:	e03a      	b.n	80056f8 <_printf_i+0xa8>
 8005682:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005686:	2b15      	cmp	r3, #21
 8005688:	d8f6      	bhi.n	8005678 <_printf_i+0x28>
 800568a:	a101      	add	r1, pc, #4	@ (adr r1, 8005690 <_printf_i+0x40>)
 800568c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005690:	080056e9 	.word	0x080056e9
 8005694:	080056fd 	.word	0x080056fd
 8005698:	08005679 	.word	0x08005679
 800569c:	08005679 	.word	0x08005679
 80056a0:	08005679 	.word	0x08005679
 80056a4:	08005679 	.word	0x08005679
 80056a8:	080056fd 	.word	0x080056fd
 80056ac:	08005679 	.word	0x08005679
 80056b0:	08005679 	.word	0x08005679
 80056b4:	08005679 	.word	0x08005679
 80056b8:	08005679 	.word	0x08005679
 80056bc:	080057fd 	.word	0x080057fd
 80056c0:	08005727 	.word	0x08005727
 80056c4:	080057b7 	.word	0x080057b7
 80056c8:	08005679 	.word	0x08005679
 80056cc:	08005679 	.word	0x08005679
 80056d0:	0800581f 	.word	0x0800581f
 80056d4:	08005679 	.word	0x08005679
 80056d8:	08005727 	.word	0x08005727
 80056dc:	08005679 	.word	0x08005679
 80056e0:	08005679 	.word	0x08005679
 80056e4:	080057bf 	.word	0x080057bf
 80056e8:	6833      	ldr	r3, [r6, #0]
 80056ea:	1d1a      	adds	r2, r3, #4
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6032      	str	r2, [r6, #0]
 80056f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056f8:	2301      	movs	r3, #1
 80056fa:	e09d      	b.n	8005838 <_printf_i+0x1e8>
 80056fc:	6833      	ldr	r3, [r6, #0]
 80056fe:	6820      	ldr	r0, [r4, #0]
 8005700:	1d19      	adds	r1, r3, #4
 8005702:	6031      	str	r1, [r6, #0]
 8005704:	0606      	lsls	r6, r0, #24
 8005706:	d501      	bpl.n	800570c <_printf_i+0xbc>
 8005708:	681d      	ldr	r5, [r3, #0]
 800570a:	e003      	b.n	8005714 <_printf_i+0xc4>
 800570c:	0645      	lsls	r5, r0, #25
 800570e:	d5fb      	bpl.n	8005708 <_printf_i+0xb8>
 8005710:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005714:	2d00      	cmp	r5, #0
 8005716:	da03      	bge.n	8005720 <_printf_i+0xd0>
 8005718:	232d      	movs	r3, #45	@ 0x2d
 800571a:	426d      	negs	r5, r5
 800571c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005720:	4859      	ldr	r0, [pc, #356]	@ (8005888 <_printf_i+0x238>)
 8005722:	230a      	movs	r3, #10
 8005724:	e011      	b.n	800574a <_printf_i+0xfa>
 8005726:	6821      	ldr	r1, [r4, #0]
 8005728:	6833      	ldr	r3, [r6, #0]
 800572a:	0608      	lsls	r0, r1, #24
 800572c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005730:	d402      	bmi.n	8005738 <_printf_i+0xe8>
 8005732:	0649      	lsls	r1, r1, #25
 8005734:	bf48      	it	mi
 8005736:	b2ad      	uxthmi	r5, r5
 8005738:	2f6f      	cmp	r7, #111	@ 0x6f
 800573a:	4853      	ldr	r0, [pc, #332]	@ (8005888 <_printf_i+0x238>)
 800573c:	6033      	str	r3, [r6, #0]
 800573e:	bf14      	ite	ne
 8005740:	230a      	movne	r3, #10
 8005742:	2308      	moveq	r3, #8
 8005744:	2100      	movs	r1, #0
 8005746:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800574a:	6866      	ldr	r6, [r4, #4]
 800574c:	60a6      	str	r6, [r4, #8]
 800574e:	2e00      	cmp	r6, #0
 8005750:	bfa2      	ittt	ge
 8005752:	6821      	ldrge	r1, [r4, #0]
 8005754:	f021 0104 	bicge.w	r1, r1, #4
 8005758:	6021      	strge	r1, [r4, #0]
 800575a:	b90d      	cbnz	r5, 8005760 <_printf_i+0x110>
 800575c:	2e00      	cmp	r6, #0
 800575e:	d04b      	beq.n	80057f8 <_printf_i+0x1a8>
 8005760:	4616      	mov	r6, r2
 8005762:	fbb5 f1f3 	udiv	r1, r5, r3
 8005766:	fb03 5711 	mls	r7, r3, r1, r5
 800576a:	5dc7      	ldrb	r7, [r0, r7]
 800576c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005770:	462f      	mov	r7, r5
 8005772:	42bb      	cmp	r3, r7
 8005774:	460d      	mov	r5, r1
 8005776:	d9f4      	bls.n	8005762 <_printf_i+0x112>
 8005778:	2b08      	cmp	r3, #8
 800577a:	d10b      	bne.n	8005794 <_printf_i+0x144>
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	07df      	lsls	r7, r3, #31
 8005780:	d508      	bpl.n	8005794 <_printf_i+0x144>
 8005782:	6923      	ldr	r3, [r4, #16]
 8005784:	6861      	ldr	r1, [r4, #4]
 8005786:	4299      	cmp	r1, r3
 8005788:	bfde      	ittt	le
 800578a:	2330      	movle	r3, #48	@ 0x30
 800578c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005790:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005794:	1b92      	subs	r2, r2, r6
 8005796:	6122      	str	r2, [r4, #16]
 8005798:	f8cd a000 	str.w	sl, [sp]
 800579c:	464b      	mov	r3, r9
 800579e:	aa03      	add	r2, sp, #12
 80057a0:	4621      	mov	r1, r4
 80057a2:	4640      	mov	r0, r8
 80057a4:	f7ff fee6 	bl	8005574 <_printf_common>
 80057a8:	3001      	adds	r0, #1
 80057aa:	d14a      	bne.n	8005842 <_printf_i+0x1f2>
 80057ac:	f04f 30ff 	mov.w	r0, #4294967295
 80057b0:	b004      	add	sp, #16
 80057b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	f043 0320 	orr.w	r3, r3, #32
 80057bc:	6023      	str	r3, [r4, #0]
 80057be:	4833      	ldr	r0, [pc, #204]	@ (800588c <_printf_i+0x23c>)
 80057c0:	2778      	movs	r7, #120	@ 0x78
 80057c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	6831      	ldr	r1, [r6, #0]
 80057ca:	061f      	lsls	r7, r3, #24
 80057cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80057d0:	d402      	bmi.n	80057d8 <_printf_i+0x188>
 80057d2:	065f      	lsls	r7, r3, #25
 80057d4:	bf48      	it	mi
 80057d6:	b2ad      	uxthmi	r5, r5
 80057d8:	6031      	str	r1, [r6, #0]
 80057da:	07d9      	lsls	r1, r3, #31
 80057dc:	bf44      	itt	mi
 80057de:	f043 0320 	orrmi.w	r3, r3, #32
 80057e2:	6023      	strmi	r3, [r4, #0]
 80057e4:	b11d      	cbz	r5, 80057ee <_printf_i+0x19e>
 80057e6:	2310      	movs	r3, #16
 80057e8:	e7ac      	b.n	8005744 <_printf_i+0xf4>
 80057ea:	4827      	ldr	r0, [pc, #156]	@ (8005888 <_printf_i+0x238>)
 80057ec:	e7e9      	b.n	80057c2 <_printf_i+0x172>
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	f023 0320 	bic.w	r3, r3, #32
 80057f4:	6023      	str	r3, [r4, #0]
 80057f6:	e7f6      	b.n	80057e6 <_printf_i+0x196>
 80057f8:	4616      	mov	r6, r2
 80057fa:	e7bd      	b.n	8005778 <_printf_i+0x128>
 80057fc:	6833      	ldr	r3, [r6, #0]
 80057fe:	6825      	ldr	r5, [r4, #0]
 8005800:	6961      	ldr	r1, [r4, #20]
 8005802:	1d18      	adds	r0, r3, #4
 8005804:	6030      	str	r0, [r6, #0]
 8005806:	062e      	lsls	r6, r5, #24
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	d501      	bpl.n	8005810 <_printf_i+0x1c0>
 800580c:	6019      	str	r1, [r3, #0]
 800580e:	e002      	b.n	8005816 <_printf_i+0x1c6>
 8005810:	0668      	lsls	r0, r5, #25
 8005812:	d5fb      	bpl.n	800580c <_printf_i+0x1bc>
 8005814:	8019      	strh	r1, [r3, #0]
 8005816:	2300      	movs	r3, #0
 8005818:	6123      	str	r3, [r4, #16]
 800581a:	4616      	mov	r6, r2
 800581c:	e7bc      	b.n	8005798 <_printf_i+0x148>
 800581e:	6833      	ldr	r3, [r6, #0]
 8005820:	1d1a      	adds	r2, r3, #4
 8005822:	6032      	str	r2, [r6, #0]
 8005824:	681e      	ldr	r6, [r3, #0]
 8005826:	6862      	ldr	r2, [r4, #4]
 8005828:	2100      	movs	r1, #0
 800582a:	4630      	mov	r0, r6
 800582c:	f7fa fce8 	bl	8000200 <memchr>
 8005830:	b108      	cbz	r0, 8005836 <_printf_i+0x1e6>
 8005832:	1b80      	subs	r0, r0, r6
 8005834:	6060      	str	r0, [r4, #4]
 8005836:	6863      	ldr	r3, [r4, #4]
 8005838:	6123      	str	r3, [r4, #16]
 800583a:	2300      	movs	r3, #0
 800583c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005840:	e7aa      	b.n	8005798 <_printf_i+0x148>
 8005842:	6923      	ldr	r3, [r4, #16]
 8005844:	4632      	mov	r2, r6
 8005846:	4649      	mov	r1, r9
 8005848:	4640      	mov	r0, r8
 800584a:	47d0      	blx	sl
 800584c:	3001      	adds	r0, #1
 800584e:	d0ad      	beq.n	80057ac <_printf_i+0x15c>
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	079b      	lsls	r3, r3, #30
 8005854:	d413      	bmi.n	800587e <_printf_i+0x22e>
 8005856:	68e0      	ldr	r0, [r4, #12]
 8005858:	9b03      	ldr	r3, [sp, #12]
 800585a:	4298      	cmp	r0, r3
 800585c:	bfb8      	it	lt
 800585e:	4618      	movlt	r0, r3
 8005860:	e7a6      	b.n	80057b0 <_printf_i+0x160>
 8005862:	2301      	movs	r3, #1
 8005864:	4632      	mov	r2, r6
 8005866:	4649      	mov	r1, r9
 8005868:	4640      	mov	r0, r8
 800586a:	47d0      	blx	sl
 800586c:	3001      	adds	r0, #1
 800586e:	d09d      	beq.n	80057ac <_printf_i+0x15c>
 8005870:	3501      	adds	r5, #1
 8005872:	68e3      	ldr	r3, [r4, #12]
 8005874:	9903      	ldr	r1, [sp, #12]
 8005876:	1a5b      	subs	r3, r3, r1
 8005878:	42ab      	cmp	r3, r5
 800587a:	dcf2      	bgt.n	8005862 <_printf_i+0x212>
 800587c:	e7eb      	b.n	8005856 <_printf_i+0x206>
 800587e:	2500      	movs	r5, #0
 8005880:	f104 0619 	add.w	r6, r4, #25
 8005884:	e7f5      	b.n	8005872 <_printf_i+0x222>
 8005886:	bf00      	nop
 8005888:	08006029 	.word	0x08006029
 800588c:	0800603a 	.word	0x0800603a

08005890 <memmove>:
 8005890:	4288      	cmp	r0, r1
 8005892:	b510      	push	{r4, lr}
 8005894:	eb01 0402 	add.w	r4, r1, r2
 8005898:	d902      	bls.n	80058a0 <memmove+0x10>
 800589a:	4284      	cmp	r4, r0
 800589c:	4623      	mov	r3, r4
 800589e:	d807      	bhi.n	80058b0 <memmove+0x20>
 80058a0:	1e43      	subs	r3, r0, #1
 80058a2:	42a1      	cmp	r1, r4
 80058a4:	d008      	beq.n	80058b8 <memmove+0x28>
 80058a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058ae:	e7f8      	b.n	80058a2 <memmove+0x12>
 80058b0:	4402      	add	r2, r0
 80058b2:	4601      	mov	r1, r0
 80058b4:	428a      	cmp	r2, r1
 80058b6:	d100      	bne.n	80058ba <memmove+0x2a>
 80058b8:	bd10      	pop	{r4, pc}
 80058ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058c2:	e7f7      	b.n	80058b4 <memmove+0x24>

080058c4 <_sbrk_r>:
 80058c4:	b538      	push	{r3, r4, r5, lr}
 80058c6:	4d06      	ldr	r5, [pc, #24]	@ (80058e0 <_sbrk_r+0x1c>)
 80058c8:	2300      	movs	r3, #0
 80058ca:	4604      	mov	r4, r0
 80058cc:	4608      	mov	r0, r1
 80058ce:	602b      	str	r3, [r5, #0]
 80058d0:	f7fc fad4 	bl	8001e7c <_sbrk>
 80058d4:	1c43      	adds	r3, r0, #1
 80058d6:	d102      	bne.n	80058de <_sbrk_r+0x1a>
 80058d8:	682b      	ldr	r3, [r5, #0]
 80058da:	b103      	cbz	r3, 80058de <_sbrk_r+0x1a>
 80058dc:	6023      	str	r3, [r4, #0]
 80058de:	bd38      	pop	{r3, r4, r5, pc}
 80058e0:	2000319c 	.word	0x2000319c

080058e4 <memcpy>:
 80058e4:	440a      	add	r2, r1
 80058e6:	4291      	cmp	r1, r2
 80058e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80058ec:	d100      	bne.n	80058f0 <memcpy+0xc>
 80058ee:	4770      	bx	lr
 80058f0:	b510      	push	{r4, lr}
 80058f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058fa:	4291      	cmp	r1, r2
 80058fc:	d1f9      	bne.n	80058f2 <memcpy+0xe>
 80058fe:	bd10      	pop	{r4, pc}

08005900 <_realloc_r>:
 8005900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005904:	4680      	mov	r8, r0
 8005906:	4615      	mov	r5, r2
 8005908:	460c      	mov	r4, r1
 800590a:	b921      	cbnz	r1, 8005916 <_realloc_r+0x16>
 800590c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005910:	4611      	mov	r1, r2
 8005912:	f7ff bc4b 	b.w	80051ac <_malloc_r>
 8005916:	b92a      	cbnz	r2, 8005924 <_realloc_r+0x24>
 8005918:	f7ff fbdc 	bl	80050d4 <_free_r>
 800591c:	2400      	movs	r4, #0
 800591e:	4620      	mov	r0, r4
 8005920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005924:	f000 f81a 	bl	800595c <_malloc_usable_size_r>
 8005928:	4285      	cmp	r5, r0
 800592a:	4606      	mov	r6, r0
 800592c:	d802      	bhi.n	8005934 <_realloc_r+0x34>
 800592e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005932:	d8f4      	bhi.n	800591e <_realloc_r+0x1e>
 8005934:	4629      	mov	r1, r5
 8005936:	4640      	mov	r0, r8
 8005938:	f7ff fc38 	bl	80051ac <_malloc_r>
 800593c:	4607      	mov	r7, r0
 800593e:	2800      	cmp	r0, #0
 8005940:	d0ec      	beq.n	800591c <_realloc_r+0x1c>
 8005942:	42b5      	cmp	r5, r6
 8005944:	462a      	mov	r2, r5
 8005946:	4621      	mov	r1, r4
 8005948:	bf28      	it	cs
 800594a:	4632      	movcs	r2, r6
 800594c:	f7ff ffca 	bl	80058e4 <memcpy>
 8005950:	4621      	mov	r1, r4
 8005952:	4640      	mov	r0, r8
 8005954:	f7ff fbbe 	bl	80050d4 <_free_r>
 8005958:	463c      	mov	r4, r7
 800595a:	e7e0      	b.n	800591e <_realloc_r+0x1e>

0800595c <_malloc_usable_size_r>:
 800595c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005960:	1f18      	subs	r0, r3, #4
 8005962:	2b00      	cmp	r3, #0
 8005964:	bfbc      	itt	lt
 8005966:	580b      	ldrlt	r3, [r1, r0]
 8005968:	18c0      	addlt	r0, r0, r3
 800596a:	4770      	bx	lr

0800596c <_init>:
 800596c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596e:	bf00      	nop
 8005970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005972:	bc08      	pop	{r3}
 8005974:	469e      	mov	lr, r3
 8005976:	4770      	bx	lr

08005978 <_fini>:
 8005978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597a:	bf00      	nop
 800597c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597e:	bc08      	pop	{r3}
 8005980:	469e      	mov	lr, r3
 8005982:	4770      	bx	lr
